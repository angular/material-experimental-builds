{"version":3,"file":"mdc-slider__testing.js","sources":["../../../../../../../src/material-experimental/mdc-slider/testing/slider-harness.ts","../../../../../../../src/material-experimental/mdc-slider/testing/public-api.ts","../../../../../../../src/material-experimental/mdc-slider/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {SliderHarnessFilters} from '@angular/material/slider/testing';\n\n/** Harness for interacting with a MDC mat-slider in tests. */\nexport class MatSliderHarness extends ComponentHarness {\n  static hostSelector = 'mat-slider';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a mat-slider with\n   * specific attributes.\n   * @param options Options for narrowing the search:\n   *   - `selector` finds a slider whose host element matches the given selector.\n   *   - `id` finds a slider with specific id.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: SliderHarnessFilters = {}): HarnessPredicate<MatSliderHarness> {\n    return new HarnessPredicate(MatSliderHarness, options);\n  }\n\n  private _textLabel = this.locatorForOptional('.mdc-slider__pin-value-marker');\n  private _trackContainer = this.locatorFor('.mdc-slider__track-container');\n\n  /** Gets the slider's id. */\n  async getId(): Promise<string|null> {\n    const id = await (await this.host()).getProperty('id');\n    // In case no id has been specified, the \"id\" property always returns\n    // an empty string. To make this method more explicit, we return null.\n    return id !== '' ? id : null;\n  }\n\n  /**\n   * Gets the current display value of the slider. Returns null if the thumb\n   * label is disabled.\n   */\n  async getDisplayValue(): Promise<string|null> {\n    const textLabelEl = await this._textLabel();\n    return textLabelEl ? textLabelEl.text() : null;\n  }\n\n  /** Gets the current percentage value of the slider. */\n  async getPercentage(): Promise<number> {\n    return this._calculatePercentage(await this.getValue());\n  }\n\n  /** Gets the current value of the slider. */\n  async getValue(): Promise<number> {\n    return coerceNumberProperty(await (await this.host()).getAttribute('aria-valuenow'));\n  }\n\n  /** Gets the maximum value of the slider. */\n  async getMaxValue(): Promise<number> {\n    return coerceNumberProperty(await (await this.host()).getAttribute('aria-valuemax'));\n  }\n\n  /** Gets the minimum value of the slider. */\n  async getMinValue(): Promise<number> {\n    return coerceNumberProperty(await (await this.host()).getAttribute('aria-valuemin'));\n  }\n\n  /** Whether the slider is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this.host()).getAttribute('aria-disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  /** Gets the orientation of the slider. */\n  async getOrientation(): Promise<'horizontal'> {\n    // \"aria-orientation\" will always be set to \"horizontal\" for the MDC\n    // slider as there is no vertical slider support yet.\n    return (await this.host()).getAttribute('aria-orientation') as Promise<'horizontal'>;\n  }\n\n  /**\n   * Sets the value of the slider by clicking on the slider track.\n   *\n   * Note that in rare cases the value cannot be set to the exact specified value. This\n   * can happen if not every value of the slider maps to a single pixel that could be\n   * clicked using mouse interaction. In such cases consider using the keyboard to\n   * select the given value or expand the slider's size for a better user experience.\n   */\n  async setValue(value: number): Promise<void> {\n    // Need to wait for async tasks outside Angular to complete. This is necessary because\n    // whenever directionality changes, the slider updates the element dimensions in the next\n    // tick (in a timer outside of the NgZone). Since this method relies on the element\n    // dimensions to be updated, we wait for the delayed calculation task to complete.\n    await this.waitForTasksOutsideAngular();\n\n    const [sliderEl, trackContainer] =\n        await Promise.all([this.host(), this._trackContainer()]);\n    let percentage = await this._calculatePercentage(value);\n    const {width} = await trackContainer.getDimensions();\n\n    // In case the slider is displayed in RTL mode, we need to invert the\n    // percentage so that the proper value is set.\n    if (await sliderEl.hasClass('mat-slider-invert-mouse-coords')) {\n      percentage = 1 - percentage;\n    }\n\n    // We need to round the new coordinates because creating fake DOM\n    // events will cause the coordinates to be rounded down.\n    await sliderEl.click(Math.round(width * percentage), 0);\n  }\n\n  /**\n   * Focuses the slider and returns a void promise that indicates when the\n   * action is complete.\n   */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /**\n   * Blurs the slider and returns a void promise that indicates when the\n   * action is complete.\n   */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Calculates the percentage of the given value. */\n  private async _calculatePercentage(value: number) {\n    const [min, max] = await Promise.all([this.getMinValue(), this.getMaxValue()]);\n    return (value - min) / (max - min);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './slider-harness';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}