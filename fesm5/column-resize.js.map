{"version":3,"file":"column-resize.js","sources":["../../../../../../src/material-experimental/column-resize/resize-strategy.ts","../../../../../../src/material-experimental/column-resize/column-resize-directives/common.ts","../../../../../../src/material-experimental/column-resize/column-resize-directives/column-resize.ts","../../../../../../src/material-experimental/column-resize/column-resize-directives/column-resize-flex.ts","../../../../../../src/material-experimental/column-resize/column-resize-directives/default-enabled-column-resize.ts","../../../../../../src/material-experimental/column-resize/column-resize-directives/default-enabled-column-resize-flex.ts","../../../../../../src/material-experimental/column-resize/overlay-handle.ts","../../../../../../src/material-experimental/column-resize/resizable-directives/common.ts","../../../../../../src/material-experimental/column-resize/resizable-directives/default-enabled-resizable.ts","../../../../../../src/material-experimental/column-resize/resizable-directives/resizable.ts","../../../../../../src/material-experimental/column-resize/column-resize-module.ts","../../../../../../src/material-experimental/column-resize/public-api.ts","../../../../../../src/material-experimental/column-resize/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Provider} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\nimport {\n  ColumnResize,\n  ResizeStrategy,\n  CdkFlexTableResizeStrategy,\n  TABLE_LAYOUT_FIXED_RESIZE_STRATEGY_PROVIDER,\n} from '@angular/cdk-experimental/column-resize';\n\nexport {TABLE_LAYOUT_FIXED_RESIZE_STRATEGY_PROVIDER};\n\n/**\n * Overrides CdkFlexTableResizeStrategy to match mat-column elements.\n */\n@Injectable()\nexport class MatFlexTableResizeStrategy extends CdkFlexTableResizeStrategy {\n  constructor(\n      columnResize: ColumnResize,\n      @Inject(DOCUMENT) document: any) {\n    super(columnResize, document);\n  }\n\n  protected getColumnCssClass(cssFriendlyColumnName: string): string {\n    return `mat-column-${cssFriendlyColumnName}`;\n  }\n}\n\nexport const FLEX_RESIZE_STRATEGY_PROVIDER: Provider = {\n  provide: ResizeStrategy,\n  useClass: MatFlexTableResizeStrategy,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Provider} from '@angular/core';\n\nimport {\n  ColumnResize,\n  ColumnResizeNotifier,\n  ColumnResizeNotifierSource,\n  HeaderRowEventDispatcher,\n} from '@angular/cdk-experimental/column-resize';\n\nimport {\n  TABLE_LAYOUT_FIXED_RESIZE_STRATEGY_PROVIDER,\n  FLEX_RESIZE_STRATEGY_PROVIDER,\n} from '../resize-strategy';\n\nconst PROVIDERS: Provider[] = [\n  ColumnResizeNotifier,\n  HeaderRowEventDispatcher,\n  ColumnResizeNotifierSource,\n];\nexport const TABLE_PROVIDERS: Provider[] = [\n  ...PROVIDERS,\n  TABLE_LAYOUT_FIXED_RESIZE_STRATEGY_PROVIDER,\n];\nexport const FLEX_PROVIDERS: Provider[] = [...PROVIDERS, FLEX_RESIZE_STRATEGY_PROVIDER];\n\nconst HOST_BINDINGS = {\n  '[class.mat-column-resize-rtl]': 'directionality.value === \"rtl\"',\n};\nexport const TABLE_HOST_BINDINGS = {\n  ...HOST_BINDINGS,\n  'class': 'mat-column-resize-table',\n};\nexport const FLEX_HOST_BINDINGS = {\n  ...HOST_BINDINGS,\n  'class': 'mat-column-resize-flex',\n};\n\nexport abstract class AbstractMatColumnResize extends ColumnResize {\n  getTableHeight() {\n    return this.elementRef.nativeElement!.offsetHeight;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  ColumnResize,\n  ColumnResizeNotifier,\n  ColumnResizeNotifierSource,\n  HeaderRowEventDispatcher,\n} from '@angular/cdk-experimental/column-resize';\n\nimport {AbstractMatColumnResize, TABLE_HOST_BINDINGS, TABLE_PROVIDERS} from './common';\n\n/**\n * Explicitly enables column resizing for a table-based mat-table.\n * Individual columns must be annotated specifically.\n */\n@Directive({\n  selector: 'table[mat-table][columnResize]',\n  host: TABLE_HOST_BINDINGS,\n  providers: [\n    ...TABLE_PROVIDERS,\n    {provide: ColumnResize, useExisting: MatColumnResize},\n  ],\n})\nexport class MatColumnResize extends AbstractMatColumnResize {\n  constructor(\n      readonly columnResizeNotifier: ColumnResizeNotifier,\n      readonly directionality: Directionality,\n      protected readonly elementRef: ElementRef,\n      protected readonly eventDispatcher: HeaderRowEventDispatcher,\n      protected readonly ngZone: NgZone,\n      protected readonly notifier: ColumnResizeNotifierSource) {\n    super();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  ColumnResize,\n  ColumnResizeNotifier,\n  ColumnResizeNotifierSource,\n  HeaderRowEventDispatcher,\n} from '@angular/cdk-experimental/column-resize';\n\nimport {AbstractMatColumnResize, FLEX_HOST_BINDINGS, FLEX_PROVIDERS} from './common';\n\n/**\n * Explicitly enables column resizing for a flexbox-based mat-table.\n * Individual columns must be annotated specifically.\n */\n@Directive({\n  selector: 'mat-table[columnResize]',\n  host: FLEX_HOST_BINDINGS,\n  providers: [\n    ...FLEX_PROVIDERS,\n    {provide: ColumnResize, useExisting: MatColumnResizeFlex},\n  ],\n})\nexport class MatColumnResizeFlex extends AbstractMatColumnResize {\n  constructor(\n      readonly columnResizeNotifier: ColumnResizeNotifier,\n      readonly directionality: Directionality,\n      protected readonly elementRef: ElementRef,\n      protected readonly eventDispatcher: HeaderRowEventDispatcher,\n      protected readonly ngZone: NgZone,\n      protected readonly notifier: ColumnResizeNotifierSource) {\n    super();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  ColumnResize,\n  ColumnResizeNotifier,\n  ColumnResizeNotifierSource,\n  HeaderRowEventDispatcher,\n} from '@angular/cdk-experimental/column-resize';\n\nimport {AbstractMatColumnResize, TABLE_HOST_BINDINGS, TABLE_PROVIDERS} from './common';\n\n/**\n * Implicitly enables column resizing for a table-based mat-table.\n * Individual columns will be resizable unless opted out.\n */\n@Directive({\n  selector: 'table[mat-table]',\n  host: TABLE_HOST_BINDINGS,\n  providers: [\n    ...TABLE_PROVIDERS,\n    {provide: ColumnResize, useExisting: MatDefaultEnabledColumnResize},\n  ],\n})\nexport class MatDefaultEnabledColumnResize extends AbstractMatColumnResize {\n  constructor(\n      readonly columnResizeNotifier: ColumnResizeNotifier,\n      readonly directionality: Directionality,\n      protected readonly elementRef: ElementRef,\n      protected readonly eventDispatcher: HeaderRowEventDispatcher,\n      protected readonly ngZone: NgZone,\n      protected readonly notifier: ColumnResizeNotifierSource) {\n    super();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  ColumnResize,\n  ColumnResizeNotifier,\n  ColumnResizeNotifierSource,\n  HeaderRowEventDispatcher,\n} from '@angular/cdk-experimental/column-resize';\n\nimport {AbstractMatColumnResize, FLEX_HOST_BINDINGS, FLEX_PROVIDERS} from './common';\n\n/**\n * Implicitly enables column resizing for a flexbox-based mat-table.\n * Individual columns will be resizable unless opted out.\n */\n@Directive({\n  selector: 'mat-table',\n  host: FLEX_HOST_BINDINGS,\n  providers: [\n    ...FLEX_PROVIDERS,\n    {provide: ColumnResize, useExisting: MatDefaultEnabledColumnResizeFlex},\n  ],\n})\nexport class MatDefaultEnabledColumnResizeFlex extends AbstractMatColumnResize {\n  constructor(\n      readonly columnResizeNotifier: ColumnResizeNotifier,\n      readonly directionality: Directionality,\n      protected readonly elementRef: ElementRef,\n      protected readonly eventDispatcher: HeaderRowEventDispatcher,\n      protected readonly ngZone: NgZone,\n      protected readonly notifier: ColumnResizeNotifierSource) {\n    super();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  NgZone,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  ColumnResize,\n  ColumnResizeNotifierSource,\n  HeaderRowEventDispatcher,\n  ResizeOverlayHandle,\n  ResizeRef,\n} from '@angular/cdk-experimental/column-resize';\n\nimport {AbstractMatColumnResize} from './column-resize-directives/common';\n\n/**\n * Component shown over the edge of a resizable column that is responsible\n * for handling column resize mouse events and displaying a vertical line along the column edge.\n */\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  host: {'class': 'mat-column-resize-overlay-thumb'},\n  template: '',\n})\nexport class MatColumnResizeOverlayHandle extends ResizeOverlayHandle {\n  protected readonly document: Document;\n\n  constructor(\n      protected readonly columnDef: CdkColumnDef,\n      protected readonly columnResize: ColumnResize,\n      protected readonly directionality: Directionality,\n      protected readonly elementRef: ElementRef,\n      protected readonly eventDispatcher: HeaderRowEventDispatcher,\n      protected readonly ngZone: NgZone,\n      protected readonly resizeNotifier: ColumnResizeNotifierSource,\n      protected readonly resizeRef: ResizeRef,\n      @Inject(DOCUMENT) document: any) {\n    super();\n    this.document = document;\n  }\n\n  protected updateResizeActive(active: boolean): void {\n    super.updateResizeActive(active);\n\n    this.resizeRef.overlayRef.updateSize({\n      height: active ?\n          (this.columnResize as AbstractMatColumnResize).getTableHeight() :\n          this.resizeRef.origin.nativeElement!.offsetHeight\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {Resizable} from '@angular/cdk-experimental/column-resize';\nimport {MatColumnResizeOverlayHandle} from '../overlay-handle';\n\nexport abstract class AbstractMatResizable extends Resizable<MatColumnResizeOverlayHandle> {\n  minWidthPxInternal = 32;\n\n  protected getInlineHandleCssClassName(): string {\n    return 'mat-resizable-handle';\n  }\n\n  protected getOverlayHandleComponentType(): Type<MatColumnResizeOverlayHandle> {\n    return MatColumnResizeOverlayHandle;\n  }\n}\n\nexport const RESIZABLE_HOST_BINDINGS = {\n  'class': 'mat-resizable',\n};\n\nexport const RESIZABLE_INPUTS = [\n  'minWidthPx: matResizableMinWidthPx',\n  'maxWidthPx: matResizableMaxWidthPx',\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Injector,\n  NgZone,\n  ViewContainerRef,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay} from '@angular/cdk/overlay';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ColumnResize,\n  ColumnResizeNotifierSource,\n  HeaderRowEventDispatcher,\n  ResizeStrategy,\n} from '@angular/cdk-experimental/column-resize';\n\nimport {AbstractMatResizable, RESIZABLE_HOST_BINDINGS, RESIZABLE_INPUTS} from './common';\n\n/**\n * Implicitly enables column resizing for a mat-header-cell unless the disableResize attribute\n * is present.\n */\n@Directive({\n  selector: 'mat-header-cell:not([disableResize]), th[mat-header-cell]:not([disableResize])',\n  host: RESIZABLE_HOST_BINDINGS,\n  inputs: RESIZABLE_INPUTS,\n})\nexport class MatDefaultResizable extends AbstractMatResizable {\n  protected readonly document: Document;\n\n  constructor(\n      protected readonly columnDef: CdkColumnDef,\n      protected readonly columnResize: ColumnResize,\n      protected readonly directionality: Directionality,\n      @Inject(DOCUMENT) document: any,\n      protected readonly elementRef: ElementRef,\n      protected readonly eventDispatcher: HeaderRowEventDispatcher,\n      protected readonly injector: Injector,\n      protected readonly ngZone: NgZone,\n      protected readonly overlay: Overlay,\n      protected readonly resizeNotifier: ColumnResizeNotifierSource,\n      protected readonly resizeStrategy: ResizeStrategy,\n      protected readonly viewContainerRef: ViewContainerRef) {\n    super();\n    this.document = document;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Injector,\n  NgZone,\n  ViewContainerRef,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay} from '@angular/cdk/overlay';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ColumnResize,\n  ColumnResizeNotifierSource,\n  HeaderRowEventDispatcher,\n  ResizeStrategy,\n} from '@angular/cdk-experimental/column-resize';\n\nimport {AbstractMatResizable, RESIZABLE_HOST_BINDINGS, RESIZABLE_INPUTS} from './common';\n\n/**\n * Explicitly enables column resizing for a mat-header-cell.\n */\n@Directive({\n  selector: 'mat-header-cell[resizable], th[mat-header-cell][resizable]',\n  host: RESIZABLE_HOST_BINDINGS,\n  inputs: RESIZABLE_INPUTS,\n})\nexport class MatResizable extends AbstractMatResizable {\n  protected readonly document: Document;\n\n  constructor(\n      protected readonly columnDef: CdkColumnDef,\n      protected readonly columnResize: ColumnResize,\n      protected readonly directionality: Directionality,\n      @Inject(DOCUMENT) document: any,\n      protected readonly elementRef: ElementRef,\n      protected readonly eventDispatcher: HeaderRowEventDispatcher,\n      protected readonly injector: Injector,\n      protected readonly ngZone: NgZone,\n      protected readonly overlay: Overlay,\n      protected readonly resizeNotifier: ColumnResizeNotifierSource,\n      protected readonly resizeStrategy: ResizeStrategy,\n      protected readonly viewContainerRef: ViewContainerRef) {\n    super();\n    this.document = document;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\n\nimport {MatColumnResize} from './column-resize-directives/column-resize';\nimport {MatColumnResizeFlex} from './column-resize-directives/column-resize-flex';\nimport {\n  MatDefaultEnabledColumnResize\n} from './column-resize-directives/default-enabled-column-resize';\nimport {\n  MatDefaultEnabledColumnResizeFlex\n} from './column-resize-directives/default-enabled-column-resize-flex';\nimport {MatDefaultResizable} from './resizable-directives/default-enabled-resizable';\nimport {MatResizable} from './resizable-directives/resizable';\nimport {MatColumnResizeOverlayHandle} from './overlay-handle';\n\nconst ENTRY_COMMON_COMPONENTS = [\n  MatColumnResizeOverlayHandle,\n];\n\n@NgModule({\n  declarations: ENTRY_COMMON_COMPONENTS,\n  exports: ENTRY_COMMON_COMPONENTS,\n  entryComponents: ENTRY_COMMON_COMPONENTS,\n})\nexport class MatColumnResizeCommonModule {}\n\nconst IMPORTS = [\n  OverlayModule,\n  MatColumnResizeCommonModule,\n];\n\n@NgModule({\n  imports: IMPORTS,\n  declarations: [\n    MatDefaultEnabledColumnResize,\n    MatDefaultEnabledColumnResizeFlex,\n    MatDefaultResizable,\n  ],\n  exports: [\n    MatDefaultEnabledColumnResize,\n    MatDefaultEnabledColumnResizeFlex,\n    MatDefaultResizable,\n  ],\n})\nexport class MatDefaultEnabledColumnResizeModule {}\n\n@NgModule({\n  imports: IMPORTS,\n  declarations: [\n    MatColumnResize,\n    MatColumnResizeFlex,\n    MatResizable,\n  ],\n  exports: [\n    MatColumnResize,\n    MatColumnResizeFlex,\n    MatResizable,\n  ],\n})\nexport class MatColumnResizeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './column-resize-directives/column-resize';\nexport * from './column-resize-directives/column-resize-flex';\nexport * from './column-resize-directives/default-enabled-column-resize';\nexport * from './column-resize-directives/default-enabled-column-resize-flex';\nexport * from './column-resize-module';\nexport * from './resizable-directives/default-enabled-resizable';\nexport * from './resizable-directives/resizable';\nexport * from './resize-strategy';\nexport * from './overlay-handle';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {AbstractMatColumnResize as Éµangular_material_src_material_experimental_column_resize_column_resize_e,FLEX_HOST_BINDINGS as Éµangular_material_src_material_experimental_column_resize_column_resize_d,FLEX_PROVIDERS as Éµangular_material_src_material_experimental_column_resize_column_resize_b,TABLE_HOST_BINDINGS as Éµangular_material_src_material_experimental_column_resize_column_resize_c,TABLE_PROVIDERS as Éµangular_material_src_material_experimental_column_resize_column_resize_a} from './column-resize-directives/common';\nexport {AbstractMatResizable as Éµangular_material_src_material_experimental_column_resize_column_resize_f,RESIZABLE_HOST_BINDINGS as Éµangular_material_src_material_experimental_column_resize_column_resize_g,RESIZABLE_INPUTS as Éµangular_material_src_material_experimental_column_resize_column_resize_h} from './resizable-directives/common';"],"names":[],"mappings":"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"}