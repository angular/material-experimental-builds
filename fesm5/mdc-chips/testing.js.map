{"version":3,"file":"mdc-chips__testing.js","sources":["../../../../../../../src/material-experimental/mdc-chips/testing/chip-input-harness.ts","../../../../../../../src/material-experimental/mdc-chips/testing/chip-harness.ts","../../../../../../../src/material-experimental/mdc-chips/testing/chip-row-harness.ts","../../../../../../../src/material-experimental/mdc-chips/testing/chip-grid-harness.ts","../../../../../../../src/material-experimental/mdc-chips/testing/chip-option-harness.ts","../../../../../../../src/material-experimental/mdc-chips/testing/chip-listbox-harness.ts","../../../../../../../src/material-experimental/mdc-chips/testing/chip-set-harness.ts","../../../../../../../src/material-experimental/mdc-chips/testing/public-api.ts","../../../../../../../src/material-experimental/mdc-chips/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {ChipInputHarnessFilters} from './chip-harness-filters';\n\n/** Harness for interacting with a grid's chip input in tests. */\nexport class MatChipInputHarness extends ComponentHarness {\n  static hostSelector = '.mat-mdc-chip-input';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a chip input with specific attributes.\n   */\n  static with(options: ChipInputHarnessFilters = {}): HarnessPredicate<MatChipInputHarness> {\n    return new HarnessPredicate(MatChipInputHarness, options);\n  }\n\n  /** Gets a promise for the disabled state. */\n  async isDisabled(): Promise<boolean> {\n    return await ((await this.host()).getAttribute('disabled')) === 'true';\n  }\n\n  /** Gets a promise for the placeholder text. */\n  async getPlaceholder(): Promise<string|null> {\n    return (await this.host()).getAttribute('placeholder');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {ChipHarnessFilters} from './chip-harness-filters';\n\n/** Harness for interacting with a mat-chip in tests. */\nexport class MatChipHarness extends ComponentHarness {\n  static hostSelector = 'mat-basic-chip, mat-chip';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a chip with specific attributes.\n   */\n  // Note(mmalerba): generics are used as a workaround for lack of polymorphic `this` in static\n  // methods. See https://github.com/microsoft/TypeScript/issues/5863\n  static with<T extends typeof MatChipHarness>(this: T, options: ChipHarnessFilters = {}):\n      HarnessPredicate<InstanceType<T>> {\n    return new HarnessPredicate(MatChipHarness, options) as\n        unknown as HarnessPredicate<InstanceType<T>>;\n  }\n\n  /** Gets a promise for the text content the option. */\n  async getText(): Promise<string> {\n    return (await this.host()).text();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {ChipRowHarnessFilters} from './chip-harness-filters';\nimport {MatChipHarness} from './chip-harness';\n\n/** Harness for interacting with a mat-chip-row in tests. */\nexport class MatChipRowHarness extends MatChipHarness {\n  static hostSelector = 'mat-chip-row, mat-basic-chip-row';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a chip row with specific attributes.\n   */\n  // Note(mmalerba): generics are used as a workaround for lack of polymorphic `this` in static\n  // methods. See https://github.com/microsoft/TypeScript/issues/5863\n  static with<T extends typeof MatChipHarness>(\n      this: T, options: ChipRowHarnessFilters = {}): HarnessPredicate<InstanceType<T>> {\n    return new HarnessPredicate(MatChipRowHarness, options) as\n        unknown as HarnessPredicate<InstanceType<T>>;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {ChipGridHarnessFilters} from './chip-harness-filters';\nimport {MatChipInputHarness} from './chip-input-harness';\nimport {MatChipRowHarness} from './chip-row-harness';\n\n/** Harness for interacting with a mat-chip-grid in tests. */\nexport class MatChipGridHarness extends ComponentHarness {\n  static hostSelector = 'mat-chip-grid';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a chip grid with specific attributes.\n   */\n  static with(options: ChipGridHarnessFilters = {}): HarnessPredicate<MatChipGridHarness> {\n    return new HarnessPredicate(MatChipGridHarness, options);\n  }\n\n  private _rows = this.locatorForAll(MatChipRowHarness);\n  private _input = this.locatorFor(MatChipInputHarness);\n\n  /** Gets promise of the harnesses for the chip rows. */\n  async getRows(): Promise<MatChipRowHarness[]> {\n    return await this._rows();\n  }\n\n  /** Gets promise of the chip text input harness. */\n  async getTextInput(): Promise<MatChipInputHarness|null> {\n    return await this._input();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {MatChipHarness} from './chip-harness';\nimport {ChipOptionHarnessFilters} from './chip-harness-filters';\n\n/** Harness for interacting with a mat-chip-option in tests. */\nexport class MatChipOptionHarness extends MatChipHarness {\n  static hostSelector = 'mat-basic-chip-option, mat-chip-option';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a chip option with specific\n   * attributes.\n   */\n  // Note(mmalerba): generics are used as a workaround for lack of polymorphic `this` in static\n  // methods. See https://github.com/microsoft/TypeScript/issues/5863\n  static with<T extends typeof MatChipHarness>(\n      this: T, options: ChipOptionHarnessFilters = {}): HarnessPredicate<InstanceType<T>> {\n    return new HarnessPredicate(MatChipOptionHarness, options) as\n        unknown as HarnessPredicate<InstanceType<T>>;\n  }\n\n  /** Gets a promise for the selected state. */\n  async isSelected(): Promise<boolean> {\n    return await ((await this.host()).getAttribute('aria-selected')) === 'true';\n  }\n\n  /** Gets a promise for the disabled state. */\n  async isDisabled(): Promise<boolean> {\n    return await ((await this.host()).getAttribute('aria-disabled')) === 'true';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {ChipListboxHarnessFilters} from './chip-harness-filters';\nimport {MatChipOptionHarness} from './chip-option-harness';\n\n/** Harness for interacting with a mat-chip-listbox in tests. */\nexport class MatChipListboxHarness extends ComponentHarness {\n  static hostSelector = 'mat-chip-listbox';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a chip listbox with specific\n   * attributes.\n   */\n  static with(options: ChipListboxHarnessFilters = {}): HarnessPredicate<MatChipListboxHarness> {\n    return new HarnessPredicate(MatChipListboxHarness, options);\n  }\n\n  private _options = this.locatorForAll(MatChipOptionHarness);\n\n  /** Gets promise of the harnesses for the chip options in the listbox. */\n  async getOptions(): Promise<MatChipOptionHarness[]> {\n    return await this._options();\n  }\n\n  /** Gets promise of the selected options. */\n  async getSelected(): Promise<MatChipOptionHarness[]> {\n    const options = await this._options();\n    return Promise.all(options.map(o => o.isSelected())).then(isSelectedStates => {\n      const selectedOptions: MatChipOptionHarness[] = [];\n      isSelectedStates.forEach((isSelectedOption, index) => {\n        if (isSelectedOption) {\n          selectedOptions.push(options[index]);\n        }\n      });\n      return selectedOptions;\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {MatChipHarness} from './chip-harness';\nimport {ChipSetHarnessFilters} from './chip-harness-filters';\n\n/** Harness for interacting with a mat-chip-set in tests. */\nexport class MatChipSetHarness extends ComponentHarness {\n  static hostSelector = 'mat-chip-set';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a chip set with specific attributes.\n   */\n  static with(options: ChipSetHarnessFilters = {}): HarnessPredicate<MatChipSetHarness> {\n    return new HarnessPredicate(MatChipSetHarness, options);\n  }\n\n  private _chips = this.locatorForAll(MatChipHarness);\n\n  /** Gets promise of the harnesses for the chips. */\n  async getChips(): Promise<MatChipHarness[]> {\n    return await this._chips();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './chip-grid-harness';\nexport * from './chip-harness';\nexport * from './chip-harness-filters';\nexport * from './chip-input-harness';\nexport * from './chip-listbox-harness';\nexport * from './chip-option-harness';\nexport * from './chip-row-harness';\nexport * from './chip-set-harness';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}