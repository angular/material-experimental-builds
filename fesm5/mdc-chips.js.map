{"version":3,"file":"mdc-chips.js","sources":["../../../../../../src/material-experimental/mdc-chips/chip-icons.ts","../../../../../../src/material-experimental/mdc-chips/chip.ts","../../../../../../src/material-experimental/mdc-chips/chip-option.ts","../../../../../../src/material-experimental/mdc-chips/grid-key-manager.ts","../../../../../../src/material-experimental/mdc-chips/chip-row.ts","../../../../../../src/material-experimental/mdc-chips/chip-set.ts","../../../../../../src/material-experimental/mdc-chips/chip-listbox.ts","../../../../../../src/material-experimental/mdc-chips/grid-focus-key-manager.ts","../../../../../../src/material-experimental/mdc-chips/chip-grid.ts","../../../../../../src/material-experimental/mdc-chips/chip-default-options.ts","../../../../../../src/material-experimental/mdc-chips/chip-input.ts","../../../../../../src/material-experimental/mdc-chips/module.ts","../../../../../../src/material-experimental/mdc-chips/public-api.ts","../../../../../../src/material-experimental/mdc-chips/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {ChangeDetectorRef, Directive, ElementRef, OnDestroy} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MDCChipTrailingActionAdapter, MDCChipTrailingActionFoundation} from '@material/chips';\nimport {Subject} from 'rxjs';\n\n\n/**\n * Directive to add CSS classes to chip leading icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {\n    'class': 'mat-mdc-chip-avatar mdc-chip__icon mdc-chip__icon--leading',\n    'role': 'img'\n  }\n})\nexport class MatChipAvatar {\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>) {}\n\n  /** Sets whether the given CSS class should be applied to the leading icon. */\n  setClass(cssClass: string, active: boolean) {\n    this._elementRef.nativeElement.classList.toggle(cssClass, active);\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Directive to add CSS classes to and configure attributes for chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {\n    'class':\n        'mat-mdc-chip-trailing-icon mdc-chip__icon mdc-chip__icon--trailing',\n    'tabindex': '-1',\n    'aria-hidden': 'true',\n  }\n})\nexport class MatChipTrailingIcon implements OnDestroy {\n  private _foundation: MDCChipTrailingActionFoundation;\n  private _adapter: MDCChipTrailingActionAdapter = {\n    focus: () => this._elementRef.nativeElement.focus(),\n    getAttribute: (name: string) =>\n        this._elementRef.nativeElement.getAttribute(name),\n    setAttribute:\n        (name: string, value: string) => {\n          this._elementRef.nativeElement.setAttribute(name, value);\n        },\n    // TODO(crisbeto): there's also a `trigger` parameter that the chip isn't\n    // handling yet. Consider passing it along once MDC start using it.\n    notifyInteraction:\n        () => {\n          // TODO(crisbeto): uncomment this code once we've inverted the\n          // dependency on `MatChip`. this._chip._notifyInteraction();\n        },\n\n    // TODO(crisbeto): there's also a `key` parameter that the chip isn't\n    // handling yet. Consider passing it along once MDC start using it.\n    notifyNavigation:\n        () => {\n          // TODO(crisbeto): uncomment this code once we've inverted the\n          // dependency on `MatChip`. this._chip._notifyNavigation();\n        }\n  };\n\n  constructor(\n      public _elementRef: ElementRef,\n      // TODO(crisbeto): currently the chip needs a reference to the trailing\n      // icon for the deprecated `setTrailingActionAttr` method. Until the\n      // method is removed, we can't use the chip here, because it causes a\n      // circular import. private _chip: MatChip\n  ) {\n    this._foundation = new MDCChipTrailingActionFoundation(this._adapter);\n  }\n\n  ngOnDestroy() {\n    this._foundation.destroy();\n  }\n\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Sets an attribute on the icon. */\n  setAttribute(name: string, value: string) {\n    this._elementRef.nativeElement.setAttribute(name, value);\n  }\n\n  isNavigable() {\n    return this._foundation.isNavigable();\n  }\n}\n\n/**\n * Boilerplate for applying mixins to MatChipRemove.\n * @docs-private\n */\nclass MatChipRemoveBase extends MatChipTrailingIcon {\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n}\n\nconst _MatChipRemoveMixinBase:\n  CanDisableCtor &\n  HasTabIndexCtor &\n  typeof MatChipRemoveBase =\n    mixinTabIndex(mixinDisabled(MatChipRemoveBase), 0);\n\n/**\n * Directive to remove the parent chip when the trailing icon is clicked or\n * when the ENTER key is pressed on it.\n *\n * Recommended for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n * ```\n * <mat-chip>\n *   <mat-icon matChipRemove>cancel</mat-icon>\n * </mat-chip>\n * ```\n */\n@Directive({\n  selector: '[matChipRemove]',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    'class': `mat-mdc-chip-remove mat-mdc-chip-trailing-icon mat-mdc-focus-indicator\n        mdc-chip__icon mdc-chip__icon--trailing`,\n    '[tabIndex]': 'tabIndex',\n    'role': 'button',\n    '(click)': 'interaction.next($event)',\n    '(keydown)': 'interaction.next($event)',\n\n    // We need to remove this explicitly, because it gets inherited from MatChipTrailingIcon.\n    '[attr.aria-hidden]': 'null',\n  }\n})\nexport class MatChipRemove extends _MatChipRemoveMixinBase implements CanDisable, HasTabIndex {\n  /**\n   * Emits when the user interacts with the icon.\n   * @docs-private\n   */\n  interaction: Subject<MouseEvent | KeyboardEvent> = new Subject<MouseEvent | KeyboardEvent>();\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n\n    if (elementRef.nativeElement.nodeName === 'BUTTON') {\n      elementRef.nativeElement.setAttribute('type', 'button');\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleAnimationConfig,\n} from '@angular/material/core';\nimport {MDCChipAdapter, MDCChipFoundation} from '@material/chips';\nimport {numbers} from '@material/ripple';\nimport {SPACE, ENTER, hasModifierKey} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatChipAvatar, MatChipTrailingIcon, MatChipRemove} from './chip-icons';\n\n\nlet uid = 0;\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Configuration for the ripple animation. */\nconst RIPPLE_ANIMATION_CONFIG: RippleAnimationConfig = {\n  enterDuration: numbers.DEACTIVATION_TIMEOUT_MS,\n  exitDuration: numbers.FG_DEACTIVATION_MS\n};\n\n/**\n * Directive to add MDC CSS to non-basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-chip, mat-chip-option, mat-chip-row, [mat-chip], [mat-chip-option],\n    [mat-chip-row]`,\n  host: {'class': 'mat-mdc-chip mdc-chip'}\n})\nexport class MatChipCssInternalOnly { }\n\n/**\n * Boilerplate for applying mixins to MatChip.\n * @docs-private\n */\nclass MatChipBase {\n  disabled!: boolean;\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase:\n  CanColorCtor &\n  CanDisableRippleCtor &\n  HasTabIndexCtor &\n  typeof MatChipBase =\n    mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n\n/**\n * Material design styled Chip base component. Used inside the MatChipSet component.\n *\n * Extended by MatChipOption and MatChipRow for different interaction patterns.\n */\n@Component({\n  selector: 'mat-basic-chip, mat-chip',\n  inputs: ['color', 'disableRipple'],\n  exportAs: 'matChip',\n  templateUrl: 'chip.html',\n  styleUrls: ['chips.css'],\n  host: {\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-mdc-basic-chip]': '_isBasicChip',\n    '[class.mat-mdc-standard-chip]': '!_isBasicChip',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChip extends _MatChipMixinBase implements AfterContentInit, AfterViewInit,\n  CanColor, CanDisableRipple, HasTabIndex, OnDestroy {\n  /** The ripple animation configuration to use for the chip. */\n  readonly _rippleAnimation: RippleAnimationConfig = RIPPLE_ANIMATION_CONFIG;\n\n  /** Whether the ripple is centered on the chip. */\n  readonly _isRippleCentered = false;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blurred. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  readonly HANDLED_KEYS: number[] = [];\n\n  /** Whether this chip is a basic (unstyled) chip. */\n  readonly _isBasicChip: boolean;\n\n  /** Whether the chip has focus. */\n  protected _hasFocusInternal = false;\n\n    /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(mmalerba): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('transitionend', ['$event'])\n  _handleTransitionEnd(event: TransitionEvent) {\n    this._chipFoundation.handleTransitionEnd(event);\n  }\n\n  get _hasFocus() {\n    return this._hasFocusInternal;\n  }\n\n  /** Default unique id for the chip. */\n  private _uniqueId = `mat-mdc-chip-${uid++}`;\n\n  /** A unique id for the chip. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    if (this.removeIcon) {\n      this.removeIcon.disabled = value;\n    }\n  }\n  protected _disabled: boolean = false;\n\n  private _textElement!: HTMLElement;\n\n  /** The value of the chip. Defaults to the content inside the mdc-chip__text element. */\n  @Input()\n  get value(): any {\n    return this._value !== undefined\n      ? this._value\n      : this._textElement.textContent!.trim();\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /**\n   * Colors the chip for emphasis as if it were selected.\n   */\n  @Input()\n  get highlighted(): boolean { return this._highlighted; }\n  set highlighted(value: boolean) {\n    this._highlighted = coerceBooleanProperty(value);\n  }\n  protected _highlighted: boolean = false;\n\n  /** Emitted when the user interacts with the remove icon. */\n  @Output() removeIconInteraction = new EventEmitter<string>();\n\n  /** Emitted when the user interacts with the chip. */\n  @Output() interaction = new EventEmitter<string>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The MDC foundation containing business logic for MDC chip. */\n  _chipFoundation: MDCChipFoundation;\n\n  /** The unstyled chip selector for this component. */\n  protected basicChipAttrName = 'mat-basic-chip';\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /** The chip's leading icon. */\n  @ContentChild(MatChipAvatar) leadingIcon: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's trailing remove icon. */\n  @ContentChild(MatChipRemove) removeIcon: MatChipRemove;\n\n  /** Reference to the MatRipple instance of the chip. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n /**\n  * Implementation of the MDC chip adapter interface.\n  * These methods are called by the chip foundation.\n  */\n  protected _chipAdapter: MDCChipAdapter = {\n    addClass: (className) => this._setMdcClass(className, true),\n    removeClass: (className) => this._setMdcClass(className, false),\n    hasClass: (className) =>\n        this._elementRef.nativeElement.classList.contains(className),\n    addClassToLeadingIcon: (className) =>\n        this.leadingIcon.setClass(className, true),\n    removeClassFromLeadingIcon: (className) =>\n        this.leadingIcon.setClass(className, false),\n    eventTargetHasClass:\n        (target: EventTarget|null, className: string) => {\n          // We need to null check the `classList`, because IE and Edge don't\n          // support it on SVG elements and Edge seems to throw for ripple\n          // elements, because they're outside the DOM.\n          return (target && (target as Element).classList) ?\n              (target as Element).classList.contains(className) :\n              false;\n        },\n    notifyInteraction: () => this._notifyInteraction(),\n    notifySelection:\n        () => {\n          // No-op. We call dispatchSelectionEvent ourselves in MatChipOption,\n          // because we want to specify whether selection occurred via user\n          // input.\n        },\n    notifyNavigation: () => this._notifyNavigation(),\n    notifyTrailingIconInteraction: () =>\n        this.removeIconInteraction.emit(this.id),\n    notifyRemoval:\n        () => {\n          this.removed.emit({chip: this});\n\n          // When MDC removes a chip it just transitions it to `width: 0px`\n          // which means that it's still in the DOM and it's still focusable.\n          // Make it `display: none` so users can't tab into it.\n          this._elementRef.nativeElement.style.display = 'none';\n        },\n    getComputedStyleValue:\n        propertyName => {\n          // This function is run when a chip is removed so it might be\n          // invoked during server-side rendering. Add some extra checks just in\n          // case.\n          if (typeof window !== 'undefined' && window) {\n            const getComputedStyle =\n                window.getComputedStyle(this._elementRef.nativeElement);\n            return getComputedStyle.getPropertyValue(propertyName);\n          }\n          return '';\n        },\n    setStyleProperty:\n        (propertyName: string, value: string) => {\n          this._elementRef.nativeElement.style.setProperty(propertyName, value);\n        },\n    hasLeadingIcon: () => !!this.leadingIcon,\n    isTrailingActionNavigable:\n        () => {\n          if (this.trailingIcon) {\n            return this.trailingIcon.isNavigable();\n          }\n          return false;\n        },\n    isRTL: () => !!this._dir && this._dir.value === 'rtl',\n    focusPrimaryAction:\n        () => {\n          // Angular Material MDC chips fully manage focus. TODO: Managing focus\n          // and handling keyboard events was added by MDC after our\n          // implementation; consider consolidating.\n        },\n    focusTrailingAction: () => {},\n    removeTrailingActionFocus: () => {},\n    setPrimaryActionAttr:\n        (name: string, value: string) => {\n          // MDC is currently using this method to set aria-checked on choice\n          // and filter chips, which in the MDC templates have role=\"checkbox\"\n          // and role=\"radio\" respectively. We have role=\"option\" on those chips\n          // instead, so we do not want aria-checked. Since we also manage the\n          // tabindex ourselves, we don't allow MDC to set it.\n          if (name === 'aria-checked' || name === 'tabindex') {\n            return;\n          }\n          this._elementRef.nativeElement.setAttribute(name, value);\n        },\n    // The 2 functions below are used by the MDC ripple, which we aren't using,\n    // so they will never be called\n    getRootBoundingClientRect: () =>\n        this._elementRef.nativeElement.getBoundingClientRect(),\n    getCheckmarkBoundingClientRect: () => null,\n    getAttribute: (attr) => this._elementRef.nativeElement.getAttribute(attr),\n  };\n\n  constructor(\n      public _changeDetectorRef: ChangeDetectorRef,\n      readonly _elementRef: ElementRef, protected _ngZone: NgZone,\n      @Optional() private _dir: Directionality,\n      // @breaking-change 8.0.0 `animationMode` parameter to become required.\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(_elementRef);\n    this._chipFoundation = new MDCChipFoundation(this._chipAdapter);\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n    this._isBasicChip = _elementRef.nativeElement.hasAttribute(this.basicChipAttrName) ||\n                        _elementRef.nativeElement.tagName.toLowerCase() === this.basicChipAttrName;\n  }\n\n  ngAfterContentInit() {\n    this._initRemoveIcon();\n  }\n\n  ngAfterViewInit() {\n    this._chipFoundation.init();\n    this._textElement = this._elementRef.nativeElement.querySelector('.mdc-chip__text');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._chipFoundation.destroy();\n  }\n\n  /** Sets up the remove icon chip foundation, and subscribes to remove icon events. */\n  _initRemoveIcon() {\n    if (this.removeIcon) {\n      this._chipFoundation.setShouldRemoveOnTrailingIconClick(true);\n      this._listenToRemoveIconInteraction();\n      this.removeIcon.disabled = this.disabled;\n    }\n  }\n\n  /** Handles interaction with the remove icon. */\n  _listenToRemoveIconInteraction() {\n    this.removeIcon.interaction\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(event => {\n          // The MDC chip foundation calls stopPropagation() for any trailing icon interaction\n          // event, even ones it doesn't handle, so we want to avoid passing it keyboard events\n          // for which we have a custom handler. Note that we assert the type of the event using\n          // the `type`, because `instanceof KeyboardEvent` can throw during server-side rendering.\n          const isKeyboardEvent = event.type.startsWith('key');\n\n          if (this.disabled || (isKeyboardEvent &&\n              this.HANDLED_KEYS.indexOf((event as KeyboardEvent).keyCode) !== -1)) {\n            return;\n          }\n\n          this._chipFoundation.handleTrailingActionInteraction();\n\n          if (isKeyboardEvent && !hasModifierKey(event as KeyboardEvent)) {\n            const keyCode = (event as KeyboardEvent).keyCode;\n\n            // Prevent default space and enter presses so we don't scroll the page or submit forms.\n            if (keyCode === SPACE || keyCode === ENTER) {\n              event.preventDefault();\n            }\n          }\n        });\n  }\n\n  /**\n   * Allows for programmatic removal of the chip.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this._chipFoundation.beginExit();\n    }\n  }\n\n  /** Sets whether the given CSS class should be applied to the MDC chip. */\n  private _setMdcClass(cssClass: string, active: boolean) {\n      const classes = this._elementRef.nativeElement.classList;\n      active ? classes.add(cssClass) : classes.remove(cssClass);\n      this._changeDetectorRef.markForCheck();\n  }\n\n  /** Forwards interaction events to the MDC chip foundation. */\n  _handleInteraction(event: MouseEvent | KeyboardEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    if (event.type === 'click') {\n      this._chipFoundation.handleClick();\n      return;\n    }\n\n    if (event.type === 'keydown') {\n      this._chipFoundation.handleKeydown(event as KeyboardEvent);\n      return;\n    }\n  }\n\n  /** Whether or not the ripple should be disabled. */\n  _isRippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._animationsDisabled || this._isBasicChip;\n  }\n\n  _notifyInteraction() {\n    this.interaction.emit(this.id);\n  }\n\n  _notifyNavigation() {\n    // TODO: This is a new feature added by MDC. Consider exposing it to users\n    // in the future.\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_removable: BooleanInput;\n  static ngAcceptInputType_highlighted: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  AfterContentInit\n} from '@angular/core';\nimport {chipCssClasses} from '@material/chips';\nimport {take} from 'rxjs/operators';\nimport {MatChip} from './chip';\n\n\n/** Event object emitted by MatChipOption when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChipOption,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n/**\n * An extension of the MatChip component that supports chip selection.\n * Used with MatChipListbox.\n */\n@Component({\n  selector: 'mat-basic-chip-option, mat-chip-option',\n  templateUrl: 'chip-option.html',\n  styleUrls: ['chips.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'option',\n    'class': 'mat-mdc-focus-indicator',\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-mdc-chip-selected]': 'selected',\n    '[id]': 'id',\n    '[tabIndex]': 'tabIndex',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_click($event)',\n    '(keydown)': '_keydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n  providers: [{provide: MatChip, useExisting: MatChipOption}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipOption extends MatChip implements AfterContentInit {\n\n  /** Whether the chip list is selectable. */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /**\n   * Whether or not the chip is selectable.\n   *\n   * When a chip is not selectable, changes to its selected state are always\n   * ignored. By default an option chip is selectable, and it becomes\n   * non-selectable if its parent chip list is not selectable.\n   */\n  @Input()\n  get selectable(): boolean {\n    return this._selectable && this.chipListSelectable;\n  }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean {\n    return this._chipFoundation.isSelected();\n  }\n  set selected(value: boolean) {\n    if (!this.selectable) {\n      return;\n    }\n    const coercedValue = coerceBooleanProperty(value);\n    if (coercedValue != this._chipFoundation.isSelected()) {\n      this._chipFoundation.setSelected(coerceBooleanProperty(value));\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  /** The unstyled chip selector for this component. */\n  protected basicChipAttrName = 'mat-basic-chip-option';\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n\n    if (this.selected && this.leadingIcon) {\n      this.leadingIcon.setClass(chipCssClasses.HIDDEN_LEADING_ICON, true);\n    }\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this.selectable) {\n      return;\n    } else if (!this.selected) {\n      this._chipFoundation.setSelected(true);\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (!this.selectable) {\n      return;\n    } else if (this.selected) {\n      this._chipFoundation.setSelected(false);\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Selects this chip and emits userInputSelection event */\n  selectViaInteraction(): void {\n    if (!this.selectable) {\n      return;\n    } else if (!this.selected) {\n      this._chipFoundation.setSelected(true);\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    if (!this.selectable) {\n      return this.selected;\n    }\n\n    this._chipFoundation.setSelected(!this.selected);\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Emits a selection change event. */\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this.selected\n    });\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocusInternal = true;\n  }\n\n  /** Resets the state of the chip when it loses focus. */\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocusInternal = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n\n  /** Handles click events on the chip. */\n  _click(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      this._handleInteraction(event);\n      event.stopPropagation();\n    }\n  }\n\n  /** Handles custom key presses. */\n  _keydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case SPACE:\n        this.toggleSelected(true);\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      default:\n        this._handleInteraction(event);\n    }\n  }\n\n  static ngAcceptInputType_selectable: BooleanInput;\n  static ngAcceptInputType_selected: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {\n  UP_ARROW,\n  DOWN_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\n\n\n/** The keys handled by the GridKeyManager keydown method. */\nexport const NAVIGATION_KEYS = [DOWN_ARROW, UP_ARROW, RIGHT_ARROW, LEFT_ARROW];\n\n/** This interface is for rows that can be passed to a GridKeyManager. */\nexport interface GridKeyManagerRow<T> {\n  cells: T[];\n}\n\n/**\n * This class manages keyboard events for grids. If you pass it a query list\n * of GridKeyManagerRow, it will set the active cell correctly when arrow events occur.\n *\n * GridKeyManager expects that rows may change dynamically, but the cells for a given row are\n * static. It also expects that all rows have the same number of cells.\n */\nexport class GridKeyManager<T> {\n  private _activeRowIndex = -1;\n  private _activeColumnIndex = -1;\n  private _activeRow: GridKeyManagerRow<T> | null = null;\n  private _activeCell: T | null = null;\n  private _dir: 'ltr' | 'rtl' = 'ltr';\n\n  constructor(private _rows: QueryList<GridKeyManagerRow<T>> | GridKeyManagerRow<T>[]) {\n    // We allow for the rows to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the rows they want to manage (e.g. when the\n    // rows aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_rows instanceof QueryList) {\n      _rows.changes.subscribe((newRows: QueryList<GridKeyManagerRow<T>>) => {\n        if (this._activeRow) {\n          const newIndex = newRows.toArray().indexOf(this._activeRow);\n\n          if (newIndex > -1 && newIndex !== this._activeRowIndex) {\n            this._activeRowIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n\n  /** Stream that emits whenever the active cell of the grid manager changes. */\n  change = new Subject<{row: number, column: number}>();\n\n  /**\n   * Configures the directionality of the key manager's horizontal movement.\n   * @param direction Direction which is considered forward movement across a row.\n   *\n   * If withDirectionality is not set, the default is 'ltr'.\n   */\n  withDirectionality(direction: 'ltr' | 'rtl'): this {\n    this._dir = direction;\n    return this;\n  }\n\n  /**\n   * Sets the active cell to the cell at the indices specified.\n   * @param cell The row and column containing the cell to be set as active.\n   */\n  setActiveCell(cell: {row: number, column: number}): void;\n\n  /**\n   * Sets the active cell to the cell.\n   * @param cell The cell to be set as active.\n   */\n  setActiveCell(cell: T): void;\n\n  setActiveCell(cell: any): void {\n    const previousRowIndex = this._activeRowIndex;\n    const previousColumnIndex = this._activeColumnIndex;\n\n    this.updateActiveCell(cell);\n\n    if (this._activeRowIndex !== previousRowIndex ||\n      this._activeColumnIndex !== previousColumnIndex) {\n      this.change.next({row: this._activeRowIndex, column: this._activeColumnIndex});\n    }\n  }\n\n  /**\n   * Sets the active cell depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case DOWN_ARROW:\n        this.setNextRowActive();\n        break;\n\n      case UP_ARROW:\n        this.setPreviousRowActive();\n        break;\n\n      case RIGHT_ARROW:\n        this._dir === 'rtl' ? this.setPreviousColumnActive() : this.setNextColumnActive();\n        break;\n\n      case LEFT_ARROW:\n        this._dir === 'rtl' ? this.setNextColumnActive() : this.setPreviousColumnActive();\n        break;\n\n      default:\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    event.preventDefault();\n  }\n\n  /** Index of the currently active row. */\n  get activeRowIndex(): number {\n    return this._activeRowIndex;\n  }\n\n  /** Index of the currently active column. */\n  get activeColumnIndex(): number {\n    return this._activeColumnIndex;\n  }\n\n  /** The active cell. */\n  get activeCell(): T | null {\n    return this._activeCell;\n  }\n\n  /** Sets the active cell to the first cell in the grid. */\n  setFirstCellActive(): void {\n    this._setActiveCellByIndex(0, 0);\n  }\n\n  /** Sets the active cell to the last cell in the grid. */\n  setLastCellActive(): void {\n    const lastRowIndex = this._rows.length - 1;\n    const lastRow = this._getRowsArray()[lastRowIndex];\n    this._setActiveCellByIndex(lastRowIndex, lastRow.cells.length - 1);\n  }\n\n  /** Sets the active row to the next row in the grid. Active column is unchanged. */\n  setNextRowActive(): void {\n    this._activeRowIndex < 0 ? this.setFirstCellActive() : this._setActiveCellByDelta(1, 0);\n  }\n\n  /** Sets the active row to the previous row in the grid. Active column is unchanged. */\n  setPreviousRowActive(): void {\n    this._setActiveCellByDelta(-1, 0);\n  }\n\n  /**\n   * Sets the active column to the next column in the grid.\n   * Active row is unchanged, unless we reach the end of a row.\n   */\n  setNextColumnActive(): void {\n    this._activeRowIndex < 0 ? this.setFirstCellActive() : this._setActiveCellByDelta(0, 1);\n  }\n\n  /**\n   * Sets the active column to the previous column in the grid.\n   * Active row is unchanged, unless we reach the end of a row.\n   */\n  setPreviousColumnActive(): void {\n    this._setActiveCellByDelta(0, -1);\n  }\n\n  /**\n   * Allows setting the active cell without any other effects.\n   * @param cell Row and column of the cell to be set as active.\n   */\n  updateActiveCell(cell: {row: number, column: number}): void;\n\n  /**\n   * Allows setting the active cell without any other effects.\n   * @param cell Cell to be set as active.\n   */\n  updateActiveCell(cell: T): void;\n\n  updateActiveCell(cell: any): void {\n    const rowArray = this._getRowsArray();\n\n    if (typeof cell === 'object' && typeof cell.row === 'number' &&\n      typeof cell.column === 'number') {\n      this._activeRowIndex = cell.row;\n      this._activeColumnIndex = cell.column;\n      this._activeRow = rowArray[cell.row] || null;\n      this._activeCell = this._activeRow ? this._activeRow.cells[cell.column] || null : null;\n    } else {\n      rowArray.forEach((row, rowIndex) => {\n        const columnIndex = row.cells.indexOf(cell);\n        if (columnIndex !== -1) {\n          this._activeRowIndex = rowIndex;\n          this._activeColumnIndex = columnIndex;\n          this._activeRow = row;\n          this._activeCell = row.cells[columnIndex];\n        }\n      });\n    }\n  }\n\n  /**\n   * This method sets the active cell, given the row and columns deltas\n   * between the currently active cell and the new active cell.\n   */\n  private _setActiveCellByDelta(rowDelta: -1 | 0 | 1, columnDelta: -1 | 0 | 1): void {\n    // If delta puts us past the last cell in a row, move to the first cell of the next row.\n    if (this._activeRow && this._activeColumnIndex + columnDelta >= this._activeRow.cells.length) {\n      this._setActiveCellByIndex(this._activeRowIndex + 1, 0);\n\n    // If delta puts us prior to the first cell in a row, move to the last cell of the previous row.\n    } else if (this._activeColumnIndex + columnDelta < 0) {\n      const previousRowIndex = this._activeRowIndex - 1;\n      const previousRow = this._getRowsArray()[previousRowIndex];\n      if (previousRow) {\n        this._setActiveCellByIndex(previousRowIndex, previousRow.cells.length - 1);\n      }\n    } else {\n      this._setActiveCellByIndex(this._activeRowIndex + rowDelta,\n        this._activeColumnIndex + columnDelta);\n    }\n  }\n\n  /**\n   * Sets the active cell to the cell at the indices specified, if they are valid.\n   */\n  private _setActiveCellByIndex(rowIndex: number, columnIndex: number): void {\n    const rows = this._getRowsArray();\n\n    const targetRow = rows[rowIndex];\n\n    if (!targetRow || !targetRow.cells[columnIndex]) {\n      return;\n    }\n\n    this.setActiveCell({row: rowIndex, column: columnIndex});\n  }\n\n  /** Returns the rows as an array. */\n  private _getRowsArray(): GridKeyManagerRow<T>[] {\n    return this._rows instanceof QueryList ? this._rows.toArray() : this._rows;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BACKSPACE, DELETE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MatChip} from './chip';\nimport {GridKeyManagerRow, NAVIGATION_KEYS} from './grid-key-manager';\n\n\n/**\n * An extension of the MatChip component used with MatChipGrid and\n * the matChipInputFor directive.\n */\n@Component({\n  selector: 'mat-chip-row, mat-basic-chip-row',\n  templateUrl: 'chip-row.html',\n  styleUrls: ['chips.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'row',\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[tabIndex]': 'tabIndex',\n    '(mousedown)': '_mousedown($event)',\n    '(keydown)': '_keydown($event)',\n    '(focusin)': '_focusin()',\n    '(focusout)': '_focusout()'\n  },\n  providers: [{provide: MatChip, useExisting: MatChipRow}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipRow extends MatChip implements AfterContentInit, AfterViewInit,\n  GridKeyManagerRow<HTMLElement> {\n  protected basicChipAttrName = 'mat-basic-chip-row';\n\n  /**\n   * The focusable wrapper element in the first gridcell, which contains all\n   * chip content other than the remove icon.\n   */\n  @ViewChild('chipContent') chipContent: ElementRef;\n\n  /** The focusable grid cells for this row. Implemented as part of GridKeyManagerRow. */\n  cells!: HTMLElement[];\n\n  /** Key codes for which this component has a custom handler. */\n  HANDLED_KEYS = NAVIGATION_KEYS.concat([BACKSPACE, DELETE]);\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n\n    if (this.removeIcon) {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      setTimeout(() => {\n        // removeIcon has tabIndex 0 for regular chips, but should only be focusable by\n        // the GridFocusKeyManager for row chips.\n        this.removeIcon.tabIndex = -1;\n      });\n    }\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    this.cells = this.removeIcon ?\n      [this.chipContent.nativeElement, this.removeIcon._elementRef.nativeElement] :\n      [this.chipContent.nativeElement];\n  }\n\n  /**\n   * Allows for programmatic focusing of the chip.\n   * Sends focus to the first grid cell. The row chip element itself\n   * is never focused.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    if (!this._hasFocusInternal) {\n      this._onFocus.next({chip: this});\n    }\n\n    this.chipContent.nativeElement.focus();\n  }\n\n  /**\n   * Emits a blur event when one of the gridcells loses focus, unless focus moved\n   * to the other gridcell.\n   */\n  _focusout() {\n    this._hasFocusInternal = false;\n    // Wait to see if focus moves to the other gridcell\n    setTimeout(() => {\n      if (this._hasFocus) {\n        return;\n      }\n      this._onBlur.next({chip: this});\n    });\n  }\n\n  /** Records that the chip has focus when one of the gridcells is focused. */\n  _focusin() {\n    this._hasFocusInternal = true;\n  }\n\n  /** Sends focus to the first gridcell when the user clicks anywhere inside the chip. */\n  _mousedown(event: MouseEvent) {\n    if (!this.disabled) {\n      this.focus();\n    }\n\n    event.preventDefault();\n  }\n\n  /** Handles custom key presses. */\n  _keydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // Remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      default:\n        this._handleInteraction(event);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {HasTabIndex, HasTabIndexCtor, mixinTabIndex} from '@angular/material/core';\nimport {MDCChipSetAdapter, MDCChipSetFoundation} from '@material/chips';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent} from './chip';\n\n\nlet uid = 0;\n\n\n/**\n * Boilerplate for applying mixins to MatChipSet.\n * @docs-private\n */\nclass MatChipSetBase {\n  disabled!: boolean;\n  constructor(_elementRef: ElementRef) {}\n}\nconst _MatChipSetMixinBase: HasTabIndexCtor & typeof MatChipSetBase =\n    mixinTabIndex(MatChipSetBase);\n\n/**\n * Basic container component for the MatChip component.\n *\n * Extended by MatChipListbox and MatChipGrid for different interaction patterns.\n */\n@Component({\n  selector: 'mat-chip-set',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['chips.css'],\n  host: {\n    'class': 'mat-mdc-chip-set mdc-chip-set',\n    '[attr.role]': 'role',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[id]': '_uid',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipSet extends _MatChipSetMixinBase implements AfterContentInit, AfterViewInit,\n  HasTabIndex, OnDestroy {\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** Subscription to destroyed events in chips. */\n  private _chipDestroyedSubscription: Subscription | null;\n\n  /** Subscription to chip interactions. */\n  private _chipInteractionSubscription: Subscription | null;\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  protected _lastDestroyedChipIndex: number | null = null;\n\n  /** The MDC foundation containing business logic for MDC chip-set. */\n  protected _chipSetFoundation: MDCChipSetFoundation;\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /**\n   * Implementation of the MDC chip-set adapter interface.\n   * These methods are called by the chip set foundation.\n   */\n  protected _chipSetAdapter: MDCChipSetAdapter = {\n    hasClass: (className) => this._hasMdcClass(className),\n    // No-op. We keep track of chips via ContentChildren, which will be updated when a chip is\n    // removed.\n    removeChipAtIndex: () => {},\n    // No-op for base chip set. MatChipListbox overrides the adapter to provide this method.\n    selectChipAtIndex: () => {},\n    getIndexOfChipById: (id: string) => this._chips.toArray().findIndex(chip => chip.id === id),\n    focusChipPrimaryActionAtIndex: () => {},\n    focusChipTrailingActionAtIndex: () => {},\n    removeFocusFromChipAtIndex: () => {},\n    isRTL: () => !!this._dir && this._dir.value === 'rtl',\n    getChipListCount: () => this._chips.length,\n    // TODO(mmalerba): Implement using LiveAnnouncer.\n    announceMessage: () => {},\n  };\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Uid of the chip set */\n  _uid: string = `mat-mdc-chip-set-${uid++}`;\n\n  /**\n   * Map from class to whether the class is enabled.\n   * Enabled classes are set on the MDC chip-set div.\n   */\n  _mdcClasses: {[key: string]: boolean} = {};\n\n  /** Whether the chip set is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Whether the chip list contains chips or not. */\n  get empty(): boolean { return this._chips.length === 0; }\n\n  /** The ARIA role applied to the chip set. */\n  get role(): string | null { return this.empty ? null : 'presentation'; }\n\n  /** Whether any of the chips inside of this chip-set has focus. */\n  get focused(): boolean { return this._hasFocusedChip(); }\n\n  /** Combined stream of all of the child chips' remove events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip.removed));\n  }\n\n  /** Combined stream of all of the child chips' remove events. */\n  get chipDestroyedChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip.destroyed));\n  }\n\n  /** Combined stream of all of the child chips' interaction events. */\n  get chipInteractionChanges(): Observable<string> {\n    return merge(...this._chips.map(chip => chip.interaction));\n  }\n\n  /** The chips that are part of this chip set. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) _chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              @Optional() protected _dir: Directionality) {\n    super(_elementRef);\n    this._chipSetFoundation = new MDCChipSetFoundation(this._chipSetAdapter);\n  }\n\n  ngAfterViewInit() {\n    this._chipSetFoundation.init();\n  }\n\n  ngAfterContentInit() {\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n    });\n  }\n\n  ngOnDestroy() {\n    this._dropSubscriptions();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._chipSetFoundation.destroy();\n  }\n\n  /** Checks whether any of the chips is focused. */\n  protected _hasFocusedChip() {\n    return this._chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the chip-set's state with the individual chips. */\n  protected _syncChipsState() {\n    if (this._chips) {\n      this._chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /** Sets whether the given CSS class should be applied to the MDC chip. */\n  protected _setMdcClass(cssClass: string, active: boolean) {\n      const classes = this._elementRef.nativeElement.classList;\n      active ? classes.add(cssClass) : classes.remove(cssClass);\n      this._changeDetectorRef.markForCheck();\n  }\n\n  /** Adapter method that returns true if the chip set has the given MDC class. */\n  protected _hasMdcClass(className: string) {\n    return this._elementRef.nativeElement.classList.contains(className);\n  }\n\n  /** Updates subscriptions to chip events. */\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._subscribeToChipEvents();\n  }\n\n  /** Subscribes to events on the child chips. */\n  protected _subscribeToChipEvents() {\n    this._listenToChipsRemove();\n    this._listenToChipsDestroyed();\n    this._listenToChipsInteraction();\n  }\n\n  /** Subscribes to chip removal events. */\n  private _listenToChipsRemove() {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event: MatChipEvent) => {\n       this._chipSetFoundation.handleChipRemoval({\n         chipId: event.chip.id,\n         // TODO(mmalerba): Add removal message.\n         removedAnnouncement: null,\n       });\n    });\n  }\n\n  /** Subscribes to chip destroyed events. */\n  private _listenToChipsDestroyed() {\n    this._chipDestroyedSubscription = this.chipDestroyedChanges.subscribe((event: MatChipEvent) => {\n      const chip = event.chip;\n      const chipIndex: number = this._chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Subscribes to chip interaction events. */\n  private _listenToChipsInteraction() {\n    this._chipInteractionSubscription = this.chipInteractionChanges.subscribe((id: string) => {\n      this._chipSetFoundation.handleChipInteraction({chipId: id});\n    });\n  }\n\n  /** Unsubscribes from all chip events. */\n  protected _dropSubscriptions() {\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n\n    if (this._chipInteractionSubscription) {\n      this._chipInteractionSubscription.unsubscribe();\n      this._chipInteractionSubscription = null;\n    }\n\n    if (this._chipDestroyedSubscription) {\n      this._chipDestroyedSubscription.unsubscribe();\n      this._chipDestroyedSubscription = null;\n    }\n  }\n\n  /** Dummy method for subclasses to override. Base chip set cannot be focused. */\n  focus() {}\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  protected _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this._chips.length;\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  protected _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      // Null check the classList, because IE and Edge don't support it on all elements.\n      if (currentElement.classList && currentElement.classList.contains('mdc-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MDCChipSetFoundation} from '@material/chips';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent} from './chip';\nimport {MatChipOption, MatChipSelectionChange} from './chip-option';\nimport {MatChipSet} from './chip-set';\n\n\n/** Change event object that is emitted when the chip listbox value has changed. */\nexport class MatChipListboxChange {\n  constructor(\n    /** Chip listbox that emitted the event. */\n    public source: MatChipListbox,\n    /** Value of the chip listbox when the event was emitted. */\n    public value: any) { }\n}\n\n/**\n * Provider Expression that allows mat-chip-listbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatChipListbox),\n  multi: true\n};\n\n/**\n * An extension of the MatChipSet component that supports chip selection.\n * Used with MatChipOption chips.\n */\n@Component({\n  selector: 'mat-chip-listbox',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['chips.css'],\n  inputs: ['tabIndex'],\n  host: {\n    'class': 'mat-mdc-chip-set mat-mdc-chip-listbox mdc-chip-set',\n    '[attr.role]': 'role',\n    '[tabIndex]': 'empty ? -1 : tabIndex',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'role ? required : null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    '[class.mat-mdc-chip-list-disabled]': 'disabled',\n    '[class.mat-mdc-chip-list-required]': 'required',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipListbox extends MatChipSet implements AfterContentInit, ControlValueAccessor {\n\n  /** Subscription to selection changes in the chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /**\n   * Function when touched. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onTouched = () => {};\n\n  /**\n   * Function when changed. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onChange: (value: any) => void = () => {};\n\n  /** The ARIA role applied to the chip listbox. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._updateMdcSelectionClasses();\n    this._syncListboxProperties();\n  }\n  private _multiple: boolean = false;\n\n  /** The array of selected chips inside the chip listbox. */\n  get selected(): MatChipOption[] | MatChipOption  {\n    const selectedChips = this._chips.toArray().filter(chip => chip.selected);\n    return this.multiple ? selectedChips : selectedChips[0];\n  }\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip listbox is selectable.\n   *\n   * When a chip listbox is not selectable, the selected states for all\n   * the chips inside the chip listbox are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    this._updateMdcSelectionClasses();\n    this._syncListboxProperties();\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    this._initializeSelection();\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n\n  /** Whether this chip listbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n  protected _required: boolean = false;\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this._chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onBlur));\n  }\n\n  /** The value of the listbox, which is the combined value of the selected chips. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /** Event emitted when the selected chip listbox value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListboxChange> =\n      new EventEmitter<MatChipListboxChange>();\n\n  @ContentChildren(MatChipOption, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  _chips: QueryList<MatChipOption>;\n\n  constructor(protected _elementRef: ElementRef,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() _dir: Directionality) {\n    super(_elementRef, _changeDetectorRef, _dir);\n    this._chipSetAdapter.selectChipAtIndex = (index: number, selected: boolean) => {\n      this._setSelected(index, selected);\n    };\n    // Reinitialize the foundation with our overridden adapter\n    this._chipSetFoundation = new MDCChipSetFoundation(this._chipSetAdapter);\n    this._updateMdcSelectionClasses();\n  }\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n    this._initKeyManager();\n\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      // Update listbox selectable/multiple properties on chips\n      this._syncListboxProperties();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  /**\n   * Focuses the first selected chip in this chip listbox, or the first non-disabled chip when there\n   * are no selected chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    const firstSelectedChip = this._getFirstSelectedChip();\n\n    if (firstSelectedChip) {\n      const firstSelectedChipIndex = this._chips.toArray().indexOf(firstSelectedChip);\n      this._keyManager.setActiveItem(firstSelectedChipIndex);\n    } else if (this._chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n    }\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    if (this._chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Selects all chips with value. */\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /** Selects or deselects a chip by id. */\n  _setSelected(index: number, selected: boolean) {\n    const chip = this._chips.toArray()[index];\n    if (chip && chip.selected != selected) {\n      chip.toggleSelected(true);\n    }\n  }\n\n  /** When blurred, marks the field as touched when focus moved outside the chip listbox. */\n  _blur() {\n    if (this.disabled) {\n      return;\n    }\n\n    if (!this.focused) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    // Wait to see if focus moves to an indivdual chip.\n    setTimeout(() => {\n      if (!this.focused) {\n        this._propagateChanges();\n        this._markAsTouched();\n      }\n    });\n  }\n\n  /**\n   * Removes the `tabindex` from the chip listbox and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the listbox from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    const previousTabIndex = this.tabIndex;\n\n    if (this.tabIndex !== -1) {\n      this.tabIndex = -1;\n\n      setTimeout(() => {\n        this.tabIndex = previousTabIndex;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Handles custom keyboard shortcuts, and passes other keyboard events to the keyboard manager.\n   */\n  _keydown(event: KeyboardEvent) {\n    if (this._originatesFromChip(event)) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Marks the field as touched */\n  private _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n  }\n\n /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListboxChange(this, valueToEmit));\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Initializes the chip listbox selection state to reflect any chips that were preselected.\n   */\n  private _initializeSelection() {\n    setTimeout(() => {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      this._chips.forEach(chip => {\n        if (chip.selected) {\n          this._chipSetFoundation.select(chip.id);\n        }\n      });\n    });\n  }\n\n  /**\n   * Deselects every chip in the listbox.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this._chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n    }\n\n    return correspondingChip;\n  }\n\n  /** Syncs the chip-listbox selection state with the individual chips. */\n  private _syncListboxProperties() {\n    if (this._chips) {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        this._chips.forEach(chip => {\n          chip._chipListMultiple = this.multiple;\n          chip.chipListSelectable = this._selectable;\n          chip._changeDetectorRef.markForCheck();\n        });\n      });\n    }\n  }\n\n  /** Sets the mdc classes for single vs multi selection. */\n  private _updateMdcSelectionClasses() {\n    this._setMdcClass('mdc-chip-set--filter', this.selectable && this.multiple);\n    this._setMdcClass('mdc-chip-set--choice', this.selectable && !this.multiple);\n  }\n\n  /** Initializes the key manager to manage focus. */\n  private _initKeyManager() {\n    this._keyManager = new FocusKeyManager<MatChip>(this._chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n  }\n\n  /** Returns the first selected chip in this listbox, or undefined if no chips are selected. */\n  private _getFirstSelectedChip(): MatChipOption | undefined {\n    if (Array.isArray(this.selected)) {\n      return this.selected.length ? this.selected[0] : undefined;\n    } else {\n      return this.selected;\n    }\n  }\n\n  /** Unsubscribes from all chip events. */\n  protected _dropSubscriptions() {\n    super._dropSubscriptions();\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n  }\n\n  /** Subscribes to events on the child chips. */\n  protected _subscribeToChipEvents() {\n    super._subscribeToChipEvents();\n    this._listenToChipsSelection();\n    this._listenToChipsFocus();\n    this._listenToChipsBlur();\n  }\n\n  /** Subscribes to chip focus events. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe((event: MatChipEvent) => {\n      let chipIndex: number = this._chips.toArray().indexOf(event.chip as MatChipOption);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItem(chipIndex);\n      }\n    });\n  }\n\n  /** Subscribes to chip blur events. */\n  private _listenToChipsBlur(): void {\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n    });\n  }\n\n  /** Subscribes to selection changes in the option chips. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(\n      (chipSelectionChange: MatChipSelectionChange) => {\n        this._chipSetFoundation.handleChipSelection({\n          chipId: chipSelectionChange.source.id,\n          selected: chipSelectionChange.selected,\n          shouldIgnore: false\n        });\n        if (chipSelectionChange.isUserInput) {\n          this._propagateChanges();\n        }\n    });\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  private _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-listbox itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this._chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this._chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  static ngAcceptInputType_multiple: BooleanInput;\n  static ngAcceptInputType_selectable: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GridKeyManager} from './grid-key-manager';\n\n/**\n * A version of GridKeyManager where the cells are HTMLElements, and focus()\n * is called on a cell when it becomes active.\n */\nexport class GridFocusKeyManager extends GridKeyManager<HTMLElement> {\n  /**\n   * Sets the active cell to the cell at the specified\n   * indices and focuses the newly active cell.\n   * @param cell Row and column indices of the cell to be set as active.\n   */\n  setActiveCell(cell: {row: number, column: number}): void;\n\n  /**\n   * Sets the active cell to the cell that is specified and focuses it.\n   * @param cell Cell to be set as active.\n   */\n  setActiveCell(cell: HTMLElement): void;\n\n  setActiveCell(cell: any): void {\n    super.setActiveCell(cell);\n\n    if (this.activeCell) {\n      this.activeCell.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, TAB, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {MatChipTextControl} from './chip-text-control';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChipEvent} from './chip';\nimport {MatChipRow} from './chip-row';\nimport {MatChipSet} from './chip-set';\nimport {GridFocusKeyManager} from './grid-focus-key-manager';\n\n\n/** Change event object that is emitted when the chip grid value has changed. */\nexport class MatChipGridChange {\n  constructor(\n    /** Chip grid that emitted the event. */\n    public source: MatChipGrid,\n    /** Value of the chip grid when the event was emitted. */\n    public value: any) { }\n}\n\n/**\n * Boilerplate for applying mixins to MatChipGrid.\n * @docs-private\n */\nclass MatChipGridBase extends MatChipSet {\n  constructor(_elementRef: ElementRef,\n              _changeDetectorRef: ChangeDetectorRef,\n              _dir: Directionality,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {\n    super(_elementRef, _changeDetectorRef, _dir);\n  }\n}\nconst _MatChipGridMixinBase: CanUpdateErrorStateCtor & typeof MatChipGridBase =\n    mixinErrorState(MatChipGridBase);\n\n/**\n * An extension of the MatChipSet component used with MatChipRow chips and\n * the matChipInputFor directive.\n */\n@Component({\n  selector: 'mat-chip-grid',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['chips.css'],\n  inputs: ['tabIndex'],\n  host: {\n    'class': 'mat-mdc-chip-set mat-mdc-chip-grid mdc-chip-set',\n    '[attr.role]': 'role',\n    '[tabIndex]': '_chips && _chips.length === 0 ? -1 : tabIndex',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[class.mat-mdc-chip-list-disabled]': 'disabled',\n    '[class.mat-mdc-chip-list-invalid]': 'errorState',\n    '[class.mat-mdc-chip-list-required]': 'required',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipGrid}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipGrid extends _MatChipGridMixinBase implements AfterContentInit, AfterViewInit,\n  CanUpdateErrorState, ControlValueAccessor, DoCheck, MatFormFieldControl<any>, OnDestroy {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-grid';\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /**\n   * Function when touched. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onTouched = () => {};\n\n  /**\n   * Function when changed. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onChange: (value: any) => void = () => {};\n\n  /** The GridFocusKeyManager which handles focus. */\n  _keyManager: GridFocusKeyManager;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string { return this._chipInput.id; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean { return this._chipInput.empty && this._chips.length === 0; }\n\n    /** The ARIA role applied to the chip grid. */\n  get role(): string | null { return this.empty ? null : 'grid'; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-grid has focus. */\n  get focused(): boolean { return this._chipInput.focused || this._hasFocusedChip(); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this._value = value;\n  }\n  protected _value: Array<any> = [];\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Combined stream of all of the child chips' blur events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' focus events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onFocus));\n  }\n\n  /** Emits when the chip grid value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipGridChange> =\n      new EventEmitter<MatChipGridChange>();\n\n  /**\n   * Emits whenever the raw value of the chip-grid changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  @ContentChildren(MatChipRow, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  _chips: QueryList<MatChipRow>;\n\n  constructor(_elementRef: ElementRef,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_elementRef, _changeDetectorRef, _dir, _defaultErrorStateMatcher, _parentForm,\n        _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n    this._initKeyManager();\n\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    if (!this._chipInput) {\n      throw Error('mat-chip-grid must be used in combination with matChipInputFor.');\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.stateChanges.complete();\n  }\n\n  /** Associates an HTML input element with this chip grid. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n    this._setMdcClass('mdc-chip-set--input', true);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event) && !this.disabled) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first chip in this chip grid, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled || this._chipInput.focused) {\n      return;\n    }\n\n    if (this._chips.length > 0) {\n      this._keyManager.setFirstCellActive();\n    } else {\n      this._focusInput();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    // The user is responsible for creating the child chips, so we just store the value.\n    this._value = value;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip grid. */\n  _blur() {\n    if (this.disabled) {\n      return;\n    }\n\n    // Check whether the focus moved to chip input.\n    // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n    // to chip input, do nothing.\n    // Timeout is needed to wait for the focus() event trigger on chip input.\n    setTimeout(() => {\n      if (!this.focused) {\n        this._keyManager.setActiveCell({row: -1, column: -1});\n        this._propagateChanges();\n        this._markAsTouched();\n      }\n    });\n  }\n\n  /**\n   * Removes the `tabindex` from the chip grid and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the grid from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._chipInput.focused) {\n      return;\n    }\n\n    const previousTabIndex = this.tabIndex;\n\n    if (this.tabIndex !== -1) {\n      this.tabIndex = -1;\n\n      setTimeout(() => {\n        this.tabIndex = previousTabIndex;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /** Handles custom keyboard events. */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (keyCode === BACKSPACE && this._isEmptyInput(target)) {\n      if (this._chips.length) {\n        manager.setLastCellActive();\n      }\n      event.preventDefault();\n    } else if (keyCode === TAB && target.id !== this._chipInput!.id ) {\n      this._allowFocusEscape();\n    } else if (this._originatesFromChip(event)) {\n      if (keyCode === HOME) {\n        manager.setFirstCellActive();\n        event.preventDefault();\n      } else if (keyCode === END) {\n        manager.setLastCellActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n\n  /** Unsubscribes from all chip events. */\n  protected _dropSubscriptions() {\n    super._dropSubscriptions();\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n  }\n\n  /** Subscribes to events on the child chips. */\n  protected _subscribeToChipEvents() {\n    super._subscribeToChipEvents();\n    this._listenToChipsFocus();\n    this._listenToChipsBlur();\n  }\n\n  /** Initializes the key manager to manage focus. */\n  private _initKeyManager() {\n    this._keyManager = new GridFocusKeyManager(this._chips)\n      .withDirectionality(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withDirectionality(dir));\n    }\n  }\n\n   /** Subscribes to chip focus events. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe((event: MatChipEvent) => {\n      let chipIndex: number = this._chips.toArray().indexOf(event.chip as MatChipRow);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveCell({row: chipIndex, column: 0});\n      }\n    });\n  }\n\n  /** Subscribes to chip blur events. */\n  private _listenToChipsBlur(): void {\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n /** Emits change event to set the model value. */\n  private _propagateChanges(): void {\n    const valueToEmit = this._chips.length ? this._chips.toArray().map(\n      chip => chip.value) : [];\n    this._value = valueToEmit;\n    this.change.emit(new MatChipGridChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Mark the field as touched */\n  private _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * If the amount of chips changed, we need to focus the next closest chip.\n   */\n  private _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-grid itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this._chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this._chips.length - 1);\n        this._keyManager.setActiveCell({\n          row: newChipIndex,\n          column: this._keyManager.activeColumnIndex\n        });\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /** Focus input element. */\n  private _focusInput() {\n    this._chipInput.focus();\n  }\n\n  /** Returns true if element is an input with no value. */\n  private _isEmptyInput(element: HTMLElement): boolean {\n    if (element && element.id === this._chipInput!.id) {\n      return this._chipInput.empty;\n    }\n\n    return false;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipGrid} from './chip-grid';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of a `<mat-chip-grid>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-mdc-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipGrid && _chipGrid.ngControl ? _chipGrid.ngControl.invalid : null',\n    '[attr.aria-required]': '_chipGrid && _chipGrid.required || null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipGrid: MatChipGrid;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipGrid(value: MatChipGrid) {\n    if (value) {\n      this._chipGrid = value;\n      this._chipGrid.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-mdc-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipGrid && this._chipGrid.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipGrid.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipGrid._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipGrid.focused) {\n      this._chipGrid._blur();\n    }\n    this._chipGrid.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipGrid.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipGrid._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipGrid.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n\n  static ngAcceptInputType_addOnBlur: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatChip, MatChipCssInternalOnly} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipGrid} from './chip-grid';\nimport {MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip-icons';\nimport {MatChipInput} from './chip-input';\nimport {MatChipListbox} from './chip-listbox';\nimport {MatChipRow} from './chip-row';\nimport {MatChipOption} from './chip-option';\nimport {MatChipSet} from './chip-set';\n\n\nconst CHIP_DECLARATIONS = [\n  MatChip,\n  MatChipAvatar,\n  MatChipCssInternalOnly,\n  MatChipGrid,\n  MatChipInput,\n  MatChipListbox,\n  MatChipOption,\n  MatChipRemove,\n  MatChipRow,\n  MatChipSet,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule, MatRippleModule],\n  exports: [MatCommonModule, CHIP_DECLARATIONS],\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './chip';\nexport * from './chip-option';\nexport * from './chip-row';\nexport * from './chip-set';\nexport * from './chip-listbox';\nexport * from './chip-grid';\nexport * from './module';\nexport * from './chip-input';\nexport * from './chip-default-options';\nexport * from './chip-icons';\nexport * from './chip-text-control';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["uid"],"mappings":"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"}