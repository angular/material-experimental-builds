{"version":3,"file":"mdc-form-field__testing.js","sources":["../../../../../../../src/material-experimental/mdc-form-field/testing/form-field-harness.ts","../../../../../../../src/material-experimental/mdc-form-field/testing/public-api.ts","../../../../../../../src/material-experimental/mdc-form-field/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ComponentHarness,\n  ComponentHarnessConstructor,\n  HarnessPredicate,\n  HarnessQuery,\n  TestElement\n} from '@angular/cdk/testing';\nimport {FormFieldHarnessFilters} from '@angular/material/form-field/testing';\nimport {MatFormFieldControlHarness} from '@angular/material/form-field/testing/control';\nimport {MatInputHarness} from '@angular/material/input/testing';\nimport {MatSelectHarness} from '@angular/material/select/testing';\n\n// TODO(devversion): support datepicker harness once developed (COMP-203).\n// Also support chip list harness.\n/** Possible harnesses of controls which can be bound to a form-field. */\nexport type FormFieldControlHarness = MatInputHarness|MatSelectHarness;\n\n/** Harness for interacting with a MDC-based form-field's in tests. */\nexport class MatFormFieldHarness extends ComponentHarness {\n  static hostSelector = '.mat-mdc-form-field';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatFormFieldHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which form field instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: FormFieldHarnessFilters = {}): HarnessPredicate<MatFormFieldHarness> {\n    return new HarnessPredicate(MatFormFieldHarness, options)\n        .addOption(\n            'floatingLabelText', options.floatingLabelText,\n            async (harness, text) => HarnessPredicate.stringMatches(await harness.getLabel(), text))\n        .addOption(\n            'hasErrors', options.hasErrors,\n            async (harness, hasErrors) => await harness.hasErrors() === hasErrors);\n  }\n\n  private _mdcTextField = this.locatorFor('.mat-mdc-text-field-wrapper');\n\n  private _prefixContainer = this.locatorForOptional('.mat-mdc-form-field-prefix');\n  private _suffixContainer = this.locatorForOptional('.mat-mdc-form-field-suffix');\n  private _label = this.locatorForOptional('.mdc-floating-label');\n  private _errors = this.locatorForAll('.mat-mdc-form-field-error');\n  private _hints = this.locatorForAll('.mat-mdc-form-field-hint');\n\n  private _inputControl = this.locatorForOptional(MatInputHarness);\n  private _selectControl = this.locatorForOptional(MatSelectHarness);\n\n  /** Gets the appearance of the form-field. */\n  async getAppearance(): Promise<'fill'|'outline'> {\n    const textFieldEl = await this._mdcTextField();\n    if (await textFieldEl.hasClass('mdc-text-field--outlined')) {\n      return 'outline';\n    }\n    return 'fill';\n  }\n\n  /**\n   * Gets the harness of the control that is bound to the form-field. Only\n   * default controls such as \"MatInputHarness\" and \"MatSelectHarness\" are\n   * supported.\n   */\n  async getControl(): Promise<FormFieldControlHarness|null>;\n\n  /**\n   * Gets the harness of the control that is bound to the form-field. Searches\n   * for a control that matches the specified harness type.\n   */\n  async getControl<X extends MatFormFieldControlHarness>(type: ComponentHarnessConstructor<X>):\n      Promise<X|null>;\n\n  /**\n   * Gets the harness of the control that is bound to the form-field. Searches\n   * for a control that matches the specified harness predicate.\n   */\n  async getControl<X extends MatFormFieldControlHarness>(type: HarnessPredicate<X>):\n      Promise<X|null>;\n\n  // Implementation of the \"getControl\" method overload signatures.\n  async getControl<X extends MatFormFieldControlHarness>(type?: HarnessQuery<X>) {\n    if (type) {\n      return this.locatorForOptional(type)();\n    }\n    const hostEl = await this.host();\n    const [isInput, isSelect] = await Promise.all([\n      hostEl.hasClass('mat-mdc-form-field-type-mat-input'),\n      hostEl.hasClass('mat-mdc-form-field-type-mat-select'),\n    ]);\n    if (isInput) {\n      return this._inputControl();\n    } else if (isSelect) {\n      return this._selectControl();\n    }\n    return null;\n  }\n\n  /** Whether the form-field has a label. */\n  async hasLabel(): Promise<boolean> {\n    return (await this._label()) !== null;\n  }\n\n  /** Gets the label of the form-field. */\n  async getLabel(): Promise<string|null> {\n    const labelEl = await this._label();\n    return labelEl ? labelEl.text() : null;\n  }\n\n  /** Whether the form-field has errors. */\n  async hasErrors(): Promise<boolean> {\n    return (await this.getTextErrors()).length > 0;\n  }\n\n  /** Whether the label is currently floating. */\n  async isLabelFloating(): Promise<boolean> {\n    const labelEl = await this._label();\n    return labelEl !== null ? await labelEl.hasClass('mdc-floating-label--float-above') : false;\n  }\n\n  /** Whether the form-field is disabled. */\n  async isDisabled(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-form-field-disabled');\n  }\n\n  /** Whether the form-field is currently autofilled. */\n  async isAutofilled(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-form-field-autofilled');\n  }\n\n  /** Gets the theme color of the form-field. */\n  async getThemeColor(): Promise<'primary'|'accent'|'warn'> {\n    const hostEl = await this.host();\n    const [isAccent, isWarn] =\n        await Promise.all([hostEl.hasClass('mat-accent'), hostEl.hasClass('mat-warn')]);\n    if (isAccent) {\n      return 'accent';\n    } else if (isWarn) {\n      return 'warn';\n    }\n    return 'primary';\n  }\n\n  /** Gets error messages which are currently displayed in the form-field. */\n  async getTextErrors(): Promise<string[]> {\n    return Promise.all((await this._errors()).map(e => e.text()));\n  }\n\n  /** Gets hint messages which are currently displayed in the form-field. */\n  async getTextHints(): Promise<string[]> {\n    return Promise.all((await this._hints()).map(e => e.text()));\n  }\n\n  /**\n   * Gets a reference to the container element which contains all projected\n   * prefixes of the form-field.\n   */\n  async getHarnessLoaderForPrefix(): Promise<TestElement|null> {\n    return this._prefixContainer();\n  }\n\n  /**\n   * Gets a reference to the container element which contains all projected\n   * suffixes of the form-field.\n   */\n  async getHarnessLoaderForSuffix(): Promise<TestElement|null> {\n    return this._suffixContainer();\n  }\n\n  /**\n   * Whether the form control has been touched. Returns \"null\"\n   * if no form control is set up.\n   */\n  async isControlTouched(): Promise<boolean|null> {\n    if (!await this._hasFormControl()) {\n      return null;\n    }\n    return (await this.host()).hasClass('ng-touched');\n  }\n\n  /**\n   * Whether the form control is dirty. Returns \"null\"\n   * if no form control is set up.\n   */\n  async isControlDirty(): Promise<boolean|null> {\n    if (!await this._hasFormControl()) {\n      return null;\n    }\n    return (await this.host()).hasClass('ng-dirty');\n  }\n\n  /**\n   * Whether the form control is valid. Returns \"null\"\n   * if no form control is set up.\n   */\n  async isControlValid(): Promise<boolean|null> {\n    if (!await this._hasFormControl()) {\n      return null;\n    }\n    return (await this.host()).hasClass('ng-valid');\n  }\n\n  /**\n   * Whether the form control is pending validation. Returns \"null\"\n   * if no form control is set up.\n   */\n  async isControlPending(): Promise<boolean|null> {\n    if (!await this._hasFormControl()) {\n      return null;\n    }\n    return (await this.host()).hasClass('ng-pending');\n  }\n\n  /** Checks whether the form-field control has set up a form control. */\n  private async _hasFormControl(): Promise<boolean> {\n    const hostEl = await this.host();\n    // If no form \"NgControl\" is bound to the form-field control, the form-field\n    // is not able to forward any control status classes. Therefore if either the\n    // \"ng-touched\" or \"ng-untouched\" class is set, we know that it has a form control\n    const [isTouched, isUntouched] =\n        await Promise.all([hostEl.hasClass('ng-touched'), hostEl.hasClass('ng-untouched')]);\n    return isTouched || isUntouched;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Re-export everything from the \"form-field/testing/control\" entry-point. To avoid\n// circular dependencies, harnesses for default form-field controls (i.e. input, select)\n// need to import the base form-field control harness through a separate entry-point.\nexport * from '@angular/material/form-field/testing/control';\n\nexport {FormFieldHarnessFilters} from '@angular/material/form-field/testing';\nexport * from './form-field-harness';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}