{"version":3,"file":"mdc-menu__testing.js","sources":["../../../../../../../src/material-experimental/mdc-menu/testing/menu-harness.ts","../../../../../../../src/material-experimental/mdc-menu/testing/public-api.ts","../../../../../../../src/material-experimental/mdc-menu/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  MenuHarnessFilters,\n  MenuItemHarnessFilters\n} from '@angular/material/menu/testing';\n\n/** Harness for interacting with a MDC-based mat-menu in tests. */\nexport class MatMenuHarness extends ComponentHarness {\n  static hostSelector = '.mat-menu-trigger';\n\n  // TODO: potentially extend MatButtonHarness\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a menu with specific attributes.\n   * @param options Options for narrowing the search:\n   *   - `selector` finds a menu whose host element matches the given selector.\n   *   - `label` finds a menu with specific label text.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: MenuHarnessFilters = {}): HarnessPredicate<MatMenuHarness> {\n    return new HarnessPredicate(MatMenuHarness, options)\n        .addOption('triggerText', options.triggerText,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getTriggerText(), text));\n  }\n\n  /** Gets a boolean promise indicating if the menu is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this.host()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  async isOpen(): Promise<boolean> {\n    throw Error('not implemented');\n  }\n\n  async getTriggerText(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Focuses the menu and returns a void promise that indicates when the action is complete. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the menu and returns a void promise that indicates when the action is complete. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  async open(): Promise<void> {\n    throw Error('not implemented');\n  }\n\n  async close(): Promise<void> {\n    throw Error('not implemented');\n  }\n\n  async getItems(filters: Omit<MenuItemHarnessFilters, 'ancestor'> = {}):\n      Promise<MatMenuItemHarness[]> {\n    throw Error('not implemented');\n  }\n\n  async clickItem(filter: Omit<MenuItemHarnessFilters, 'ancestor'>,\n                  ...filters: Omit<MenuItemHarnessFilters, 'ancestor'>[]): Promise<void> {\n    throw Error('not implemented');\n  }\n}\n\n\n/** Harness for interacting with a standard mat-menu in tests. */\nexport class MatMenuItemHarness extends ComponentHarness {\n  static hostSelector = '.mat-menu-item';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a menu with specific attributes.\n   * @param options Options for narrowing the search:\n   *   - `selector` finds a menu item whose host element matches the given selector.\n   *   - `label` finds a menu item with specific label text.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: MenuItemHarnessFilters = {}): HarnessPredicate<MatMenuItemHarness> {\n    return new HarnessPredicate(MatMenuItemHarness, options)\n        .addOption('text', options.text,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getText(), text))\n        .addOption('hasSubmenu', options.hasSubmenu,\n            async (harness, hasSubmenu) => (await harness.hasSubmenu()) === hasSubmenu);\n  }\n\n  /** Gets a boolean promise indicating if the menu is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this.host()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  async getText(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Focuses the menu and returns a void promise that indicates when the action is complete. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the menu and returns a void promise that indicates when the action is complete. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  async click(): Promise<void> {\n    throw Error('not implemented');\n  }\n\n  async hasSubmenu(): Promise<boolean> {\n    throw Error('not implemented');\n  }\n\n  async getSubmenu(): Promise<MatMenuHarness | null> {\n    throw Error('not implemented');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './menu-harness';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}