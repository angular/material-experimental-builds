@use '@material/checkbox/checkbox-theme' as checkbox-theme;
@use '@material/ripple/ripple-theme' as ripple-theme;
@use '@material/theme/theme';
@use 'sass:map';
@use '../mdc-helpers/mdc-helpers';
@use '../../material/core/theming/theming';

@import '@material/checkbox/mixins.import';
@import '@material/checkbox/variables.import';
@import '@material/form-field/mixins.import';
@import '@material/ripple/variables.import';
@import '@material/theme/functions.import';

// Mixin that includes the checkbox theme styles with a given palette.
// By default, the MDC checkbox always uses the `secondary` palette.
@mixin private-checkbox-styles-with-color($color) {
  @include checkbox-theme.theme(
    (
      density-scale: null,
      checkmark-color: mdc-theme-prop-value(on-#{$color}),
      container-checked-color: $color,
      container-checked-hover-color: null,
      container-disabled-color: rgba(mdc-theme-prop-value(on-surface), 0.38),
      outline-color: rgba(mdc-theme-prop-value(on-surface), 0.54),
      outline-hover-color: null,
      ripple-color: mdc-theme-prop-value(on-surface),
      ripple-opacity: ripple-theme.$dark-ink-opacities,
      ripple-checked-color: $color,
      ripple-checked-opacity: ripple-theme.$dark-ink-opacities,
    )
  );
  @include _background-focus-indicator-color(mdc-theme-prop-value(on-surface));
  @include _background-focus-indicator-checked-color($color);
}

// TODO(b/175233410): Use ripple element to show focus indicator.
@mixin _background-focus-indicator-color($color) {
  .mdc-checkbox__background::before {
    @include theme.property(background-color, on-surface);
  }
}

// TODO(b/175233410): Use ripple element to show focus indicator.
@mixin _background-focus-indicator-checked-color($color) {
  .mdc-checkbox__native-control:checked ~ .mdc-checkbox__background::before,
  .mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background::before,
  .mdc-checkbox__native-control[data-indeterminate='true'] ~ .mdc-checkbox__background::before {
    @include theme.property(background-color, $color);
  }
}

@mixin color($config-or-theme) {
  $config: theming.get-color-config($config-or-theme);
  $primary: theming.color(map.get($config, primary));
  $accent: theming.color(map.get($config, accent));
  $warn: theming.color(map.get($config, warn));

  // Save original values of MDC global variables. We need to save these so we can restore the
  // variables to their original values and prevent unintended side effects from using this mixin.
  $orig-mdc-checkbox-border-color: $mdc-checkbox-border-color;
  $orig-mdc-checkbox-disabled-color: $mdc-checkbox-disabled-color;

  @include mdc-helpers.mat-using-mdc-theme($config) {
    $mdc-checkbox-border-color: rgba(
      mdc-theme-prop-value(on-surface),
      0.54
    ) !global;
    $mdc-checkbox-disabled-color: rgba(
      mdc-theme-prop-value(on-surface),
      0.26
    ) !global;

    .mat-mdc-checkbox {
      @include private-checkbox-styles-with-color(primary);
      @include mdc-form-field-core-styles($query: mdc-helpers.$mat-theme-styles-query);
    }

    // MDC's checkbox doesn't support a `color` property. We add support for it by adding a CSS
    // class for accent and warn style, and applying the appropriate overrides below. Since we don't
    // use MDC's ripple, we also need to set the color for our replacement ripple.
    .mat-mdc-checkbox {
      .mat-ripple-element,
      .mdc-checkbox__background::before {
        background: mdc-theme-prop-value(on-surface);
      }

      .mdc-checkbox--selected ~ .mat-mdc-checkbox-ripple .mat-ripple-element {
        background: $primary;
      }

      &.mat-accent {
        @include private-checkbox-styles-with-color(secondary);

        .mdc-checkbox--selected ~ .mat-mdc-checkbox-ripple .mat-ripple-element {
          background: $accent;
        }
      }

      &.mat-warn {
        @include private-checkbox-styles-with-color(error);

        .mdc-checkbox--selected ~ .mat-mdc-checkbox-ripple .mat-ripple-element {
          background: $warn;
        }
      }
    }
  }

  // Restore original values of MDC global variables.
  $mdc-checkbox-border-color: $orig-mdc-checkbox-border-color !global;
  $mdc-checkbox-disabled-color: $orig-mdc-checkbox-disabled-color !global;
}

@mixin typography($config-or-theme) {
  $config: theming.get-typography-config($config-or-theme);
  @include mdc-helpers.mat-using-mdc-typography($config) {
    @include mdc-checkbox-without-ripple($query: mdc-helpers.$mat-typography-styles-query);
    @include mdc-form-field-core-styles($query: mdc-helpers.$mat-typography-styles-query);
  }
}

// TODO(b/175233410): Use ripple element to show focus indicator.
@mixin _background-focus-density($density-scale) {
  $ripple-size: checkbox-theme.get-ripple-size($density-scale);
  $checkbox-padding: ($ripple-size - checkbox-theme.$icon-size) / 2;

  .mdc-checkbox__background::before {
    top: -(checkbox-theme.$border-width) - $checkbox-padding;
    left: -(checkbox-theme.$border-width) - $checkbox-padding;
    width: $ripple-size;
    height: $ripple-size;
  }
}

@mixin density($config-or-theme) {
  $density-scale: theming.get-density-config($config-or-theme);
  .mat-mdc-checkbox .mdc-checkbox {
    @include mdc-checkbox-density(
      $density-scale,
      $query: mdc-helpers.$mat-base-styles-query
    );
    @include _background-focus-density($density-scale);
  }
}

@mixin theme($theme-or-color-config) {
  $theme: theming.private-legacy-get-theme($theme-or-color-config);
  @include theming.private-check-duplicate-theme-styles($theme, 'mat-mdc-checkbox') {
    $color: theming.get-color-config($theme);
    $density: theming.get-density-config($theme);
    $typography: theming.get-typography-config($theme);

    @if $color != null {
      @include color($color);
    }
    @if $density != null {
      @include density($density);
    }
    @if $typography != null {
      @include typography($typography);
    }
  }
}
