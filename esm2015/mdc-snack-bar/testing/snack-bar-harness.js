/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { HarnessPredicate } from '@angular/cdk/testing';
import { MatSnackBarHarness as BaseMatSnackBarHarness, } from '@angular/material/snack-bar/testing';
/** Harness for interacting with an MDC-based mat-snack-bar in tests. */
export class MatSnackBarHarness extends BaseMatSnackBarHarness {
    constructor() {
        super(...arguments);
        this._messageSelector = '.mat-mdc-simple-snack-bar .mat-mdc-snack-bar-label';
        this._simpleSnackBarSelector = '.mat-mdc-simple-snack-bar';
        this._actionButtonSelector = '.mat-mdc-simple-snack-bar .mat-mdc-snack-bar-action';
    }
    /**
     * Gets a `HarnessPredicate` that can be used to search for a `MatSnackBarHarness` that meets
     * certain criteria.
     * @param options Options for filtering which snack bar instances are considered a match.
     * @return a `HarnessPredicate` configured with the given options.
     */
    static with(options = {}) {
        return new HarnessPredicate(MatSnackBarHarness, options);
    }
}
// Developers can provide a custom component or template for the snackbar. The canonical snack-bar
// parent is the "MatSnackBarContainer". We use `:not([mat-exit])` to exclude snack bars that
// are in the process of being dismissed, because the element only gets removed after the
// animation is finished and since it runs outside of Angular, we don't have a way of being
// notified when it's done.
/** The selector for the host element of a `MatSnackBar` instance. */
MatSnackBarHarness.hostSelector = '.mat-mdc-snack-bar-container:not([mat-exit])';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25hY2stYmFyLWhhcm5lc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbWF0ZXJpYWwtZXhwZXJpbWVudGFsL21kYy1zbmFjay1iYXIvdGVzdGluZy9zbmFjay1iYXItaGFybmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RCxPQUFPLEVBQ0wsa0JBQWtCLElBQUksc0JBQXNCLEdBRTdDLE1BQU0scUNBQXFDLENBQUM7QUFFN0Msd0VBQXdFO0FBQ3hFLE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxzQkFBc0I7SUFBOUQ7O1FBUXFCLHFCQUFnQixHQUFHLG9EQUFvRCxDQUFDO1FBQ3hFLDRCQUF1QixHQUFHLDJCQUEyQixDQUFDO1FBQ3RELDBCQUFxQixHQUFHLHFEQUFxRCxDQUFDO0lBWW5HLENBQUM7SUFWQzs7Ozs7T0FLRztJQUNILE1BQU0sQ0FBVSxJQUFJLENBQ2hCLFVBQWtDLEVBQUU7UUFDdEMsT0FBTyxJQUFJLGdCQUFnQixDQUF5QixrQkFBa0IsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNuRixDQUFDOztBQXBCRCxrR0FBa0c7QUFDbEcsNkZBQTZGO0FBQzdGLHlGQUF5RjtBQUN6RiwyRkFBMkY7QUFDM0YsMkJBQTJCO0FBQzNCLHFFQUFxRTtBQUNyRCwrQkFBWSxHQUFHLDhDQUE4QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7SGFybmVzc1ByZWRpY2F0ZX0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHtcbiAgTWF0U25hY2tCYXJIYXJuZXNzIGFzIEJhc2VNYXRTbmFja0Jhckhhcm5lc3MsXG4gIFNuYWNrQmFySGFybmVzc0ZpbHRlcnMsXG59IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NuYWNrLWJhci90ZXN0aW5nJztcblxuLyoqIEhhcm5lc3MgZm9yIGludGVyYWN0aW5nIHdpdGggYW4gTURDLWJhc2VkIG1hdC1zbmFjay1iYXIgaW4gdGVzdHMuICovXG5leHBvcnQgY2xhc3MgTWF0U25hY2tCYXJIYXJuZXNzIGV4dGVuZHMgQmFzZU1hdFNuYWNrQmFySGFybmVzcyB7XG4gIC8vIERldmVsb3BlcnMgY2FuIHByb3ZpZGUgYSBjdXN0b20gY29tcG9uZW50IG9yIHRlbXBsYXRlIGZvciB0aGUgc25hY2tiYXIuIFRoZSBjYW5vbmljYWwgc25hY2stYmFyXG4gIC8vIHBhcmVudCBpcyB0aGUgXCJNYXRTbmFja0JhckNvbnRhaW5lclwiLiBXZSB1c2UgYDpub3QoW21hdC1leGl0XSlgIHRvIGV4Y2x1ZGUgc25hY2sgYmFycyB0aGF0XG4gIC8vIGFyZSBpbiB0aGUgcHJvY2VzcyBvZiBiZWluZyBkaXNtaXNzZWQsIGJlY2F1c2UgdGhlIGVsZW1lbnQgb25seSBnZXRzIHJlbW92ZWQgYWZ0ZXIgdGhlXG4gIC8vIGFuaW1hdGlvbiBpcyBmaW5pc2hlZCBhbmQgc2luY2UgaXQgcnVucyBvdXRzaWRlIG9mIEFuZ3VsYXIsIHdlIGRvbid0IGhhdmUgYSB3YXkgb2YgYmVpbmdcbiAgLy8gbm90aWZpZWQgd2hlbiBpdCdzIGRvbmUuXG4gIC8qKiBUaGUgc2VsZWN0b3IgZm9yIHRoZSBob3N0IGVsZW1lbnQgb2YgYSBgTWF0U25hY2tCYXJgIGluc3RhbmNlLiAqL1xuICBzdGF0aWMgb3ZlcnJpZGUgaG9zdFNlbGVjdG9yID0gJy5tYXQtbWRjLXNuYWNrLWJhci1jb250YWluZXI6bm90KFttYXQtZXhpdF0pJztcbiAgcHJvdGVjdGVkIG92ZXJyaWRlIF9tZXNzYWdlU2VsZWN0b3IgPSAnLm1hdC1tZGMtc2ltcGxlLXNuYWNrLWJhciAubWF0LW1kYy1zbmFjay1iYXItbGFiZWwnO1xuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX3NpbXBsZVNuYWNrQmFyU2VsZWN0b3IgPSAnLm1hdC1tZGMtc2ltcGxlLXNuYWNrLWJhcic7XG4gIHByb3RlY3RlZCBvdmVycmlkZSBfYWN0aW9uQnV0dG9uU2VsZWN0b3IgPSAnLm1hdC1tZGMtc2ltcGxlLXNuYWNrLWJhciAubWF0LW1kYy1zbmFjay1iYXItYWN0aW9uJztcblxuICAvKipcbiAgICogR2V0cyBhIGBIYXJuZXNzUHJlZGljYXRlYCB0aGF0IGNhbiBiZSB1c2VkIHRvIHNlYXJjaCBmb3IgYSBgTWF0U25hY2tCYXJIYXJuZXNzYCB0aGF0IG1lZXRzXG4gICAqIGNlcnRhaW4gY3JpdGVyaWEuXG4gICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIGZpbHRlcmluZyB3aGljaCBzbmFjayBiYXIgaW5zdGFuY2VzIGFyZSBjb25zaWRlcmVkIGEgbWF0Y2guXG4gICAqIEByZXR1cm4gYSBgSGFybmVzc1ByZWRpY2F0ZWAgY29uZmlndXJlZCB3aXRoIHRoZSBnaXZlbiBvcHRpb25zLlxuICAgKi9cbiAgc3RhdGljIG92ZXJyaWRlIHdpdGgoXG4gICAgICBvcHRpb25zOiBTbmFja0Jhckhhcm5lc3NGaWx0ZXJzID0ge30pOiBIYXJuZXNzUHJlZGljYXRlPEJhc2VNYXRTbmFja0Jhckhhcm5lc3M+IHtcbiAgICByZXR1cm4gbmV3IEhhcm5lc3NQcmVkaWNhdGU8QmFzZU1hdFNuYWNrQmFySGFybmVzcz4oTWF0U25hY2tCYXJIYXJuZXNzLCBvcHRpb25zKTtcbiAgfVxufVxuIl19