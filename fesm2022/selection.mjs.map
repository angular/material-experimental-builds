{"version":3,"file":"selection.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-experimental/selection/selection.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-experimental/selection/select-all.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-experimental/selection/selection-toggle.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-experimental/selection/selection-column.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-experimental/selection/row-selection.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-experimental/selection/selection-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkSelection, SelectionChange} from '@angular/cdk-experimental/selection';\nimport {Directive, Input, Output, EventEmitter} from '@angular/core';\n\n/**\n * Manages the selection states of the items and provides methods to check and update the selection\n * states.\n * It must be applied to the parent element if `matSelectionToggle`, `matSelectAll`,\n * `matRowSelection` and `matSelectionColumn` are applied.\n */\n@Directive({\n  selector: '[matSelection]',\n  exportAs: 'matSelection',\n  providers: [{provide: CdkSelection, useExisting: MatSelection}],\n})\n// tslint:disable-next-line: coercion-types\nexport class MatSelection<T> extends CdkSelection<T> {\n  /** Whether to support multiple selection */\n  @Input('matSelectionMultiple')\n  override get multiple(): boolean {\n    return this._multiple;\n  }\n  override set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n\n  /** Emits when selection changes. */\n  @Output('matSelectionChange') override readonly change = new EventEmitter<SelectionChange<T>>();\n}\n\n/**\n * Represents the change in the selection set.\n */\nexport {SelectionChange} from '@angular/cdk-experimental/selection';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {CdkSelectAll} from '@angular/cdk-experimental/selection';\nimport {Directive} from '@angular/core';\n\n/**\n * Makes the element a select-all toggle.\n *\n * Must be used within a parent `MatSelection` directive. It toggles the selection states\n * of all the selection toggles connected with the `MatSelection` directive.\n * If the element implements `ControlValueAccessor`, e.g. `MatCheckbox`, the directive\n * automatically connects it with the select-all state provided by the `MatSelection` directive. If\n * not, use `checked` to get the checked state, `indeterminate` to get the indeterminate state,\n * and `toggle()` to change the selection state.\n */\n@Directive({\n  selector: '[matSelectAll]',\n  exportAs: 'matSelectAll',\n  providers: [{provide: CdkSelectAll, useExisting: MatSelectAll}],\n})\nexport class MatSelectAll<T> extends CdkSelectAll<T> {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {CdkSelectionToggle} from '@angular/cdk-experimental/selection';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Makes the element a selection toggle.\n *\n * Must be used within a parent `MatSelection` directive.\n * Must be provided with the value. If `trackBy` is used on `MatSelection`, the index of the value\n * is required. If the element implements `ControlValueAccessor`, e.g. `MatCheckbox`, the directive\n * automatically connects it with the selection state provided by the `MatSelection` directive. If\n * not, use `checked$` to get the checked state of the value, and `toggle()` to change the selection\n * state.\n */\n@Directive({\n  selector: '[matSelectionToggle]',\n  exportAs: 'matSelectionToggle',\n  inputs: [{name: 'index', alias: 'matSelectionToggleIndex'}],\n  providers: [{provide: CdkSelectionToggle, useExisting: MatSelectionToggle}],\n})\nexport class MatSelectionToggle<T> extends CdkSelectionToggle<T> {\n  /** The value that is associated with the toggle */\n  @Input('matSelectionToggleValue') override value: T = undefined!;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatHeaderCell,\n  MatHeaderCellDef,\n  MatTable,\n} from '@angular/material/table';\nimport {\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  inject,\n} from '@angular/core';\nimport {AsyncPipe} from '@angular/common';\n\nimport {MatSelection} from './selection';\nimport {MatCheckbox} from '@angular/material/checkbox';\nimport {MatSelectionToggle} from './selection-toggle';\nimport {MatSelectAll} from './select-all';\n\n/**\n * Column that adds row selecting checkboxes and a select-all checkbox if `matSelectionMultiple` is\n * `true`.\n *\n * Must be used within a parent `MatSelection` directive.\n */\n@Component({\n  selector: 'mat-selection-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef class=\"mat-selection-column-header\">\n        @if (selection && selection.multiple) {\n          <mat-checkbox\n              matSelectAll\n              #allToggler=\"matSelectAll\"\n              [indeterminate]=\"allToggler.indeterminate | async\"></mat-checkbox>\n        }\n      </th>\n      <td mat-cell *matCellDef=\"let row; let i = $index\" class=\"mat-selection-column-cell\">\n        <mat-checkbox\n            matSelectionToggle\n            [matSelectionToggleValue]=\"row\"\n            [matSelectionToggleIndex]=\"i\"></mat-checkbox>\n      </td>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrl: 'selection-column.css',\n  encapsulation: ViewEncapsulation.None,\n  imports: [\n    MatColumnDef,\n    MatHeaderCellDef,\n    MatHeaderCell,\n    MatCheckbox,\n    MatSelectAll,\n    MatCellDef,\n    MatCell,\n    MatSelectionToggle,\n    AsyncPipe,\n  ],\n})\nexport class MatSelectionColumn<T> implements OnInit, OnDestroy {\n  private _table = inject<MatTable<T>>(MatTable, {optional: true});\n  readonly selection = inject<MatSelection<T>>(MatSelection, {optional: true});\n\n  /** Column name that should be used to reference this column. */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n  set name(name: string) {\n    this._name = name;\n\n    this._syncColumnDefName();\n  }\n  private _name: string;\n\n  @ViewChild(MatColumnDef, {static: true}) private readonly _columnDef: MatColumnDef;\n  @ViewChild(MatCellDef, {static: true}) private readonly _cell: MatCellDef;\n  @ViewChild(MatHeaderCellDef, {static: true})\n  private readonly _headerCell: MatHeaderCellDef;\n\n  ngOnInit() {\n    if (!this.selection && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('MatSelectionColumn: missing MatSelection in the parent');\n    }\n\n    this._syncColumnDefName();\n\n    if (this._table) {\n      this._columnDef.cell = this._cell;\n      this._columnDef.headerCell = this._headerCell;\n      this._table.addColumnDef(this._columnDef);\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw Error('MatSelectionColumn: missing parent table');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._table) {\n      this._table.removeColumnDef(this._columnDef);\n    }\n  }\n\n  private _syncColumnDefName() {\n    if (this._columnDef) {\n      this._columnDef.name = this._name;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {CdkRowSelection} from '@angular/cdk-experimental/selection';\nimport {Input, Directive} from '@angular/core';\n\n/**\n * Applies `mat-selected` class and `aria-selected` to an element.\n *\n * Must be used within a parent `MatSelection` directive.\n * Must be provided with the value. The index is required if `trackBy` is used on the `CdkSelection`\n * directive.\n */\n@Directive({\n  selector: '[matRowSelection]',\n  host: {\n    '[class.mat-selected]': '_selection.isSelected(this.value, this.index)',\n    '[attr.aria-selected]': '_selection.isSelected(this.value, this.index)',\n  },\n  providers: [{provide: CdkRowSelection, useExisting: MatRowSelection}],\n  inputs: [{name: 'index', alias: 'matRowSelectionIndex'}],\n})\nexport class MatRowSelection<T> extends CdkRowSelection<T> {\n  /** The value that is associated with the row */\n  @Input('matRowSelectionValue') override value: T = undefined!;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n// TODO(yifange): Move the table-specific code to a separate module from the other selection\n// behaviors once we move it out of experimental.\nimport {NgModule} from '@angular/core';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatSelectAll} from './select-all';\nimport {MatSelection} from './selection';\nimport {MatSelectionToggle} from './selection-toggle';\nimport {MatSelectionColumn} from './selection-column';\nimport {MatRowSelection} from './row-selection';\n\n@NgModule({\n  imports: [\n    MatTableModule,\n    MatCheckboxModule,\n    MatSelectAll,\n    MatSelection,\n    MatSelectionToggle,\n    MatSelectionColumn,\n    MatRowSelection,\n  ],\n  exports: [MatSelectAll, MatSelection, MatSelectionToggle, MatSelectionColumn, MatRowSelection],\n})\nexport class MatSelectionModule {}\n"],"names":["multiple","change","EventEmitter","ɵfac","i0","ɵɵngDeclareFactory","minVersion","version","ngImport","type","MatSelection","deps","target","ɵɵFactoryTarget","Directive","decorators","selector","Output","args","value","Input","_name","name","_columnDef","cell","_cell","providers","provide","CdkRowSelection","useExisting","MatRowSelection","inputs","alias","MatSelectionModule","NgModule","ɵɵngDeclareNgModule","imports","MatTableModule","MatCheckboxModule","MatSelectionToggle","MatSelectionColumn"],"mappings":"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"}