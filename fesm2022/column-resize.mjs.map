{"version":3,"file":"column-resize.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-experimental/column-resize/resize-strategy.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-experimental/column-resize/column-resize-directives/common.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-experimental/column-resize/column-resize-directives/column-resize.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-experimental/column-resize/column-resize-directives/column-resize-flex.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-experimental/column-resize/column-resize-directives/default-enabled-column-resize.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-experimental/column-resize/column-resize-directives/default-enabled-column-resize-flex.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-experimental/column-resize/overlay-handle.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-experimental/column-resize/resizable-directives/common.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-experimental/column-resize/resizable-directives/default-enabled-resizable.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-experimental/column-resize/resizable-directives/resizable.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/material-experimental/column-resize/column-resize-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, Provider} from '@angular/core';\n\nimport {\n  ResizeStrategy,\n  CdkFlexTableResizeStrategy,\n  TABLE_LAYOUT_FIXED_RESIZE_STRATEGY_PROVIDER,\n} from '@angular/cdk-experimental/column-resize';\n\nexport {TABLE_LAYOUT_FIXED_RESIZE_STRATEGY_PROVIDER};\n\n/**\n * Overrides CdkFlexTableResizeStrategy to match mat-column elements.\n */\n@Injectable()\nexport class MatFlexTableResizeStrategy extends CdkFlexTableResizeStrategy {\n  protected override getColumnCssClass(cssFriendlyColumnName: string): string {\n    return `mat-column-${cssFriendlyColumnName}`;\n  }\n}\n\nexport const FLEX_RESIZE_STRATEGY_PROVIDER: Provider = {\n  provide: ResizeStrategy,\n  useClass: MatFlexTableResizeStrategy,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Provider} from '@angular/core';\n\nimport {\n  _COALESCED_STYLE_SCHEDULER,\n  _CoalescedStyleScheduler,\n  ColumnResize,\n  ColumnResizeNotifier,\n  ColumnResizeNotifierSource,\n  HeaderRowEventDispatcher,\n} from '@angular/cdk-experimental/column-resize';\n\nimport {\n  TABLE_LAYOUT_FIXED_RESIZE_STRATEGY_PROVIDER,\n  FLEX_RESIZE_STRATEGY_PROVIDER,\n} from '../resize-strategy';\n\nconst PROVIDERS: Provider[] = [\n  ColumnResizeNotifier,\n  HeaderRowEventDispatcher,\n  ColumnResizeNotifierSource,\n  {provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler},\n];\nexport const TABLE_PROVIDERS: Provider[] = [\n  ...PROVIDERS,\n  TABLE_LAYOUT_FIXED_RESIZE_STRATEGY_PROVIDER,\n];\nexport const FLEX_PROVIDERS: Provider[] = [...PROVIDERS, FLEX_RESIZE_STRATEGY_PROVIDER];\n\nexport const TABLE_HOST_BINDINGS = {\n  'class': 'mat-column-resize-table',\n};\nexport const FLEX_HOST_BINDINGS = {\n  'class': 'mat-column-resize-flex',\n};\n\nexport abstract class AbstractMatColumnResize extends ColumnResize {\n  getTableHeight() {\n    return this.elementRef.nativeElement!.offsetHeight;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, ElementRef, NgZone, inject} from '@angular/core';\nimport {\n  ColumnResize,\n  ColumnResizeNotifier,\n  ColumnResizeNotifierSource,\n  HeaderRowEventDispatcher,\n} from '@angular/cdk-experimental/column-resize';\n\nimport {AbstractMatColumnResize, TABLE_HOST_BINDINGS, TABLE_PROVIDERS} from './common';\n\n/**\n * Explicitly enables column resizing for a table-based mat-table.\n * Individual columns must be annotated specifically.\n */\n@Directive({\n  selector: 'table[mat-table][columnResize]',\n  host: TABLE_HOST_BINDINGS,\n  providers: [...TABLE_PROVIDERS, {provide: ColumnResize, useExisting: MatColumnResize}],\n})\nexport class MatColumnResize extends AbstractMatColumnResize {\n  readonly columnResizeNotifier = inject(ColumnResizeNotifier);\n  readonly elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  protected readonly eventDispatcher = inject(HeaderRowEventDispatcher);\n  protected readonly ngZone = inject(NgZone);\n  protected readonly notifier = inject(ColumnResizeNotifierSource);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, ElementRef, NgZone, inject} from '@angular/core';\nimport {\n  ColumnResize,\n  ColumnResizeNotifier,\n  ColumnResizeNotifierSource,\n  HeaderRowEventDispatcher,\n} from '@angular/cdk-experimental/column-resize';\n\nimport {AbstractMatColumnResize, FLEX_HOST_BINDINGS, FLEX_PROVIDERS} from './common';\n\n/**\n * Explicitly enables column resizing for a flexbox-based mat-table.\n * Individual columns must be annotated specifically.\n */\n@Directive({\n  selector: 'mat-table[columnResize]',\n  host: FLEX_HOST_BINDINGS,\n  providers: [...FLEX_PROVIDERS, {provide: ColumnResize, useExisting: MatColumnResizeFlex}],\n})\nexport class MatColumnResizeFlex extends AbstractMatColumnResize {\n  readonly columnResizeNotifier = inject(ColumnResizeNotifier);\n  readonly elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  protected readonly eventDispatcher = inject(HeaderRowEventDispatcher);\n  protected readonly ngZone = inject(NgZone);\n  protected readonly notifier = inject(ColumnResizeNotifierSource);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, ElementRef, NgZone, inject} from '@angular/core';\nimport {\n  ColumnResize,\n  ColumnResizeNotifier,\n  ColumnResizeNotifierSource,\n  HeaderRowEventDispatcher,\n} from '@angular/cdk-experimental/column-resize';\n\nimport {AbstractMatColumnResize, TABLE_HOST_BINDINGS, TABLE_PROVIDERS} from './common';\n\n/**\n * Implicitly enables column resizing for a table-based mat-table.\n * Individual columns will be resizable unless opted out.\n */\n@Directive({\n  selector: 'table[mat-table]',\n  host: TABLE_HOST_BINDINGS,\n  providers: [\n    ...TABLE_PROVIDERS,\n    {provide: ColumnResize, useExisting: MatDefaultEnabledColumnResize},\n  ],\n})\nexport class MatDefaultEnabledColumnResize extends AbstractMatColumnResize {\n  readonly columnResizeNotifier = inject(ColumnResizeNotifier);\n  readonly elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  protected readonly eventDispatcher = inject(HeaderRowEventDispatcher);\n  protected readonly ngZone = inject(NgZone);\n  protected readonly notifier = inject(ColumnResizeNotifierSource);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, ElementRef, NgZone, inject} from '@angular/core';\nimport {\n  ColumnResize,\n  ColumnResizeNotifier,\n  ColumnResizeNotifierSource,\n  HeaderRowEventDispatcher,\n} from '@angular/cdk-experimental/column-resize';\n\nimport {AbstractMatColumnResize, FLEX_HOST_BINDINGS, FLEX_PROVIDERS} from './common';\n\n/**\n * Implicitly enables column resizing for a flexbox-based mat-table.\n * Individual columns will be resizable unless opted out.\n */\n@Directive({\n  selector: 'mat-table',\n  host: FLEX_HOST_BINDINGS,\n  providers: [\n    ...FLEX_PROVIDERS,\n    {provide: ColumnResize, useExisting: MatDefaultEnabledColumnResizeFlex},\n  ],\n})\nexport class MatDefaultEnabledColumnResizeFlex extends AbstractMatColumnResize {\n  readonly columnResizeNotifier = inject(ColumnResizeNotifier);\n  readonly elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  protected readonly eventDispatcher = inject(HeaderRowEventDispatcher);\n  protected readonly ngZone = inject(NgZone);\n  protected readonly notifier = inject(ColumnResizeNotifierSource);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  NgZone,\n  ViewChild,\n  ViewEncapsulation,\n  inject,\n  DOCUMENT,\n} from '@angular/core';\n\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  _COALESCED_STYLE_SCHEDULER,\n  _CoalescedStyleScheduler,\n  ColumnResize,\n  ColumnResizeNotifierSource,\n  HeaderRowEventDispatcher,\n  ResizeOverlayHandle,\n  ResizeRef,\n} from '@angular/cdk-experimental/column-resize';\n\nimport {AbstractMatColumnResize} from './column-resize-directives/common';\n\n/**\n * Component shown over the edge of a resizable column that is responsible\n * for handling column resize mouse events and displaying a vertical line along the column edge.\n */\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  host: {'class': 'mat-column-resize-overlay-thumb'},\n  template: '<div #top class=\"mat-column-resize-overlay-thumb-top\"></div>',\n})\nexport class MatColumnResizeOverlayHandle extends ResizeOverlayHandle {\n  protected readonly columnDef = inject(CdkColumnDef);\n  protected readonly columnResize = inject(ColumnResize);\n  protected readonly directionality = inject(Directionality);\n  protected readonly elementRef = inject(ElementRef);\n  protected readonly eventDispatcher = inject(HeaderRowEventDispatcher);\n  protected readonly ngZone = inject(NgZone);\n  protected readonly resizeNotifier = inject(ColumnResizeNotifierSource);\n  protected readonly resizeRef = inject(ResizeRef);\n  protected readonly styleScheduler = inject<_CoalescedStyleScheduler>(_COALESCED_STYLE_SCHEDULER);\n  protected readonly document = inject(DOCUMENT);\n\n  @ViewChild('top', {static: true}) topElement: ElementRef<HTMLElement>;\n\n  protected override updateResizeActive(active: boolean): void {\n    super.updateResizeActive(active);\n\n    const originHeight = this.resizeRef.origin.nativeElement.offsetHeight;\n    this.topElement.nativeElement.style.height = `${originHeight}px`;\n    this.resizeRef.overlayRef.updateSize({\n      height: active\n        ? (this.columnResize as AbstractMatColumnResize).getTableHeight()\n        : originHeight,\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Type} from '@angular/core';\nimport {Resizable} from '@angular/cdk-experimental/column-resize';\nimport {MatColumnResizeOverlayHandle} from '../overlay-handle';\n\nexport abstract class AbstractMatResizable extends Resizable<MatColumnResizeOverlayHandle> {\n  override minWidthPxInternal = 32;\n\n  protected override getInlineHandleCssClassName(): string {\n    return 'mat-resizable-handle';\n  }\n\n  protected override getOverlayHandleComponentType(): Type<MatColumnResizeOverlayHandle> {\n    return MatColumnResizeOverlayHandle;\n  }\n}\n\nexport const RESIZABLE_HOST_BINDINGS = {\n  'class': 'mat-resizable',\n};\n\nexport const RESIZABLE_INPUTS = [\n  {name: 'minWidthPx', alias: 'matResizableMinWidthPx'},\n  {name: 'maxWidthPx', alias: 'matResizableMaxWidthPx'},\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Injector,\n  NgZone,\n  ViewContainerRef,\n  ChangeDetectorRef,\n  inject,\n  DOCUMENT,\n} from '@angular/core';\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  _COALESCED_STYLE_SCHEDULER,\n  _CoalescedStyleScheduler,\n  ColumnResize,\n  ColumnResizeNotifierSource,\n  HeaderRowEventDispatcher,\n  ResizeStrategy,\n} from '@angular/cdk-experimental/column-resize';\n\nimport {AbstractMatResizable, RESIZABLE_HOST_BINDINGS, RESIZABLE_INPUTS} from './common';\n\n/**\n * Implicitly enables column resizing for a mat-header-cell unless the disableResize attribute\n * is present.\n */\n@Directive({\n  selector: 'mat-header-cell:not([disableResize]), th[mat-header-cell]:not([disableResize])',\n  host: RESIZABLE_HOST_BINDINGS,\n  inputs: RESIZABLE_INPUTS,\n})\nexport class MatDefaultResizable extends AbstractMatResizable {\n  protected readonly columnDef = inject(CdkColumnDef);\n  protected readonly columnResize = inject(ColumnResize);\n  protected readonly directionality = inject(Directionality);\n  protected readonly elementRef = inject(ElementRef);\n  protected readonly eventDispatcher = inject(HeaderRowEventDispatcher);\n  protected readonly injector = inject(Injector);\n  protected readonly ngZone = inject(NgZone);\n  protected readonly resizeNotifier = inject(ColumnResizeNotifierSource);\n  protected readonly resizeStrategy = inject(ResizeStrategy);\n  protected readonly styleScheduler = inject<_CoalescedStyleScheduler>(_COALESCED_STYLE_SCHEDULER);\n  protected readonly viewContainerRef = inject(ViewContainerRef);\n  protected readonly changeDetectorRef = inject(ChangeDetectorRef);\n  protected readonly document = inject(DOCUMENT);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Injector,\n  NgZone,\n  ViewContainerRef,\n  ChangeDetectorRef,\n  inject,\n  DOCUMENT,\n} from '@angular/core';\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  _COALESCED_STYLE_SCHEDULER,\n  _CoalescedStyleScheduler,\n  ColumnResize,\n  ColumnResizeNotifierSource,\n  HeaderRowEventDispatcher,\n  ResizeStrategy,\n} from '@angular/cdk-experimental/column-resize';\n\nimport {AbstractMatResizable, RESIZABLE_HOST_BINDINGS, RESIZABLE_INPUTS} from './common';\n\n/**\n * Explicitly enables column resizing for a mat-header-cell.\n */\n@Directive({\n  selector: 'mat-header-cell[resizable], th[mat-header-cell][resizable]',\n  host: RESIZABLE_HOST_BINDINGS,\n  inputs: RESIZABLE_INPUTS,\n})\nexport class MatResizable extends AbstractMatResizable {\n  protected readonly columnDef = inject(CdkColumnDef);\n  protected readonly columnResize = inject(ColumnResize);\n  protected readonly directionality = inject(Directionality);\n  protected readonly elementRef = inject(ElementRef);\n  protected readonly eventDispatcher = inject(HeaderRowEventDispatcher);\n  protected readonly injector = inject(Injector);\n  protected readonly ngZone = inject(NgZone);\n  protected readonly resizeNotifier = inject(ColumnResizeNotifierSource);\n  protected readonly resizeStrategy = inject(ResizeStrategy);\n  protected readonly styleScheduler = inject<_CoalescedStyleScheduler>(_COALESCED_STYLE_SCHEDULER);\n  protected readonly viewContainerRef = inject(ViewContainerRef);\n  protected readonly changeDetectorRef = inject(ChangeDetectorRef);\n  protected readonly document = inject(DOCUMENT);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\n\nimport {MatColumnResize} from './column-resize-directives/column-resize';\nimport {MatColumnResizeFlex} from './column-resize-directives/column-resize-flex';\nimport {MatDefaultEnabledColumnResize} from './column-resize-directives/default-enabled-column-resize';\nimport {MatDefaultEnabledColumnResizeFlex} from './column-resize-directives/default-enabled-column-resize-flex';\nimport {MatDefaultResizable} from './resizable-directives/default-enabled-resizable';\nimport {MatResizable} from './resizable-directives/resizable';\nimport {MatColumnResizeOverlayHandle} from './overlay-handle';\n\nconst ENTRY_COMMON_COMPONENTS = [MatColumnResizeOverlayHandle];\n\n@NgModule({\n  imports: [...ENTRY_COMMON_COMPONENTS],\n  exports: ENTRY_COMMON_COMPONENTS,\n})\nexport class MatColumnResizeCommonModule {}\n\nconst IMPORTS = [OverlayModule, MatColumnResizeCommonModule];\n\n@NgModule({\n  imports: [\n    ...IMPORTS,\n    MatDefaultEnabledColumnResize,\n    MatDefaultEnabledColumnResizeFlex,\n    MatDefaultResizable,\n  ],\n  exports: [MatDefaultEnabledColumnResize, MatDefaultEnabledColumnResizeFlex, MatDefaultResizable],\n})\nexport class MatDefaultEnabledColumnResizeModule {}\n\n@NgModule({\n  imports: [...IMPORTS, MatColumnResize, MatColumnResizeFlex, MatResizable],\n  exports: [MatColumnResize, MatColumnResizeFlex, MatResizable],\n})\nexport class MatColumnResizeModule {}\n"],"names":["MatFlexTableResizeStrategy","CdkFlexTableResizeStrategy","ɵfac","i0","ɵɵngDeclareFactory","minVersion","version","ngImport","type","deps","target","ɵɵFactoryTarget","Injectable","provide","_COALESCED_STYLE_SCHEDULER","useClass","_CoalescedStyleScheduler","MatColumnResize","AbstractMatColumnResize","Directive","MatColumnResizeFlex","MatDefaultEnabledColumnResize","columnResizeNotifier","inject","ColumnResizeNotifier","eventDispatcher","HeaderRowEventDispatcher","selector","host","TABLE_HOST_BINDINGS","providers","MatDefaultEnabledColumnResizeFlex","FLEX_HOST_BINDINGS","MatColumnResizeOverlayHandle","ResizeOverlayHandle","columnDef","CdkColumnDef","ngZone","NgZone","resizeRef","ResizeRef","getOverlayHandleComponentType","RESIZABLE_HOST_BINDINGS","MatDefaultResizable","directionality","Directionality","MatResizable","AbstractMatResizable","columnResize","ColumnResize","elementRef","ElementRef","NgModule","MatDefaultEnabledColumnResizeModule","exports","decorators","imports","IMPORTS","MatColumnResizeModule","OverlayModule","MatColumnResizeCommonModule","ɵɵngDeclareInjector"],"mappings":"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"}