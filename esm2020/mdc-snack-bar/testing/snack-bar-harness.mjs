/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { HarnessPredicate } from '@angular/cdk/testing';
import { MatSnackBarHarness as BaseMatSnackBarHarness, } from '@angular/material/snack-bar/testing';
/** Harness for interacting with an MDC-based mat-snack-bar in tests. */
export class MatSnackBarHarness extends BaseMatSnackBarHarness {
    constructor() {
        super(...arguments);
        this._messageSelector = '.mdc-snackbar__label';
        this._actionButtonSelector = '.mat-mdc-snack-bar-action';
    }
    /**
     * Gets a `HarnessPredicate` that can be used to search for a snack bar with specific attributes.
     * @param options Options for filtering which snack bar instances are considered a match.
     * @return a `HarnessPredicate` configured with the given options.
     */
    static with(options = {}) {
        return new HarnessPredicate(this, options);
    }
    async _assertContentAnnotated() { }
}
// Developers can provide a custom component or template for the snackbar. The canonical snack-bar
// parent is the "MatSnackBarContainer". We use `:not([mat-exit])` to exclude snack bars that
// are in the process of being dismissed, because the element only gets removed after the
// animation is finished and since it runs outside of Angular, we don't have a way of being
// notified when it's done.
/** The selector for the host element of a `MatSnackBar` instance. */
MatSnackBarHarness.hostSelector = '.mat-mdc-snack-bar-container:not([mat-exit])';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25hY2stYmFyLWhhcm5lc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbWF0ZXJpYWwtZXhwZXJpbWVudGFsL21kYy1zbmFjay1iYXIvdGVzdGluZy9zbmFjay1iYXItaGFybmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQThCLGdCQUFnQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDbkYsT0FBTyxFQUNMLGtCQUFrQixJQUFJLHNCQUFzQixHQUU3QyxNQUFNLHFDQUFxQyxDQUFDO0FBRTdDLHdFQUF3RTtBQUN4RSxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsc0JBQXNCO0lBQTlEOztRQVFxQixxQkFBZ0IsR0FBRyxzQkFBc0IsQ0FBQztRQUMxQywwQkFBcUIsR0FBRywyQkFBMkIsQ0FBQztJQWV6RSxDQUFDO0lBYkM7Ozs7T0FJRztJQUNILE1BQU0sQ0FBVSxJQUFJLENBRWxCLFVBQWtDLEVBQUU7UUFFcEMsT0FBTyxJQUFJLGdCQUFnQixDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRWtCLEtBQUssQ0FBQyx1QkFBdUIsS0FBSSxDQUFDOztBQXRCckQsa0dBQWtHO0FBQ2xHLDZGQUE2RjtBQUM3Rix5RkFBeUY7QUFDekYsMkZBQTJGO0FBQzNGLDJCQUEyQjtBQUMzQixxRUFBcUU7QUFDckQsK0JBQVksR0FBRyw4Q0FBOEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0NvbXBvbmVudEhhcm5lc3NDb25zdHJ1Y3RvciwgSGFybmVzc1ByZWRpY2F0ZX0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Rlc3RpbmcnO1xuaW1wb3J0IHtcbiAgTWF0U25hY2tCYXJIYXJuZXNzIGFzIEJhc2VNYXRTbmFja0Jhckhhcm5lc3MsXG4gIFNuYWNrQmFySGFybmVzc0ZpbHRlcnMsXG59IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NuYWNrLWJhci90ZXN0aW5nJztcblxuLyoqIEhhcm5lc3MgZm9yIGludGVyYWN0aW5nIHdpdGggYW4gTURDLWJhc2VkIG1hdC1zbmFjay1iYXIgaW4gdGVzdHMuICovXG5leHBvcnQgY2xhc3MgTWF0U25hY2tCYXJIYXJuZXNzIGV4dGVuZHMgQmFzZU1hdFNuYWNrQmFySGFybmVzcyB7XG4gIC8vIERldmVsb3BlcnMgY2FuIHByb3ZpZGUgYSBjdXN0b20gY29tcG9uZW50IG9yIHRlbXBsYXRlIGZvciB0aGUgc25hY2tiYXIuIFRoZSBjYW5vbmljYWwgc25hY2stYmFyXG4gIC8vIHBhcmVudCBpcyB0aGUgXCJNYXRTbmFja0JhckNvbnRhaW5lclwiLiBXZSB1c2UgYDpub3QoW21hdC1leGl0XSlgIHRvIGV4Y2x1ZGUgc25hY2sgYmFycyB0aGF0XG4gIC8vIGFyZSBpbiB0aGUgcHJvY2VzcyBvZiBiZWluZyBkaXNtaXNzZWQsIGJlY2F1c2UgdGhlIGVsZW1lbnQgb25seSBnZXRzIHJlbW92ZWQgYWZ0ZXIgdGhlXG4gIC8vIGFuaW1hdGlvbiBpcyBmaW5pc2hlZCBhbmQgc2luY2UgaXQgcnVucyBvdXRzaWRlIG9mIEFuZ3VsYXIsIHdlIGRvbid0IGhhdmUgYSB3YXkgb2YgYmVpbmdcbiAgLy8gbm90aWZpZWQgd2hlbiBpdCdzIGRvbmUuXG4gIC8qKiBUaGUgc2VsZWN0b3IgZm9yIHRoZSBob3N0IGVsZW1lbnQgb2YgYSBgTWF0U25hY2tCYXJgIGluc3RhbmNlLiAqL1xuICBzdGF0aWMgb3ZlcnJpZGUgaG9zdFNlbGVjdG9yID0gJy5tYXQtbWRjLXNuYWNrLWJhci1jb250YWluZXI6bm90KFttYXQtZXhpdF0pJztcbiAgcHJvdGVjdGVkIG92ZXJyaWRlIF9tZXNzYWdlU2VsZWN0b3IgPSAnLm1kYy1zbmFja2Jhcl9fbGFiZWwnO1xuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2FjdGlvbkJ1dHRvblNlbGVjdG9yID0gJy5tYXQtbWRjLXNuYWNrLWJhci1hY3Rpb24nO1xuXG4gIC8qKlxuICAgKiBHZXRzIGEgYEhhcm5lc3NQcmVkaWNhdGVgIHRoYXQgY2FuIGJlIHVzZWQgdG8gc2VhcmNoIGZvciBhIHNuYWNrIGJhciB3aXRoIHNwZWNpZmljIGF0dHJpYnV0ZXMuXG4gICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIGZpbHRlcmluZyB3aGljaCBzbmFjayBiYXIgaW5zdGFuY2VzIGFyZSBjb25zaWRlcmVkIGEgbWF0Y2guXG4gICAqIEByZXR1cm4gYSBgSGFybmVzc1ByZWRpY2F0ZWAgY29uZmlndXJlZCB3aXRoIHRoZSBnaXZlbiBvcHRpb25zLlxuICAgKi9cbiAgc3RhdGljIG92ZXJyaWRlIHdpdGg8VCBleHRlbmRzIEJhc2VNYXRTbmFja0Jhckhhcm5lc3M+KFxuICAgIHRoaXM6IENvbXBvbmVudEhhcm5lc3NDb25zdHJ1Y3RvcjxUPixcbiAgICBvcHRpb25zOiBTbmFja0Jhckhhcm5lc3NGaWx0ZXJzID0ge30sXG4gICk6IEhhcm5lc3NQcmVkaWNhdGU8VD4ge1xuICAgIHJldHVybiBuZXcgSGFybmVzc1ByZWRpY2F0ZSh0aGlzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvdmVycmlkZSBhc3luYyBfYXNzZXJ0Q29udGVudEFubm90YXRlZCgpIHt9XG59XG4iXX0=