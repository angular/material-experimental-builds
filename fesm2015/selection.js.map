{"version":3,"file":"selection.js","sources":["../../../../../../src/material-experimental/selection/selection.ts","../../../../../../src/material-experimental/selection/select-all.ts","../../../../../../src/material-experimental/selection/selection-toggle.ts","../../../../../../src/material-experimental/selection/selection-column.ts","../../../../../../src/material-experimental/selection/row-selection.ts","../../../../../../src/material-experimental/selection/selection-module.ts","../../../../../../src/material-experimental/selection/public-api.ts","../../../../../../src/material-experimental/selection/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkSelection, SelectionChange} from '@angular/cdk-experimental/selection';\nimport {Directive, Input, Output, EventEmitter} from '@angular/core';\n\n\n/**\n * Manages the selection states of the items and provides methods to check and update the selection\n * states.\n * It must be applied to the parent element if `matSelectionToggle`, `matSelectAll`,\n * `matRowSelection` and `matSelectionColumn` are applied.\n */\n@Directive({\n  selector: '[matSelection]',\n  exportAs: 'matSelection',\n  providers: [{provide: CdkSelection, useExisting: MatSelection}]\n})\nexport class MatSelection<T> extends CdkSelection<T> {\n  /** Whether to support multiple selection */\n  @Input('matSelectionMultiple') multiple: boolean;\n\n  /** Emits when selection changes. */\n  @Output('matSelectionChange') change = new EventEmitter<SelectionChange<T>>();\n}\n\n/**\n * Represents the change in the selection set.\n */\nexport {SelectionChange} from '@angular/cdk-experimental/selection';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkSelectAll} from '@angular/cdk-experimental/selection';\nimport {Directive} from '@angular/core';\n\n\n/**\n * Makes the element a select-all toggle.\n *\n * Must be used within a parent `MatSelection` directive. It toggles the selection states\n * of all the selection toggles connected with the `MatSelection` directive.\n * If the element implements `ControlValueAccessor`, e.g. `MatCheckbox`, the directive\n * automatically connects it with the select-all state provided by the `MatSelection` directive. If\n * not, use `checked` to get the checked state, `indeterminate` to get the indeterminate state,\n * and `toggle()` to change the selection state.\n */\n@Directive({\n  selector: '[matSelectAll]',\n  exportAs: 'matSelectAll',\n  providers: [{provide: CdkSelectAll, useExisting: MatSelectAll}]\n})\nexport class MatSelectAll<T> extends CdkSelectAll<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkSelectionToggle} from '@angular/cdk-experimental/selection';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Makes the element a selection toggle.\n *\n * Must be used within a parent `MatSelection` directive.\n * Must be provided with the value. If `trackBy` is used on `MatSelection`, the index of the value\n * is required. If the element implements `ControlValueAccessor`, e.g. `MatCheckbox`, the directive\n * automatically connects it with the selection state provided by the `MatSelection` directive. If\n * not, use `checked$` to get the checked state of the value, and `toggle()` to change the selection\n * state.\n */\n@Directive({\n  selector: '[matSelectionToggle]',\n  exportAs: 'matSelectionToggle',\n  providers: [{provide: CdkSelectionToggle, useExisting: MatSelectionToggle}]\n})\nexport class MatSelectionToggle<T> extends CdkSelectionToggle<T> {\n  /** The value that is associated with the toggle */\n  @Input('matSelectionToggleValue') value: T;\n\n  /** The index of the value in the list. Required when used with `trackBy` */\n  @Input('matSelectionToggleIndex') index: number|undefined;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatCellDef, MatColumnDef, MatHeaderCellDef, MatTable} from '@angular/material/table';\nimport {\n  Component,\n  Input,\n  isDevMode,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewChild,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\n\nimport {MatSelection} from './selection';\n\n/**\n * Column that adds row selecting checkboxes and a select-all checkbox if `matSelectionMultiple` is\n * `true`.\n *\n * Must be used within a parent `MatSelection` directive.\n */\n@Component({\n  selector: 'mat-selection-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef class=\"mat-selection-column-header\">\n        <mat-checkbox *ngIf=\"selection.multiple\"\n            matSelectAll\n            #allToggler=\"matSelectAll\"\n            [indeterminate]=\"allToggler.indeterminate | async\"></mat-checkbox>\n      </th>\n      <td mat-cell *matCellDef=\"let row; let i = $index\" class=\"mat-selection-column-cell\">\n        <mat-checkbox\n            matSelectionToggle\n            [matSelectionToggleValue]=\"row\"\n            [matSelectionToggleIndex]=\"i\"></mat-checkbox>\n      </td>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['selection-column.css'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSelectionColumn<T> implements OnInit, OnDestroy {\n  /** Column name that should be used to reference this column. */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n  set name(name: string) {\n    this._name = name;\n\n    this._syncColumnDefName();\n  }\n  private _name: string;\n\n  @ViewChild(MatColumnDef, {static: true}) private readonly _columnDef: MatColumnDef;\n  @ViewChild(MatCellDef, {static: true}) private readonly _cell: MatCellDef;\n  @ViewChild(MatHeaderCellDef, {static: true}) private readonly _headerCell: MatHeaderCellDef;\n\n  constructor(\n      @Optional() @Inject(MatTable) private _table: MatTable<T>,\n      @Optional() @Inject(MatSelection) readonly selection: MatSelection<T>,\n  ) {}\n\n  ngOnInit() {\n    if (!this.selection && isDevMode()) {\n      throw Error('MatSelectionColumn: missing MatSelection in the parent');\n    }\n\n    this._syncColumnDefName();\n\n    if (this._table) {\n      this._columnDef.cell = this._cell;\n      this._columnDef.headerCell = this._headerCell;\n      this._table.addColumnDef(this._columnDef);\n    } else if (isDevMode()) {\n      throw Error('MatSelectionColumn: missing parent table');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._table) {\n      this._table.removeColumnDef(this._columnDef);\n    }\n  }\n\n  private _syncColumnDefName() {\n    if (this._columnDef) {\n      this._columnDef.name = this._name;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkRowSelection} from '@angular/cdk-experimental/selection';\nimport {Input, Directive} from '@angular/core';\n\n\n/**\n * Applies `mat-selected` class and `aria-selected` to an element.\n *\n * Must be used within a parent `MatSelection` directive.\n * Must be provided with the value. The index is required if `trackBy` is used on the `CdkSelection`\n * directive.\n */\n@Directive({\n  selector: '[matRowSelection]',\n  host: {\n    '[class.mat-selected]': '_selection.isSelected(this.value, this.index)',\n    '[attr.aria-selected]': '_selection.isSelected(this.value, this.index)',\n  },\n  providers: [{provide: CdkRowSelection, useExisting: MatRowSelection}]\n})\nexport class MatRowSelection<T> extends CdkRowSelection<T> {\n  /** The value that is associated with the row */\n  @Input('matRowSelectionValue') value: T;\n\n  /** The index of the value in the list. Required when used with `trackBy` */\n  @Input('matRowSelectionIndex') index: number|undefined;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(yifange): Move the table-specific code to a separate module from the other selection\n// behaviors once we move it out of experiemental.\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatSelectAll} from './select-all';\nimport {MatSelection} from './selection';\nimport {MatSelectionToggle} from './selection-toggle';\nimport {MatSelectionColumn} from './selection-column';\nimport {MatRowSelection} from './row-selection';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatCheckboxModule,\n  ],\n  exports: [\n    MatSelectAll,\n    MatSelection,\n    MatSelectionToggle,\n    MatSelectionColumn,\n    MatRowSelection,\n  ],\n  declarations: [\n    MatSelectAll,\n    MatSelection,\n    MatSelectionToggle,\n    MatSelectionColumn,\n    MatRowSelection,\n  ],\n})\nexport class MatSelectionModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './selection';\nexport * from './select-all';\nexport * from './selection-toggle';\nexport * from './selection-column';\nexport * from './row-selection';\nexport * from './selection-module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}