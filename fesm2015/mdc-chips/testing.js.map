{"version":3,"file":"mdc-chips__testing.js","sources":["../../../../../../src/material-experimental/mdc-chips/testing/chip-input-harness.ts","../../../../../../src/material-experimental/mdc-chips/testing/chip-harness.ts","../../../../../../src/material-experimental/mdc-chips/testing/chip-row-harness.ts","../../../../../../src/material-experimental/mdc-chips/testing/chip-grid-harness.ts","../../../../../../src/material-experimental/mdc-chips/testing/chip-harness-filters.ts","../../../../../../src/material-experimental/mdc-chips/testing/chip-option-harness.ts","../../../../../../src/material-experimental/mdc-chips/testing/chip-listbox-harness.ts","../../../../../../src/material-experimental/mdc-chips/testing/chip-set-harness.ts","../../../../../../src/material-experimental/mdc-chips/testing/public-api.ts","../../../../../../src/material-experimental/mdc-chips/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {ChipInputHarnessFilters} from './chip-harness-filters';\n\n/** Harness for interacting with a grid's chip input in tests. */\nexport class MatChipInputHarness extends ComponentHarness {\n  static hostSelector = '.mat-mdc-chip-input';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a chip input with specific attributes.\n   */\n  static with(options: ChipInputHarnessFilters = {}): HarnessPredicate<MatChipInputHarness> {\n    return new HarnessPredicate(MatChipInputHarness, options);\n  }\n\n  /** Gets a promise for the disabled state. */\n  async isDisabled(): Promise<boolean> {\n    return await ((await this.host()).getAttribute('disabled')) === 'true';\n  }\n\n  /** Gets a promise for the placeholder text. */\n  async getPlaceholder(): Promise<string|null> {\n    return (await this.host()).getAttribute('placeholder');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate, TestKey} from '@angular/cdk/testing';\nimport {ChipHarnessFilters} from './chip-harness-filters';\n\n/** Harness for interacting with a mat-chip in tests. */\nexport class MatChipHarness extends ComponentHarness {\n  static hostSelector = '.mat-mdc-basic-chip, .mat-mdc-chip';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a chip with specific attributes.\n   */\n  // Note(mmalerba): generics are used as a workaround for lack of polymorphic `this` in static\n  // methods. See https://github.com/microsoft/TypeScript/issues/5863\n  static with<T extends typeof MatChipHarness>(this: T, options: ChipHarnessFilters = {}):\n      HarnessPredicate<InstanceType<T>> {\n    return new HarnessPredicate(MatChipHarness, options) as\n        unknown as HarnessPredicate<InstanceType<T>>;\n  }\n\n  /** Gets a promise for the text content the option. */\n  async getText(): Promise<string> {\n    return (await this.host()).text({\n      exclude: '.mat-mdc-chip-avatar, .mat-mdc-chip-trailing-icon, .mat-icon'\n    });\n  }\n\n  /** Delete a chip from the set. */\n  async remove(): Promise<void> {\n    const hostEl = await this.host();\n    await hostEl.sendKeys!(TestKey.DELETE);\n    await hostEl.dispatchEvent!('transitionend', {propertyName: 'width'});\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {ChipRowHarnessFilters} from './chip-harness-filters';\nimport {MatChipHarness} from './chip-harness';\n\n/** Harness for interacting with a mat-chip-row in tests. */\nexport class MatChipRowHarness extends MatChipHarness {\n  static hostSelector = '.mat-mdc-chip-row';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a chip row with specific attributes.\n   */\n  // Note(mmalerba): generics are used as a workaround for lack of polymorphic `this` in static\n  // methods. See https://github.com/microsoft/TypeScript/issues/5863\n  static with<T extends typeof MatChipHarness>(\n      this: T, options: ChipRowHarnessFilters = {}): HarnessPredicate<InstanceType<T>> {\n    return new HarnessPredicate(MatChipRowHarness, options) as\n        unknown as HarnessPredicate<InstanceType<T>>;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {ChipGridHarnessFilters} from './chip-harness-filters';\nimport {MatChipInputHarness} from './chip-input-harness';\nimport {MatChipRowHarness} from './chip-row-harness';\n\n/** Harness for interacting with a mat-chip-grid in tests. */\nexport class MatChipGridHarness extends ComponentHarness {\n  static hostSelector = '.mat-mdc-chip-grid';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a chip grid with specific attributes.\n   */\n  static with(options: ChipGridHarnessFilters = {}): HarnessPredicate<MatChipGridHarness> {\n    return new HarnessPredicate(MatChipGridHarness, options);\n  }\n\n  private _rows = this.locatorForAll(MatChipRowHarness);\n  private _input = this.locatorFor(MatChipInputHarness);\n\n  /** Gets promise of the harnesses for the chip rows. */\n  async getRows(): Promise<MatChipRowHarness[]> {\n    return await this._rows();\n  }\n\n  /** Gets promise of the chip text input harness. */\n  async getTextInput(): Promise<MatChipInputHarness|null> {\n    return await this._input();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseHarnessFilters} from '@angular/cdk/testing';\n\n// TODO(mmalerba): Add additional options that make sense for each harness type.\n\nexport interface ChipGridHarnessFilters extends BaseHarnessFilters {}\n\nexport interface ChipHarnessFilters extends BaseHarnessFilters {}\n\nexport interface ChipInputHarnessFilters extends BaseHarnessFilters {}\n\nexport interface ChipListboxHarnessFilters extends BaseHarnessFilters {}\n\nexport interface ChipOptionHarnessFilters extends ChipHarnessFilters {}\n\nexport interface ChipRowHarnessFilters extends ChipHarnessFilters {}\n\nexport interface ChipSetHarnessFilters extends BaseHarnessFilters {}\n\nexport interface ChipRemoveHarnessFilters extends BaseHarnessFilters {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {MatChipHarness} from './chip-harness';\nimport {ChipOptionHarnessFilters} from './chip-harness-filters';\n\n/** Harness for interacting with a mat-chip-option in tests. */\nexport class MatChipOptionHarness extends MatChipHarness {\n  static hostSelector = '.mat-mdc-chip-option';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a chip option with specific\n   * attributes.\n   */\n  // Note(mmalerba): generics are used as a workaround for lack of polymorphic `this` in static\n  // methods. See https://github.com/microsoft/TypeScript/issues/5863\n  static with<T extends typeof MatChipHarness>(\n      this: T, options: ChipOptionHarnessFilters = {}): HarnessPredicate<InstanceType<T>> {\n    return new HarnessPredicate(MatChipOptionHarness, options) as\n        unknown as HarnessPredicate<InstanceType<T>>;\n  }\n\n  /** Gets a promise for the selected state. */\n  async isSelected(): Promise<boolean> {\n    return await ((await this.host()).getAttribute('aria-selected')) === 'true';\n  }\n\n  /** Gets a promise for the disabled state. */\n  async isDisabled(): Promise<boolean> {\n    return await ((await this.host()).getAttribute('aria-disabled')) === 'true';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {ChipListboxHarnessFilters} from './chip-harness-filters';\nimport {MatChipOptionHarness} from './chip-option-harness';\n\n/** Harness for interacting with a mat-chip-listbox in tests. */\nexport class MatChipListboxHarness extends ComponentHarness {\n  static hostSelector = '.mat-mdc-chip-listbox';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a chip listbox with specific\n   * attributes.\n   */\n  static with(options: ChipListboxHarnessFilters = {}): HarnessPredicate<MatChipListboxHarness> {\n    return new HarnessPredicate(MatChipListboxHarness, options);\n  }\n\n  private _options = this.locatorForAll(MatChipOptionHarness);\n\n  /** Gets promise of the harnesses for the chip options in the listbox. */\n  async getOptions(): Promise<MatChipOptionHarness[]> {\n    return await this._options();\n  }\n\n  /** Gets promise of the selected options. */\n  async getSelected(): Promise<MatChipOptionHarness[]> {\n    const options = await this._options();\n    return Promise.all(options.map(o => o.isSelected())).then(isSelectedStates => {\n      const selectedOptions: MatChipOptionHarness[] = [];\n      isSelectedStates.forEach((isSelectedOption, index) => {\n        if (isSelectedOption) {\n          selectedOptions.push(options[index]);\n        }\n      });\n      return selectedOptions;\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {MatChipHarness} from './chip-harness';\nimport {ChipSetHarnessFilters} from './chip-harness-filters';\n\n/** Harness for interacting with a mat-chip-set in tests. */\nexport class MatChipSetHarness extends ComponentHarness {\n  static hostSelector = '.mat-mdc-chip-set';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a chip set with specific attributes.\n   */\n  static with(options: ChipSetHarnessFilters = {}): HarnessPredicate<MatChipSetHarness> {\n    return new HarnessPredicate(MatChipSetHarness, options);\n  }\n\n  private _chips = this.locatorForAll(MatChipHarness);\n\n  /** Gets promise of the harnesses for the chips. */\n  async getChips(): Promise<MatChipHarness[]> {\n    return await this._chips();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './chip-grid-harness';\nexport * from './chip-harness';\nexport * from './chip-harness-filters';\nexport * from './chip-input-harness';\nexport * from './chip-listbox-harness';\nexport * from './chip-option-harness';\nexport * from './chip-row-harness';\nexport * from './chip-set-harness';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}