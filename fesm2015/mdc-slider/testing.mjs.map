{"version":3,"file":"testing.mjs","sources":["../../../../../../../src/material-experimental/mdc-slider/testing/slider-thumb-harness.ts","../../../../../../../src/material-experimental/mdc-slider/testing/slider-harness.ts","../../../../../../../src/material-experimental/mdc-slider/testing/public-api.ts","../../../../../../../src/material-experimental/mdc-slider/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ComponentHarness, HarnessPredicate, parallel} from '@angular/cdk/testing';\nimport {SliderThumbHarnessFilters, ThumbPosition} from './slider-harness-filters';\n\n/** Harness for interacting with a thumb inside of a Material slider in tests. */\nexport class MatSliderThumbHarness extends ComponentHarness {\n  static hostSelector =\n    'input[matSliderThumb], input[matSliderStartThumb], input[matSliderEndThumb]';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatSliderThumbHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which thumb instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: SliderThumbHarnessFilters = {}): HarnessPredicate<MatSliderThumbHarness> {\n    return new HarnessPredicate(MatSliderThumbHarness, options).addOption(\n      'position',\n      options.position,\n      async (harness, value) => {\n        return (await harness.getPosition()) === value;\n      },\n    );\n  }\n\n  /** Gets the position of the thumb inside the slider. */\n  async getPosition(): Promise<ThumbPosition> {\n    // Meant to mimic MDC's logic where `matSliderThumb` is treated as END.\n    const isStart = (await (await this.host()).getAttribute('matSliderStartThumb')) != null;\n    return isStart ? ThumbPosition.START : ThumbPosition.END;\n  }\n\n  /** Gets the value of the thumb. */\n  async getValue(): Promise<number> {\n    return await (await this.host()).getProperty<number>('valueAsNumber');\n  }\n\n  /** Sets the value of the thumb. */\n  async setValue(newValue: number): Promise<void> {\n    const input = await this.host();\n\n    // Since this is a range input, we can't simulate the user interacting with it so we set the\n    // value directly and dispatch a couple of fake events to ensure that everything fires.\n    await input.setInputValue(newValue + '');\n    await input.dispatchEvent('input');\n    await input.dispatchEvent('change');\n  }\n\n  /** Gets the current percentage value of the slider. */\n  async getPercentage(): Promise<number> {\n    const [value, min, max] = await parallel(() => [\n      this.getValue(),\n      this.getMinValue(),\n      this.getMaxValue(),\n    ]);\n\n    return (value - min) / (max - min);\n  }\n\n  /** Gets the maximum value of the thumb. */\n  async getMaxValue(): Promise<number> {\n    return coerceNumberProperty(await (await this.host()).getProperty<number>('max'));\n  }\n\n  /** Gets the minimum value of the thumb. */\n  async getMinValue(): Promise<number> {\n    return coerceNumberProperty(await (await this.host()).getProperty<number>('min'));\n  }\n\n  /** Gets the text representation of the slider's value. */\n  async getDisplayValue(): Promise<string> {\n    return (await (await this.host()).getAttribute('aria-valuetext')) || '';\n  }\n\n  /** Whether the thumb is disabled. */\n  async isDisabled(): Promise<boolean> {\n    return (await this.host()).getProperty<boolean>('disabled');\n  }\n\n  /** Gets the name of the thumb. */\n  async getName(): Promise<string> {\n    return await (await this.host()).getProperty<string>('name');\n  }\n\n  /** Gets the id of the thumb. */\n  async getId(): Promise<string> {\n    return await (await this.host()).getProperty<string>('id');\n  }\n\n  /**\n   * Focuses the thumb and returns a promise that indicates when the\n   * action is complete.\n   */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /**\n   * Blurs the thumb and returns a promise that indicates when the\n   * action is complete.\n   */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Whether the thumb is focused. */\n  async isFocused(): Promise<boolean> {\n    return (await this.host()).isFocused();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {SliderHarnessFilters, ThumbPosition} from './slider-harness-filters';\nimport {MatSliderThumbHarness} from './slider-thumb-harness';\n\n/** Harness for interacting with a MDC mat-slider in tests. */\nexport class MatSliderHarness extends ComponentHarness {\n  static hostSelector = '.mat-mdc-slider';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatSliderHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which input instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: SliderHarnessFilters = {}): HarnessPredicate<MatSliderHarness> {\n    return new HarnessPredicate(MatSliderHarness, options).addOption(\n      'isRange',\n      options.isRange,\n      async (harness, value) => {\n        return (await harness.isRange()) === value;\n      },\n    );\n  }\n\n  /** Gets the start thumb of the slider (only applicable for range sliders). */\n  async getStartThumb(): Promise<MatSliderThumbHarness> {\n    if (!(await this.isRange())) {\n      throw Error(\n        '`getStartThumb` is only applicable for range sliders. ' +\n          'Did you mean to use `getEndThumb`?',\n      );\n    }\n    return this.locatorFor(MatSliderThumbHarness.with({position: ThumbPosition.START}))();\n  }\n\n  /** Gets the thumb (for single point sliders), or the end thumb (for range sliders). */\n  async getEndThumb(): Promise<MatSliderThumbHarness> {\n    return this.locatorFor(MatSliderThumbHarness.with({position: ThumbPosition.END}))();\n  }\n\n  /** Gets whether the slider is a range slider. */\n  async isRange(): Promise<boolean> {\n    return await (await this.host()).hasClass('mdc-slider--range');\n  }\n\n  /** Gets whether the slider is disabled. */\n  async isDisabled(): Promise<boolean> {\n    return await (await this.host()).hasClass('mdc-slider--disabled');\n  }\n\n  /** Gets the value step increments of the slider. */\n  async getStep(): Promise<number> {\n    // The same step value is forwarded to both thumbs.\n    const startHost = await (await this.getEndThumb()).host();\n    return coerceNumberProperty(await startHost.getProperty<string>('step'));\n  }\n\n  /** Gets the maximum value of the slider. */\n  async getMaxValue(): Promise<number> {\n    return (await this.getEndThumb()).getMaxValue();\n  }\n\n  /** Gets the minimum value of the slider. */\n  async getMinValue(): Promise<number> {\n    const startThumb = (await this.isRange())\n      ? await this.getStartThumb()\n      : await this.getEndThumb();\n    return startThumb.getMinValue();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './slider-harness';\nexport * from './slider-thumb-harness';\nexport * from './slider-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}