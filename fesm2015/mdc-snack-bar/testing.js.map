{"version":3,"file":"mdc-snack-bar__testing.js","sources":["../../../../../../src/material-experimental/mdc-snack-bar/testing/snack-bar-harness.ts","../../../../../../src/material-experimental/mdc-snack-bar/testing/public-api.ts","../../../../../../src/material-experimental/mdc-snack-bar/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {\n  MatSnackBarHarness as BaseMatSnackBarHarness,\n  SnackBarHarnessFilters,\n} from '@angular/material/snack-bar/testing';\n\n/** Harness for interacting with an MDC-based mat-snack-bar in tests. */\nexport class MatSnackBarHarness extends BaseMatSnackBarHarness {\n  // Developers can provide a custom component or template for the snackbar. The canonical snack-bar\n  // parent is the \"MatSnackBarContainer\". We use `:not([mat-exit])` to exclude snack bars that\n  // are in the process of being dismissed, because the element only gets removed after the\n  // animation is finished and since it runs outside of Angular, we don't have a way of being\n  // notified when it's done.\n  /** The selector for the host element of a `MatSnackBar` instance. */\n  static hostSelector = '.mat-mdc-snack-bar-container:not([mat-exit])';\n  protected _messageSelector = '.mat-mdc-simple-snack-bar .mat-mdc-snack-bar-label';\n  protected _simpleSnackBarSelector = '.mat-mdc-simple-snack-bar';\n  protected _actionButtonSelector = '.mat-mdc-simple-snack-bar .mat-mdc-snack-bar-action';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatSnackBarHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which snack bar instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: SnackBarHarnessFilters = {}): HarnessPredicate<BaseMatSnackBarHarness> {\n    return new HarnessPredicate<BaseMatSnackBarHarness>(MatSnackBarHarness, options);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './snack-bar-harness';\nexport {SnackBarHarnessFilters} from '@angular/material/snack-bar/testing';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":["BaseMatSnackBarHarness"],"mappings":";;;AAAA;;;;;;;AAcA;MACa,kBAAmB,SAAQA,oBAAsB;IAA9D;;QAQY,qBAAgB,GAAG,oDAAoD,CAAC;QACxE,4BAAuB,GAAG,2BAA2B,CAAC;QACtD,0BAAqB,GAAG,qDAAqD,CAAC;KAWzF;;;;;;;IAHC,OAAO,IAAI,CAAC,UAAkC,EAAE;QAC9C,OAAO,IAAI,gBAAgB,CAAyB,kBAAkB,EAAE,OAAO,CAAC,CAAC;KAClF;;AAnBD;AACA;AACA;AACA;AACA;AACA;AACO,+BAAY,GAAG,8CAA8C;;ACtBtE;;;;;;;;ACAA;;;;;;;;;;"}