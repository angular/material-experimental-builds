{"version":3,"file":"mdc-button.js","sources":["../../../../../../src/material-experimental/mdc-button/button-base.ts","../../../../../../src/material-experimental/mdc-button/button.ts","../../../../../../src/material-experimental/mdc-button/fab.ts","../../../../../../src/material-experimental/mdc-button/icon-button.ts","../../../../../../src/material-experimental/mdc-button/module.ts","../../../../../../src/material-experimental/mdc-button/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {Directive, ElementRef, HostListener, NgZone, ViewChild} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleAnimationConfig\n} from '@angular/material/core';\nimport {numbers} from '@material/ripple';\n\n/** Inputs common to all buttons. */\nexport const MAT_BUTTON_INPUTS = ['disabled', 'disableRipple', 'color'];\n\n/** Shared host configuration for all buttons */\nexport const MAT_BUTTON_HOST = {\n  '[attr.disabled]': 'disabled || null',\n  '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  // MDC automatically applies the primary theme color to the button, but we want to support\n  // an unthemed version. If color is undefined, apply a CSS class that makes it easy to\n  // select and style this \"theme\".\n  '[class.mat-unthemed]': '!color',\n  // Add a class that applies to all buttons. This makes it easier to target if somebody\n  // wants to target all Material buttons.\n  '[class.mat-mdc-button-base]': 'true',\n};\n\n/** Configuration for the ripple animation. */\nconst RIPPLE_ANIMATION_CONFIG: RippleAnimationConfig = {\n  enterDuration: numbers.DEACTIVATION_TIMEOUT_MS,\n  exitDuration: numbers.FG_DEACTIVATION_MS\n};\n\n/** List of classes to add to buttons instances based on host attribute selector. */\nconst HOST_SELECTOR_MDC_CLASS_PAIR: {selector: string, mdcClasses: string[]}[] = [\n  {\n    selector: 'mat-button',\n    mdcClasses: ['mdc-button', 'mat-mdc-button'],\n  },\n  {\n    selector: 'mat-flat-button',\n    mdcClasses: ['mdc-button', 'mdc-button--unelevated', 'mat-mdc-unelevated-button'],\n  },\n  {\n    selector: 'mat-raised-button',\n    mdcClasses: ['mdc-button', 'mdc-button--raised', 'mat-mdc-raised-button'],\n  },\n  {\n    selector: 'mat-stroked-button',\n    mdcClasses: ['mdc-button', 'mdc-button--outlined', 'mat-mdc-outlined-button'],\n  },\n  {\n    selector: 'mat-fab',\n    mdcClasses: ['mdc-fab', 'mat-mdc-fab'],\n  },\n  {\n    selector: 'mat-mini-fab',\n    mdcClasses: ['mdc-fab', 'mdc-fab--mini', 'mat-mdc-mini-fab'],\n  },\n  {\n    selector: 'mat-icon-button',\n    mdcClasses: ['mdc-icon-button', 'mat-mdc-icon-button'],\n  }\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonMixinCore {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonBaseMixin: CanDisableRippleCtor&CanDisableCtor&CanColorCtor&\n    typeof MatButtonMixinCore = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonMixinCore)));\n\n/** Base class for all buttons.  */\n@Directive()\nexport class MatButtonBase extends _MatButtonBaseMixin implements CanDisable, CanColor,\n                                                                  CanDisableRipple {\n  /** The ripple animation configuration to use for the buttons. */\n  _rippleAnimation: RippleAnimationConfig = RIPPLE_ANIMATION_CONFIG;\n\n  /** Whether the ripple is centered on the button. */\n  _isRippleCentered = false;\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(\n      elementRef: ElementRef, public _platform: Platform, public _ngZone: NgZone,\n      public _animationMode?: string) {\n    super(elementRef);\n\n    const classList = (elementRef.nativeElement as HTMLElement).classList;\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding MDC classes.\n    for (const pair of HOST_SELECTOR_MDC_CLASS_PAIR) {\n      if (this._hasHostAttributes(pair.selector)) {\n        pair.mdcClasses.forEach((className: string) => {\n          classList.add(className);\n        });\n      }\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  private _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._elementRef.nativeElement.hasAttribute(attribute));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n/** Shared inputs by buttons using the `<a>` tag */\nexport const MAT_ANCHOR_INPUTS = ['disabled', 'disableRipple', 'color', 'tabIndex'];\n\n/** Shared host configuration for buttons using the `<a>` tag. */\nexport const MAT_ANCHOR_HOST = {\n  '[attr.disabled]': 'disabled || null',\n  '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n\n  // Note that we ignore the user-specified tabindex when it's disabled for\n  // consistency with the `mat-button` applied on native buttons where even\n  // though they have an index, they're not tabbable.\n  '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n  '[attr.aria-disabled]': 'disabled.toString()',\n  // MDC automatically applies the primary theme color to the button, but we want to support\n  // an unthemed version. If color is undefined, apply a CSS class that makes it easy to\n  // select and style this \"theme\".\n  '[class.mat-unthemed]': '!color',\n  // Add a class that applies to all buttons. This makes it easier to target if somebody\n  // wants to target all Material buttons.\n  '[class.mat-mdc-button-base]': 'true',\n};\n\n/**\n * Anchor button base.\n */\n@Directive()\nexport class MatAnchorBase extends MatButtonBase {\n  tabIndex: number;\n\n  constructor(elementRef: ElementRef, platform: Platform, ngZone: NgZone,\n              animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(mmalerba): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  NgZone,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\nimport {\n  MAT_ANCHOR_HOST,\n  MAT_ANCHOR_INPUTS,\n  MAT_BUTTON_HOST,\n  MAT_BUTTON_INPUTS,\n  MatAnchorBase,\n  MatButtonBase\n} from './button-base';\n\n/**\n * Material Design button component. Users interact with a button to perform an action.\n * See https://material.io/components/buttons\n *\n * The `MatButton` class applies to native button elements and captures the appearances for\n * \"text button\", \"outlined button\", and \"contained button\" per the Material Design\n * specification. `MatButton` additionally captures an additional \"flat\" appearance, which matches\n * \"contained\" but without elevation.\n */\n@Component({\n  selector: `\n    button[mat-button], button[mat-raised-button], button[mat-flat-button],\n    button[mat-stroked-button]\n  `,\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: MAT_BUTTON_INPUTS,\n  host: MAT_BUTTON_HOST,\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends MatButtonBase {\n  constructor(\n      elementRef: ElementRef, platform: Platform, ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n\n/**\n * Material Design button component for anchor elements. Anchor elements are used to provide\n * links for the user to navigate across different routes or pages.\n * See https://material.io/components/buttons\n *\n * The `MatAnchor` class applies to native anchor elements and captures the appearances for\n * \"text button\", \"outlined button\", and \"contained button\" per the Material Design\n * specification. `MatAnchor` additionally captures an additional \"flat\" appearance, which matches\n * \"contained\" but without elevation.\n */\n@Component({\n  selector: `a[mat-button], a[mat-raised-button], a[mat-flat-button], a[mat-stroked-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: MAT_ANCHOR_HOST,\n  inputs: MAT_ANCHOR_INPUTS,\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatAnchorBase {\n  constructor(\n      elementRef: ElementRef, platform: Platform, ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  NgZone,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\nimport {MatAnchor} from './button';\nimport {\n  MAT_ANCHOR_HOST,\n  MAT_ANCHOR_INPUTS,\n  MAT_BUTTON_HOST,\n  MAT_BUTTON_INPUTS,\n  MatButtonBase\n} from './button-base';\nimport {ThemePalette} from '@angular/material/core';\n\n/**\n * Material Design floating action button (FAB) component. These buttons represent the primary\n * or most common action for users to interact with.\n * See https://material.io/components/buttons-floating-action-button/\n *\n * The `MatFabButton` class has two appearances: normal and mini.\n */\n@Component({\n  selector: `button[mat-fab], button[mat-mini-fab]`,\n  templateUrl: 'button.html',\n  styleUrls: ['fab.css'],\n  inputs: MAT_BUTTON_INPUTS,\n  host: MAT_BUTTON_HOST,\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatFabButton extends MatButtonBase {\n  // The FAB by default has its color set to accent.\n  color = 'accent' as ThemePalette;\n\n  constructor(\n      elementRef: ElementRef, platform: Platform, ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n\n\n/**\n * Material Design floating action button (FAB) component for anchor elements. Anchor elements\n * are used to provide links for the user to navigate across different routes or pages.\n * See https://material.io/components/buttons-floating-action-button/\n *\n * The `MatFabAnchor` class has two appearances: normal and mini.\n */\n@Component({\n  selector: `a[mat-fab], a[mat-mini-fab]`,\n  templateUrl: 'button.html',\n  styleUrls: ['fab.css'],\n  inputs: MAT_ANCHOR_INPUTS,\n  host: MAT_ANCHOR_HOST,\n  exportAs: 'matButton, matAnchor',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatFabAnchor extends MatAnchor {\n  // The FAB by default has its color set to accent.\n  color = 'accent' as ThemePalette;\n\n  constructor(\n      elementRef: ElementRef, platform: Platform, ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  NgZone,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\nimport {\n  MAT_ANCHOR_HOST,\n  MAT_ANCHOR_INPUTS,\n  MAT_BUTTON_HOST,\n  MAT_BUTTON_INPUTS,\n  MatAnchorBase,\n  MatButtonBase\n} from './button-base';\n\n/**\n * Material Design icon button component. This type of button displays a single interactive icon for\n * users to perform an action.\n * See https://material.io/develop/web/components/buttons/icon-buttons/\n */\n@Component({\n  selector: `button[mat-icon-button]`,\n  templateUrl: 'button.html',\n  styleUrls: ['icon-button.css'],\n  inputs: MAT_BUTTON_INPUTS,\n  host: MAT_BUTTON_HOST,\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIconButton extends MatButtonBase {\n  // Set the ripple to be centered for icon buttons\n  _isRippleCentered = true;\n\n  constructor(\n      elementRef: ElementRef, platform: Platform, ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n\n/**\n * Material Design icon button component for anchor elements. This button displays a single\n * interaction icon that allows users to navigate across different routes or pages.\n * See https://material.io/develop/web/components/buttons/icon-buttons/\n */\n@Component({\n  selector: `a[mat-icon-button]`,\n  templateUrl: 'button.html',\n  styleUrls: ['icon-button.css'],\n  inputs: MAT_ANCHOR_INPUTS,\n  host: MAT_ANCHOR_HOST,\n  exportAs: 'matButton, matAnchor',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIconAnchor extends MatAnchorBase {\n  // Set the ripple to be centered for icon buttons\n  _isRippleCentered = true;\n\n  constructor(\n      elementRef: ElementRef, platform: Platform, ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\nimport {MatFabAnchor, MatFabButton} from './fab';\nimport {MatIconAnchor, MatIconButton} from './icon-button';\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [\n    MatAnchor,\n    MatButton,\n    MatIconAnchor,\n    MatIconButton,\n    MatFabAnchor,\n    MatFabButton,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatAnchor,\n    MatButton,\n    MatIconAnchor,\n    MatIconButton,\n    MatFabAnchor,\n    MatFabButton,\n  ],\n})\nexport class MatButtonModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {MAT_ANCHOR_HOST as Éµangular_material_src_material_experimental_mdc_button_mdc_button_g,MAT_ANCHOR_INPUTS as Éµangular_material_src_material_experimental_mdc_button_mdc_button_f,MAT_BUTTON_HOST as Éµangular_material_src_material_experimental_mdc_button_mdc_button_b,MAT_BUTTON_INPUTS as Éµangular_material_src_material_experimental_mdc_button_mdc_button_a,MatAnchorBase as Éµangular_material_src_material_experimental_mdc_button_mdc_button_h,MatButtonBase as Éµangular_material_src_material_experimental_mdc_button_mdc_button_e,MatButtonMixinCore as Éµangular_material_src_material_experimental_mdc_button_mdc_button_c,_MatButtonBaseMixin as Éµangular_material_src_material_experimental_mdc_button_mdc_button_d} from './button-base';"],"names":[],"mappings":"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"}