{"version":3,"file":"mdc-menu.js","sources":["../../../../../../src/material-experimental/mdc-menu/menu.ts","../../../../../../src/material-experimental/mdc-menu/menu-item.ts","../../../../../../src/material-experimental/mdc-menu/module.ts","../../../../../../src/material-experimental/mdc-menu/public-api.ts","../../../../../../src/material-experimental/mdc-menu/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  NgZone,\n  Provider,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  MAT_MENU_DEFAULT_OPTIONS,\n  MAT_MENU_PANEL,\n  MAT_MENU_SCROLL_STRATEGY,\n  MatMenu as BaseMatMenu,\n  matMenuAnimations,\n  MatMenuDefaultOptions,\n} from '@angular/material/menu';\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER: Provider = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n@Component({\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: BaseMatMenu, useExisting: MatMenu},\n  ]\n})\nexport class MatMenu extends BaseMatMenu {\n\n  constructor(_elementRef: ElementRef<HTMLElement>,\n              _ngZone: NgZone,\n              @Inject(MAT_MENU_DEFAULT_OPTIONS) _defaultOptions: MatMenuDefaultOptions) {\n    super(_elementRef, _ngZone, _defaultOptions);\n  }\n\n  setElevation(_depth: number) {\n    // TODO(crisbeto): MDC's styles come with elevation already and we haven't mapped our mixins\n    // to theirs. Disable the elevation stacking for now until everything has been mapped.\n    // The following unit tests should be re-enabled:\n    // - should not remove mat-elevation class from overlay when panelClass is changed\n    // - should increase the sub-menu elevation based on its depth\n    // - should update the elevation when the same menu is opened at a different depth\n    // - should not increase the elevation if the user specified a custom one\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {MatMenuItem as BaseMatMenuItem} from '@angular/material/menu';\n\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\n@Component({\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n     // The MatMenuItem parent class adds `mat-menu-item` and `mat-focus-indicator` to the CSS\n     // classlist, but these should not be added for this MDC equivalent menu item.\n    '[class.mat-menu-item]': 'false',\n    '[class.mat-focus-indicator]': 'false',\n    'class': 'mat-mdc-menu-item mat-mdc-focus-indicator',\n    '[class.mat-mdc-menu-item-highlighted]': '_highlighted',\n    '[class.mat-mdc-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n  providers: [\n    {provide: BaseMatMenuItem, useExisting: MatMenuItem},\n  ]\n})\nexport class MatMenuItem extends BaseMatMenuItem {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {_MatMenuDirectivesModule} from '@angular/material/menu';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {MatMenu, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER} from './menu';\nimport {MatMenuItem} from './menu-item';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    OverlayModule,\n    _MatMenuDirectivesModule\n  ],\n  exports: [CdkScrollableModule, MatMenu, MatCommonModule, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {MatMenu} from './menu';\nexport {MatMenuItem} from './menu-item';\nexport * from './module';\n\nexport {\n  _MatMenuDirectivesModule,\n  fadeInItems,\n  MAT_MENU_DEFAULT_OPTIONS,\n  MAT_MENU_PANEL,\n  MAT_MENU_SCROLL_STRATEGY,\n  matMenuAnimations,\n  MatMenuContent,\n  MatMenuDefaultOptions,\n  MatMenuPanel,\n  MatMenuTrigger,\n  MenuPositionX,\n  MenuPositionY,\n  transformMenu,\n} from '@angular/material/menu';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {MAT_MENU_SCROLL_STRATEGY_FACTORY as Éµangular_material_src_material_experimental_mdc_menu_mdc_menu_a,MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as Éµangular_material_src_material_experimental_mdc_menu_mdc_menu_b} from './menu';"],"names":["BaseMatMenu","BaseMatMenuItem"],"mappings":";;;;;;;;;AAAA;;;;;;;AA2BA;AACA,SAAgB,gCAAgC,CAAC,OAAgB;IAC/D,OAAO,MAAM,OAAO,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAC;CACpD;;AAGD,MAAa,yCAAyC,GAAa;IACjE,OAAO,EAAE,wBAAwB;IACjC,IAAI,EAAE,CAAC,OAAO,CAAC;IACf,UAAU,EAAE,gCAAgC;CAC7C,CAAC;AAkBF;;IAAA,IAAa,OAAO,eAApB,MAAa,OAAQ,SAAQA,SAAW;QAEtC,YAAY,WAAoC,EACpC,OAAe,EACmB,eAAsC;YAClF,KAAK,CAAC,WAAW,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;SAC9C;QAED,YAAY,CAAC,MAAc;;;;;;;;SAQ1B;KACF,CAAA;IAjBY,OAAO;QAhBnB,SAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,ktBAAwB;YAExB,eAAe,EAAE,uBAAuB,CAAC,MAAM;YAC/C,aAAa,EAAE,iBAAiB,CAAC,IAAI;YACrC,QAAQ,EAAE,SAAS;YACnB,UAAU,EAAE;gBACV,iBAAiB,CAAC,aAAa;gBAC/B,iBAAiB,CAAC,WAAW;aAC9B;YACD,SAAS,EAAE;gBACT,EAAC,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,SAAO,EAAC;gBAC/C,EAAC,OAAO,EAAEA,SAAW,EAAE,WAAW,EAAE,SAAO,EAAC;aAC7C;;SACF,CAAC;QAKa,WAAA,MAAM,CAAC,wBAAwB,CAAC,CAAA;yCAFpB,UAAU;YACd,MAAM;OAHhB,OAAO,CAiBnB;IAAD,cAAC;;;ACxED;;;;;;;AAWA;;;AA2BA;;IAAA,IAAa,WAAW,mBAAxB,MAAa,WAAY,SAAQC,aAAe;KAC/C,CAAA;IADY,WAAW;QAxBvB,SAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;YAC3B,QAAQ,EAAE,aAAa;YACvB,MAAM,EAAE,CAAC,UAAU,EAAE,eAAe,CAAC;YACrC,IAAI,EAAE;gBACJ,aAAa,EAAE,MAAM;;;gBAGrB,uBAAuB,EAAE,OAAO;gBAChC,6BAA6B,EAAE,OAAO;gBACtC,OAAO,EAAE,2CAA2C;gBACpD,uCAAuC,EAAE,cAAc;gBACvD,2CAA2C,EAAE,kBAAkB;gBAC/D,iBAAiB,EAAE,gBAAgB;gBACnC,sBAAsB,EAAE,UAAU;gBAClC,iBAAiB,EAAE,kBAAkB;aACtC;YACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;YAC/C,aAAa,EAAE,iBAAiB,CAAC,IAAI;YACrC,qMAA6B;YAC7B,SAAS,EAAE;gBACT,EAAC,OAAO,EAAEA,aAAe,EAAE,WAAW,EAAE,aAAW,EAAC;aACrD;SACF,CAAC;OACW,WAAW,CACvB;IAAD,kBAAC;;;ACvCD;;;;;;;;IA6BA,IAAa,aAAa,GAA1B,MAAa,aAAa;KAAG,CAAA;IAAhB,aAAa;QAZzB,QAAQ,CAAC;YACR,OAAO,EAAE;gBACP,YAAY;gBACZ,eAAe;gBACf,eAAe;gBACf,aAAa;gBACb,wBAAwB;aACzB;YACD,OAAO,EAAE,CAAC,mBAAmB,EAAE,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,wBAAwB,CAAC;YAC/F,YAAY,EAAE,CAAC,OAAO,EAAE,WAAW,CAAC;YACpC,SAAS,EAAE,CAAC,yCAAyC,CAAC;SACvD,CAAC;OACW,aAAa,CAAG;IAAD,oBAAC;;;AC7B7B;;;;;;GAMG;;ACNH;;GAEG;;;;"}