{"version":3,"file":"mdc-progress-spinner.js","sources":["../../../../../../src/material-experimental/mdc-progress-spinner/progress-spinner.ts","../../../../../../src/material-experimental/mdc-progress-spinner/module.ts","../../../../../../src/material-experimental/mdc-progress-spinner/public-api.ts","../../../../../../src/material-experimental/mdc-progress-spinner/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  MDCCircularProgressAdapter,\n  MDCCircularProgressFoundation\n} from '@material/circular-progress';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material-experimental/mdc-core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,\n  MatProgressSpinnerDefaultOptions\n} from '@angular/material/progress-spinner';\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\n\n// Boilerplate for applying mixins to MatProgressBar.\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {\n  }\n}\n\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n  mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n */\nconst BASE_STROKE_WIDTH = 10;\n\n@Component({\n  selector: 'mat-progress-spinner, mat-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-mdc-progress-spinner mdc-circular-progress',\n    // set tab index to -1 so screen readers will read the aria-label\n    // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n    'tabindex': '-1',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': '0',\n    '[attr.aria-valuemax]': '100',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements AfterViewInit,\n  OnDestroy, CanColor {\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** Implements all of the logic of the MDC circular progress. */\n  _foundation: MDCCircularProgressFoundation;\n\n  /** The element of the determinate spinner. */\n  @ViewChild('determinateSpinner') _determinateCircle: ElementRef<HTMLElement>;\n\n  /** Adapter used by MDC to interact with the DOM. */\n  // TODO: switch to class when MDC removes object spread in foundation\n  // https://github.com/material-components/material-components-web/pull/6256\n  private _adapter: MDCCircularProgressAdapter = {\n    addClass: (className: string) => this._elementRef.nativeElement.classList.add(className),\n    hasClass: (className: string) => this._elementRef.nativeElement.classList.contains(className),\n    removeClass: (className: string) => this._elementRef.nativeElement.classList.remove(className),\n    removeAttribute: (name: string) => this._elementRef.nativeElement.removeAttribute(name),\n    setAttribute: (name, value) => {\n      if (name !== 'aria-valuenow') {\n        // MDC deals with values between 0 and 1 but Angular Material deals with values between\n        // 0 and 100 so the aria-valuenow should be set through the attr binding in the host\n        // instead of by the MDC adapter\n        this._elementRef.nativeElement.setAttribute(name, value);\n      }\n    },\n    getDeterminateCircleAttribute: (attributeName: string) =>\n      this._determinateCircle.nativeElement.getAttribute(attributeName),\n    setDeterminateCircleAttribute: (attributeName: string, value: string) =>\n      this._determinateCircle.nativeElement.setAttribute(attributeName, value),\n  };\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                defaults?: MatProgressSpinnerDefaultOptions) {\n    super(_elementRef);\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n      (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n  }\n\n  private _mode: ProgressSpinnerMode = this._elementRef.nativeElement.nodeName.toLowerCase() ===\n  'mat-spinner' ? 'indeterminate' : 'determinate';\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input()\n  get mode(): ProgressSpinnerMode { return this._mode; }\n\n  set mode(value: ProgressSpinnerMode) {\n    this._mode = value;\n    this._syncFoundation();\n  }\n\n  private _value = 0;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n\n  set value(v: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(v)));\n    this._syncFoundation();\n  }\n\n  private _diameter = BASE_SIZE;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number {\n    return this._diameter;\n  }\n\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n    this._syncFoundation();\n  }\n\n  private _strokeWidth: number;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth ?? this.diameter / 10;\n  }\n\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  _circleRadius(): number {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  _viewBox() {\n    const viewBox = this._circleRadius() * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius();\n  }\n\n  /** The dash offset of the svg circle. */\n  _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference() * (100 - this._value) / 100;\n    }\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  ngAfterViewInit() {\n    this._foundation = new MDCCircularProgressFoundation(this._adapter);\n    this._foundation.init();\n    this._syncFoundation();\n  }\n\n  ngOnDestroy() {\n    if (this._foundation) {\n      this._foundation.destroy();\n    }\n  }\n\n  /** Syncs the state of the progress spinner with the MDC foundation. */\n  private _syncFoundation() {\n    const foundation = this._foundation;\n\n    if (foundation) {\n      const mode = this.mode;\n      foundation.setProgress(this.value / 100);\n      foundation.setDeterminate(mode === 'determinate');\n    }\n  }\n\n  static ngAcceptInputType_diameter: NumberInput;\n  static ngAcceptInputType_strokeWidth: NumberInput;\n  static ngAcceptInputType_value: NumberInput;\n}\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n// tslint:disable-next-line:variable-name\nexport const MatSpinner = MatProgressSpinner;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material-experimental/mdc-core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatProgressSpinner, MatSpinner, MatCommonModule],\n  declarations: [MatProgressSpinner, MatSpinner],\n})\nexport class MatProgressSpinnerModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './progress-spinner';\nexport * from './module';\n\nexport {\n  MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,\n  MatProgressSpinnerDefaultOptions,\n  MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n} from '@angular/material/progress-spinner';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}