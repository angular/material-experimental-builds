{"version":3,"file":"mdc-list.js","sources":["../../../../../../src/material-experimental/mdc-list/list-base.ts","../../../../../../src/material-experimental/mdc-list/list.ts","../../../../../../src/material-experimental/mdc-list/action-list.ts","../../../../../../src/material-experimental/mdc-list/nav-list.ts","../../../../../../src/material-experimental/mdc-list/interactive-list-base.ts","../../../../../../src/material-experimental/mdc-list/list-option.ts","../../../../../../src/material-experimental/mdc-list/selection-list.ts","../../../../../../src/material-experimental/mdc-list/module.ts","../../../../../../src/material-experimental/mdc-list/public-api.ts","../../../../../../src/material-experimental/mdc-list/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  NgZone,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {\n  RippleConfig,\n  RippleRenderer,\n  RippleTarget,\n  setLines,\n} from '@angular/material-experimental/mdc-core';\nimport {Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\n\nfunction toggleClass(el: Element, className: string, on: boolean) {\n  if (on) {\n    el.classList.add(className);\n  } else {\n    el.classList.remove(className);\n  }\n}\n\n@Directive()\n/** @docs-private */\nexport abstract class MatListItemBase implements AfterContentInit, OnDestroy, RippleTarget {\n  /** Query list matching list-item line elements. */\n  abstract lines: QueryList<ElementRef<Element>>;\n\n  /** Element reference referring to the primary list item text. */\n  abstract _itemText: ElementRef<HTMLElement>;\n\n  /** Host element for the list item. */\n  _hostElement: HTMLElement;\n\n  @Input()\n  get disableRipple(): boolean {\n    return this.disabled || this._disableRipple || this._listBase.disableRipple;\n  }\n  set disableRipple(value: boolean) { this._disableRipple = coerceBooleanProperty(value); }\n  private _disableRipple: boolean = false;\n\n  /** Whether the list-item is disabled. */\n  @HostBinding('class.mdc-list-item--disabled')\n  @HostBinding('attr.aria-disabled')\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._listBase && this._listBase.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  private _subscriptions = new Subscription();\n  private _rippleRenderer: RippleRenderer|null = null;\n\n  /**\n   * Implemented as part of `RippleTarget`.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Implemented as part of `RippleTarget`.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean { return this.disableRipple; }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>, protected _ngZone: NgZone,\n              private _listBase: MatListBase, private _platform: Platform) {\n    this._hostElement = this._elementRef.nativeElement;\n\n    if (!this._listBase._isNonInteractive) {\n      this._initInteractiveListItem();\n    }\n\n    // If no type attribute is specified for a host `<button>` element, set it to `button`. If a\n    // type attribute is already specified, we do nothing. We do this for backwards compatibility.\n    // TODO: Determine if we intend to continue doing this for the MDC-based list.\n    if (this._hostElement.nodeName.toLowerCase() === 'button' &&\n        !this._hostElement.hasAttribute('type')) {\n      this._hostElement.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    this._monitorLines();\n  }\n\n  ngOnDestroy() {\n    this._subscriptions.unsubscribe();\n    if (this._rippleRenderer !== null) {\n      this._rippleRenderer._removeTriggerEvents();\n    }\n  }\n\n  /** Gets the label for the list item. This is used for the typeahead. */\n  _getItemLabel(): string {\n    return this._itemText ? (this._itemText.nativeElement.textContent || '') : '';\n  }\n\n  private _initInteractiveListItem() {\n    this._hostElement.classList.add('mat-mdc-list-item-interactive');\n    this._rippleRenderer =\n        new RippleRenderer(this, this._ngZone, this._hostElement, this._platform);\n    this._rippleRenderer.setupTriggerEvents(this._hostElement);\n  }\n\n  /**\n   * Subscribes to changes in `MatLine` content children and annotates them\n   * appropriately when they change.\n   */\n  private _monitorLines() {\n    this._ngZone.runOutsideAngular(() => {\n      this._subscriptions.add(this.lines.changes.pipe(startWith(this.lines))\n          .subscribe((lines: QueryList<ElementRef<Element>>) => {\n            toggleClass(this._hostElement, 'mat-mdc-list-item-single-line', lines.length <= 1);\n            lines.forEach((line: ElementRef<Element>, index: number) => {\n              toggleClass(line.nativeElement,\n                  'mdc-list-item__primary-text', index === 0 && lines.length > 1);\n              toggleClass(line.nativeElement, 'mdc-list-item__secondary-text', index !== 0);\n            });\n            setLines(lines, this._elementRef, 'mat-mdc');\n          }));\n    });\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n@Directive()\n/** @docs-private */\nexport abstract class MatListBase {\n  @HostBinding('class.mat-mdc-list-non-interactive')\n  _isNonInteractive: boolean = true;\n\n  /** Whether ripples for all list items is disabled. */\n  @Input()\n  get disableRipple(): boolean { return this._disableRipple; }\n  set disableRipple(value: boolean) { this._disableRipple = coerceBooleanProperty(value); }\n  private _disableRipple: boolean = false;\n\n  /** Whether all list items are disabled. */\n  @HostBinding('attr.aria-disabled')\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  NgZone,\n  QueryList, ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MatLine} from '@angular/material-experimental/mdc-core';\nimport {MatListBase, MatListItemBase} from './list-base';\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-mdc-list-avatar mdc-list-item__graphic'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-mdc-list-icon mdc-list-item__graphic'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  // TODO(mmalerba): MDC's subheader font looks identical to the list item font, figure out why and\n  //  make a change in one of the repos to visually distinguish.\n  host: {'class': 'mat-mdc-subheader mdc-list-group__subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n@Component({\n  selector: 'mat-list',\n  exportAs: 'matList',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-mdc-list mat-mdc-list-base mdc-list',\n  },\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {provide: MatListBase, useExisting: MatList},\n  ]\n})\nexport class MatList extends MatListBase {}\n\n@Component({\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-mdc-list-item mdc-list-item',\n  },\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends MatListItemBase {\n  @ContentChildren(MatLine, {read: ElementRef, descendants: true}) lines:\n      QueryList<ElementRef<Element>>;\n  @ViewChild('text') _itemText: ElementRef<HTMLElement>;\n\n  constructor(element: ElementRef, ngZone: NgZone, listBase: MatListBase, platform: Platform) {\n    super(element, ngZone, listBase, platform);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {MatListBase} from './list-base';\n\n@Component({\n  selector: 'mat-action-list',\n  exportAs: 'matActionList',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-mdc-action-list mat-mdc-list-base mdc-list',\n  },\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {provide: MatListBase, useExisting: MatActionList},\n  ]\n})\nexport class MatActionList extends MatListBase {\n  // An navigation list is considered interactive, but does not extend the interactive list\n  // base class. We do this because as per MDC, items of interactive lists are only reachable\n  // through keyboard shortcuts. We want all items for the navigation list to be reachable\n  // through tab key as we do not intend to provide any special accessibility treatment. The\n  // accessibility treatment depends on how the end-user will interact with it.\n  _isNonInteractive = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {MatListBase} from './list-base';\n\n@Component({\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-mdc-nav-list mat-mdc-list-base mdc-list',\n  },\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {provide: MatListBase, useExisting: MatNavList},\n  ]\n})\nexport class MatNavList extends MatListBase {\n  // An navigation list is considered interactive, but does not extend the interactive list\n  // base class. We do this because as per MDC, items of interactive lists are only reachable\n  // through keyboard shortcuts. We want all items for the navigation list to be reachable\n  // through tab key as we do not intend to provide any special accessibility treatment. The\n  // accessibility treatment depends on how the end-user will interact with it.\n  _isNonInteractive = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostListener,\n  Inject,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {MDCListAdapter, MDCListFoundation} from '@material/list';\nimport {Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatListBase, MatListItemBase} from './list-base';\n\n@Directive()\n/** @docs-private */\nexport abstract class MatInteractiveListBase<T extends MatListItemBase>\n  extends MatListBase implements AfterViewInit, OnDestroy {\n\n  @HostListener('keydown', ['$event'])\n  _handleKeydown(event: KeyboardEvent) {\n    const index = this._indexForElement(event.target as HTMLElement);\n    this._foundation.handleKeydown(\n      event, this._elementAtIndex(index) === event.target, index);\n  }\n\n  @HostListener('click', ['$event'])\n  _handleClick(event: MouseEvent) {\n    // The `toggleCheckbox` parameter can always be `true` as it only has an effect if the list\n    // is recognized as checkbox selection list. For such lists, we would always want to toggle\n    // the checkbox on list item click. MDC added this parameter so that they can avoid dispatching\n    // a fake `change` event when the checkbox is directly clicked for the list item. We don't\n    // need this as we require such list item checkboxes to stop propagation of the change event.\n    // https://github.com/material-components/material-components-web/blob/08ca4d0ec5f359bc3a20bd2a302fa6b733b5e135/packages/mdc-list/component.ts#L308-L310\n    this._foundation.handleClick(this._indexForElement(event.target as HTMLElement),\n      /* toggleCheckbox */ true);\n  }\n\n  @HostListener('focusin', ['$event'])\n  _handleFocusin(event: FocusEvent) {\n    const itemIndex = this._indexForElement(event.target as HTMLElement);\n    const tabIndex = this._itemsArr[itemIndex]?._hostElement.tabIndex;\n\n    // If the newly focused item is not the designated item that should have received focus\n    // first through keyboard interaction, the tabindex of the previously designated list item\n    // needs to be cleared, so that only one list item is reachable through tab key at any time.\n    // MDC sets a tabindex for the newly focused item, so we do not need to set a tabindex for it.\n    // Workaround for: https://github.com/material-components/material-components-web/issues/6363.\n    if (tabIndex === undefined || tabIndex === -1) {\n      this._clearTabindexForAllItems();\n    }\n\n    this._foundation.handleFocusIn(event, itemIndex);\n  }\n\n  @HostListener('focusout', ['$event'])\n  _handleFocusout(event: FocusEvent) {\n    this._foundation.handleFocusOut(event, this._indexForElement(event.target as HTMLElement));\n  }\n\n  /** Items in the interactive list. */\n  abstract _items: QueryList<T>;\n  _itemsArr: T[] = [];\n  _document: Document;\n\n  protected _foundation: MDCListFoundation;\n  protected _adapter: MDCListAdapter;\n\n  private _subscriptions = new Subscription();\n\n  protected constructor(public _element: ElementRef<HTMLElement>,\n                        @Inject(DOCUMENT) document: any) {\n    super();\n    this._document = document;\n    this._isNonInteractive = false;\n  }\n\n  protected _initWithAdapter(adapter: MDCListAdapter) {\n    this._adapter = adapter;\n    this._foundation = new MDCListFoundation(adapter);\n  }\n\n  ngAfterViewInit() {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._foundation) {\n      throw Error('MDC list foundation not initialized for Angular Material list.');\n    }\n\n    this._foundation.init();\n    this._watchListItems();\n\n    // Enable typeahead and focus wrapping for interactive lists.\n    this._foundation.setHasTypeahead(true);\n    this._foundation.setWrapFocus(true);\n  }\n\n  ngOnDestroy() {\n    this._foundation.destroy();\n    this._subscriptions.unsubscribe();\n  }\n\n  protected _watchListItems() {\n    this._subscriptions.add(this._items.changes.pipe(startWith(null)).subscribe(() => {\n      this._itemsArr = this._items.toArray();\n      // Whenever the items change, the foundation needs to be notified through the `layout`\n      // method. It caches items for the typeahead and detects the list type based on the items.\n      this._foundation.layout();\n\n      // The list items changed, so we reset the tabindex for all items and\n      // designate one list item that will be reachable through tab.\n      this._resetTabindexToFirstSelectedOrFocusedItem();\n    }));\n  }\n\n  /**\n   * Clears the tabindex of all items so that no items are reachable through tab key.\n   * MDC intends to always have only one tabbable item that will receive focus first.\n   * This first item is selected by MDC automatically on blur or by manually invoking\n   * the `setTabindexToFirstSelectedOrFocusedItem` method.\n   */\n  private _clearTabindexForAllItems() {\n    for (let items of this._itemsArr) {\n      items._hostElement.setAttribute('tabindex', '-1');\n    }\n  }\n\n  /**\n   * Resets tabindex for all options and sets tabindex for the first selected option or\n   * previously focused item so that an item can be reached when users tab into the list.\n   */\n  protected _resetTabindexToFirstSelectedOrFocusedItem() {\n    this._clearTabindexForAllItems();\n    // MDC does not expose the method for setting the tabindex to the first selected\n    // or previously focused item. We can still access the method as private class\n    // members are accessible in the transpiled JavaScript. Tracked upstream with:\n    // TODO: https://github.com/material-components/material-components-web/issues/6375\n    (this._foundation as any).setTabindexToFirstSelectedOrFocusedItem();\n  }\n\n  _elementAtIndex(index: number): HTMLElement|undefined {\n    return this._itemsArr[index]?._hostElement;\n  }\n\n  _indexForElement(element: Element | null): number {\n    return element ?\n      this._itemsArr.findIndex(i => i._hostElement.contains(element)) : -1;\n  }\n}\n\n// TODO: replace with class once material-components-web/pull/6256 is available.\n/** Gets an instance of `MDcListAdapter` for the given interactive list. */\nexport function getInteractiveListAdapter(\n    list: MatInteractiveListBase<MatListItemBase>): MDCListAdapter {\n  return {\n    getListItemCount() {\n      return list._items.length;\n    },\n    listItemAtIndexHasClass(index: number, className: string) {\n      const element = list._elementAtIndex(index);\n      return element ? element.classList.contains(className) : false;\n    },\n    addClassForElementIndex(index: number, className: string) {\n      list._elementAtIndex(index)?.classList.add(className);\n    },\n    removeClassForElementIndex(index: number, className: string) {\n      list._elementAtIndex(index)?.classList.remove(className);\n    },\n    getAttributeForElementIndex(index: number, attr: string) {\n      const element = list._elementAtIndex(index);\n      return element ? element.getAttribute(attr) : null;\n    },\n    setAttributeForElementIndex(index: number, attr: string, value: string) {\n      list._elementAtIndex(index)?.setAttribute(attr, value);\n    },\n    getFocusedElementIndex() {\n      return list._indexForElement(list._document?.activeElement);\n    },\n    isFocusInsideList() {\n      return list._element.nativeElement.contains(list._document?.activeElement);\n    },\n    isRootFocused() {\n      return list._element.nativeElement === list._document?.activeElement;\n    },\n    focusItemAtIndex(index: number) {\n      list._elementAtIndex(index)?.focus();\n    },\n    // Gets the text for a list item for the typeahead\n    getPrimaryTextAtIndex(index: number) {\n      return list._itemsArr[index]._getItemLabel();\n    },\n\n    // MDC uses this method to disable focusable children of list items. However, we believe that\n    // this is not an accessible pattern and should be avoided, therefore we intentionally do not\n    // implement this method. In addition, implementing this would require violating Angular\n    // Material's general principle of not having components modify DOM elements they do not own.\n    // A user who feels they really need this feature can simply listen to the `(focus)` and\n    // `(blur)` events on the list item and enable/disable focus on the children themselves as\n    // appropriate.\n    setTabIndexForListItemChildren() {},\n\n    // The following methods have a dummy implementation in the base class because they are only\n    // applicable to certain types of lists. They should be implemented for the concrete classes\n    // where they are applicable.\n    hasCheckboxAtIndex() { return false; },\n    hasRadioAtIndex(index: number) { return false; },\n    setCheckedCheckboxOrRadioAtIndex(index: number, checked: boolean) {},\n    isCheckboxCheckedAtIndex(index: number) { return false; },\n    notifyAction() {},\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MatLine, ThemePalette} from '@angular/material-experimental/mdc-core';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\nimport {MatListBase, MatListItemBase} from './list-base';\n\n/**\n * Injection token that can be used to reference instances of an `SelectionList`. It serves\n * as alternative token to an actual implementation which would result in circular references.\n * @docs-private\n */\nexport const SELECTION_LIST = new InjectionToken<SelectionList>('SelectionList');\n\n/**\n * Interface describing the containing list of an list option. This is used to avoid\n * circular dependencies between the list-option and the selection list.\n * @docs-private\n */\nexport interface SelectionList extends MatListBase {\n  multiple: boolean;\n  color: ThemePalette;\n  selectedOptions: SelectionModel<MatListOption>;\n  compareWith: (o1: any, o2: any) => boolean;\n  _value: string[]|null;\n  _reportValueChange: () => void;\n  _onTouched: () => void;\n}\n\n/** Unique id for created list options. */\nlet uniqueId = 0;\n\n@Component({\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  styleUrls: ['list-option.css'],\n  host: {\n    'class': 'mat-mdc-list-item mat-mdc-list-option mdc-list-item',\n    'role': 'option',\n    // As per MDC, only list items in single selection mode should receive the `--selected`\n    // class. For multi selection, the checkbox is used as indicator.\n    '[class.mdc-list-item--selected]': 'selected && !_selectionList.multiple',\n    '[class.mat-mdc-list-item-with-avatar]': '_hasIconOrAvatar()',\n    '[class.mat-accent]': 'color !== \"primary\" && color !== \"warn\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '(blur)': '_handleBlur()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {provide: MatListItemBase, useExisting: MatListOption},\n  ]\n})\nexport class MatListOption extends MatListItemBase implements OnInit, OnDestroy {\n  /**\n   * This is set to true after the first OnChanges cycle so we don't\n   * clear the value of `selected` in the first cycle.\n   */\n  private _inputsInitialized = false;\n\n  @ViewChild('text') _itemText: ElementRef<HTMLElement>;\n  @ContentChildren(MatLine, {read: ElementRef, descendants: true}) lines:\n    QueryList<ElementRef<Element>>;\n\n  @ContentChildren(MatListAvatarCssMatStyler, {descendants: false}) _avatars: QueryList<never>;\n  @ContentChildren(MatListIconCssMatStyler, {descendants: false}) _icons: QueryList<never>;\n\n  /** Unique id for the text. Used for describing the underlying checkbox input. */\n  _optionTextId: string = `mat-mdc-list-option-text-${uniqueId++}`;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this._selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value && this._inputsInitialized) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this._selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this._selectionList._reportValueChange();\n    }\n  }\n  private _selected = false;\n\n  constructor(\n      element: ElementRef,\n      ngZone: NgZone,\n      platform: Platform,\n      @Inject(SELECTION_LIST) public _selectionList: SelectionList,\n      private _changeDetectorRef: ChangeDetectorRef) {\n    super(element, ngZone, _selectionList, platform);\n\n    // By default, we mark all options as unselected. The MDC list foundation will\n    // automatically update the attribute based on selection. Note that we need to\n    // initially set this because MDC does not set the default attributes for list\n    // items but expects items to be set up properly in the static markup.\n    element.nativeElement.setAttribute('aria-selected', 'false');\n  }\n\n  ngOnInit() {\n    const list = this._selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n    this._inputsInitialized = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._hostElement.focus();\n  }\n\n  _isReversed(): boolean {\n    return this.checkboxPosition === 'after';\n  }\n\n  /** Whether the list-option has a checkbox. */\n  _hasCheckbox() {\n    return this._selectionList.multiple;\n  }\n\n  /** Whether the list-option has icons or avatars. */\n  _hasIconOrAvatar() {\n    return this._avatars.length || this._icons.length;\n  }\n\n  _handleBlur() {\n    this._selectionList._onTouched();\n  }\n\n  /**\n   * Sets the selected state of the option.\n   * @returns Whether the value has changed.\n   */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this._selectionList.selectedOptions.select(this);\n    } else {\n      this._selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetectorRef.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run.\n   * Mainly used to trigger an update of the list option if the disabled state of the selection\n   * list changed.\n   */\n  _markForCheck() {\n    this._changeDetectorRef.markForCheck();\n  }\n\n  static ngAcceptInputType_selected: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {ThemePalette} from '@angular/material-experimental/mdc-core';\nimport {MDCListAdapter} from '@material/list';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {getInteractiveListAdapter, MatInteractiveListBase} from './interactive-list-base';\nimport {MatListBase} from './list-base';\nimport {MatListOption, SELECTION_LIST, SelectionList} from './list-option';\n\nconst MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /**\n     * Reference to the option that has been changed.\n     * @deprecated Use `options` instead, because some events may change more than one option.\n     * @breaking-change 12.0.0\n     */\n    public option: MatListOption,\n    /** Reference to the options that have been changed. */\n    public options: MatListOption[]) {}\n}\n\n@Component({\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  host: {\n    'class': 'mat-mdc-selection-list mat-mdc-list-base mdc-list',\n    'role': 'listbox',\n    '[attr.aria-multiselectable]': 'multiple',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    MAT_SELECTION_LIST_VALUE_ACCESSOR,\n    {provide: MatListBase, useExisting: MatSelectionList},\n    {provide: SELECTION_LIST, useExisting: MatSelectionList},\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSelectionList extends MatInteractiveListBase<MatListOption>\n    implements SelectionList, ControlValueAccessor, AfterViewInit, OnChanges, OnDestroy {\n\n  private _multiple = true;\n  private _initialized = false;\n\n  @ContentChildren(MatListOption, {descendants: true}) _items: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n    new EventEmitter<MatSelectionListChange>();\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether selection is limited to one or multiple items (default multiple). */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._multiple) {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && this._initialized) {\n        throw new Error(\n          'Cannot change `multiple` mode of mat-selection-list after initialization.');\n      }\n\n      this._multiple = newValue;\n      this.selectedOptions = new SelectionModel(this._multiple, this.selectedOptions.selected);\n    }\n  }\n\n  /** The currently selected options. */\n  selectedOptions = new SelectionModel<MatListOption>(this._multiple);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[]|null;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  constructor(element: ElementRef<HTMLElement>, @Inject(DOCUMENT) document: any) {\n    super(element, document);\n    super._initWithAdapter(getSelectionListAdapter(this));\n  }\n\n  ngAfterViewInit() {\n    // Mark the selection list as initialized so that the `multiple`\n    // binding can no longer be changed.\n    this._initialized = true;\n\n    // Update the options if a control value has been set initially.\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.changed.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n\n      // Sync the newly selected options with the foundation. Also reset tabindex for all\n      // items if the list is currently not focused. We do this so that always the first\n      // selected list item is focused when users tab into the selection list.\n      this._syncSelectedOptionsWithFoundation();\n      this._resetTabindexForItemsIfBlurred();\n    });\n\n    // Complete the list foundation initialization.\n    super.ngAfterViewInit();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disabledChanges = changes['disabled'];\n    const disableRippleChanges = changes['disableRipple'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n      (disabledChanges && !disabledChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus(options?: FocusOptions) {\n    this._element.nativeElement.focus(options);\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(options: MatListOption[]) {\n    this.selectionChange.emit(new MatSelectionListChange(this, options[0], options));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Resets tabindex for all options and sets tabindex for the first selected option so that\n   * it will become active when users tab into the selection-list. This will be a noop if the\n   * list is currently focused as otherwise multiple options might become reachable through tab.\n   * e.g. A user currently already focused an option. We set tabindex to a new option but the\n   * focus on the current option does persist. Pressing `TAB` then might go to the other option\n   * that received a tabindex. We can skip the reset here as the MDC foundation resets the\n   * tabindex to the first selected option automatically once the current item is blurred.\n   */\n  private _resetTabindexForItemsIfBlurred() {\n    // If focus is inside the list already, then we do not change the tab index of the list.\n    // Changing it while an item is focused could cause multiple items to be reachable through\n    // the tab key. The MDC list foundation will update the tabindex on blur to the appropriate\n    // selected or focused item.\n    if (!this._adapter.isFocusInsideList()) {\n      this._resetTabindexToFirstSelectedOrFocusedItem();\n    }\n  }\n\n  private _syncSelectedOptionsWithFoundation() {\n    if (this._multiple) {\n      this._foundation.setSelectedIndex(this.selectedOptions.selected\n          .map(o => this._itemsArr.indexOf(o)));\n    } else {\n      const selected = this.selectedOptions.selected[0];\n      const index = selected === undefined ? -1 : this._itemsArr.indexOf(selected);\n      this._foundation.setSelectedIndex(index);\n    }\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean, skipDisabled?: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if ((!skipDisabled || !option.disabled) && option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  // Note: This getter exists for backwards compatibility. The `_items` query list\n  // cannot be named `options` as it will be picked up by the interactive list base.\n  /** The option components contained within this selection-list. */\n  get options(): QueryList<MatListOption> {\n    return this._items;\n  }\n\n  static ngAcceptInputType_multiple: BooleanInput;\n}\n\n// TODO: replace with class using inheritance once material-components-web/pull/6256 is available.\n/** Gets a `MDCListAdapter` instance for the given selection list. */\nfunction getSelectionListAdapter(list: MatSelectionList): MDCListAdapter {\n  const baseAdapter = getInteractiveListAdapter(list);\n  return {\n    ...baseAdapter,\n    hasRadioAtIndex(): boolean {\n      // If multi selection is not used, we treat the list as a radio list so that\n      // the MDC foundation does not keep track of multiple selected list options.\n      // Note that we cannot use MDC's non-radio single selection mode as that one\n      // will keep track of the selection state internally and we cannot update a\n      // control model, or notify/update list-options on selection change. The radio\n      // mode is similar to what we want but with support for change notification\n      // (i.e. `setCheckedCheckboxOrRadioAtIndex`) while maintaining single selection.\n      return !list.multiple;\n    },\n    hasCheckboxAtIndex() {\n      // If multi selection is used, we treat the list as a checkbox list so that\n      // the MDC foundation can keep track of multiple selected list options.\n      return list.multiple;\n    },\n    isCheckboxCheckedAtIndex(index: number) {\n      return list._itemsArr[index].selected;\n    },\n    setCheckedCheckboxOrRadioAtIndex(index: number, checked: boolean) {\n      list._itemsArr[index].selected = checked;\n    },\n    setAttributeForElementIndex(index: number, attribute: string, value: string): void {\n      // MDC list by default sets `aria-checked` for multi selection lists. We do not want to\n      // use this as that signifies a bad accessibility experience. Instead, we change the\n      // attribute update to `aria-selected` as that works best with list-options. See:\n      // https://github.com/material-components/material-components-web/issues/6367.\n      // TODO: Remove this once material-components-web#6367 is improved/fixed.\n      if (attribute === 'aria-checked') {\n        attribute = 'aria-selected';\n      }\n\n      baseAdapter.setAttributeForElementIndex(index, attribute, value);\n    },\n    notifyAction(index: number): void {\n      list._emitChangeEvent([list._itemsArr[index]]);\n    },\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material-experimental/mdc-core';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatActionList} from './action-list';\nimport {\n  MatList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatNavList} from './nav-list';\nimport {MatSelectionList} from './selection-list';\nimport {MatListOption} from './list-option';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatLineModule,\n    MatRippleModule,\n    MatPseudoCheckboxModule,\n  ],\n  exports: [\n    MatList,\n    MatActionList,\n    MatNavList,\n    MatSelectionList,\n    MatListItem,\n    MatListOption,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatDividerModule,\n    MatLineModule,\n  ],\n  declarations: [\n    MatList,\n    MatActionList,\n    MatNavList,\n    MatSelectionList,\n    MatListItem,\n    MatListOption,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n  ]\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './list';\nexport * from './action-list';\nexport * from './nav-list';\nexport * from './selection-list';\nexport * from './module';\nexport * from './list-option';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {MatInteractiveListBase as Éµangular_material_src_material_experimental_mdc_list_mdc_list_c} from './interactive-list-base';\nexport {MatListBase as Éµangular_material_src_material_experimental_mdc_list_mdc_list_b,MatListItemBase as Éµangular_material_src_material_experimental_mdc_list_mdc_list_a} from './list-base';"],"names":[],"mappings":"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"}