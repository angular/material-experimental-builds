{"version":3,"file":"mdc-radio.js","sources":["../../../../../../src/material-experimental/mdc-radio/radio.ts","../../../../../../src/material-experimental/mdc-radio/module.ts","../../../../../../src/material-experimental/mdc-radio/public-api.ts","../../../../../../src/material-experimental/mdc-radio/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {MDCRadioAdapter, MDCRadioFoundation} from '@material/radio';\nimport {\n  MAT_RADIO_DEFAULT_OPTIONS,\n  _MatRadioButtonBase,\n  MatRadioDefaultOptions,\n  _MatRadioGroupBase,\n} from '@angular/material/radio';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {RippleAnimationConfig} from '@angular/material-experimental/mdc-core';\nimport {numbers} from '@material/ripple';\n\n// Re-export symbols used by the base Material radio component so that users do not need to depend\n// on both packages.\nexport {MatRadioChange, MAT_RADIO_DEFAULT_OPTIONS} from '@angular/material/radio';\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nexport const MAT_RADIO_GROUP =\n  new InjectionToken<_MatRadioGroupBase<_MatRadioButtonBase>>('MatRadioGroup');\n\n/** Configuration for the ripple animation. */\nconst RIPPLE_ANIMATION_CONFIG: RippleAnimationConfig = {\n  enterDuration: numbers.DEACTIVATION_TIMEOUT_MS,\n  exitDuration: numbers.FG_DEACTIVATION_MS\n};\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [\n    MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n    {provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup},\n  ],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-mdc-radio-group',\n  },\n})\nexport class MatRadioGroup extends _MatRadioGroupBase<MatRadioButton> {\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), {descendants: true})\n      _radios: QueryList<MatRadioButton>;\n}\n\n@Component({\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  host: {\n    'class': 'mat-mdc-radio-button',\n    '[attr.id]': 'id',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[attr.aria-describedby]': 'null',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  inputs: ['disableRipple', 'tabIndex'],\n  exportAs: 'matRadioButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonBase implements AfterViewInit, OnDestroy {\n\n  private _radioAdapter: MDCRadioAdapter = {\n    addClass: (className: string) => this._setClass(className, true),\n    removeClass: (className: string) => this._setClass(className, false),\n    setNativeControlDisabled: (disabled: boolean) => {\n      if (this.disabled !== disabled) {\n        this.disabled = disabled;\n        this._changeDetector.markForCheck();\n      }\n    },\n  };\n\n  /** Configuration for the underlying ripple. */\n  _rippleAnimation: RippleAnimationConfig = RIPPLE_ANIMATION_CONFIG;\n\n  _radioFoundation = new MDCRadioFoundation(this._radioAdapter);\n  _classes: {[key: string]: boolean} = {};\n\n  constructor(@Optional() @Inject(MAT_RADIO_GROUP) radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              _changeDetector: ChangeDetectorRef,\n              _focusMonitor: FocusMonitor,\n              _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string,\n              @Optional() @Inject(MAT_RADIO_DEFAULT_OPTIONS)\n              _providerOverride?: MatRadioDefaultOptions,\n              @Attribute('tabindex') tabIndex?: string) {\n    super(radioGroup, elementRef, _changeDetector, _focusMonitor,\n        _radioDispatcher, _animationMode, _providerOverride, tabIndex);\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    this._radioFoundation.init();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._radioFoundation.destroy();\n  }\n\n  private _setClass(cssClass: string, active: boolean) {\n    this._classes = {...this._classes, [cssClass]: active};\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Overrides the parent function so that the foundation can be set with the current disabled\n   * state.\n   */\n  protected _setDisabled(value: boolean) {\n    super._setDisabled(value);\n    this._radioFoundation.setDisabled(this.disabled);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material-experimental/mdc-core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatRadioGroup, MatRadioButton],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './radio';\nexport * from './module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}