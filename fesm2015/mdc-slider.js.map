{"version":3,"file":"mdc-slider.js","sources":["../../../../../../src/material-experimental/mdc-slider/global-change-and-input-listener.ts","../../../../../../src/material-experimental/mdc-slider/slider.ts","../../../../../../src/material-experimental/mdc-slider/module.ts","../../../../../../src/material-experimental/mdc-slider/public-api.ts","../../../../../../src/material-experimental/mdc-slider/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone, OnDestroy} from '@angular/core';\nimport {SpecificEventListener} from '@material/base/types';\nimport {fromEvent, Observable, Subject, Subscription} from 'rxjs';\nimport {finalize, share, takeUntil} from 'rxjs/operators';\n\n/**\n * Handles listening for all change and input events that occur on the document.\n *\n * This service exposes a single method #listen to allow users to subscribe to change and input\n * events that occur on the document. Since listening for these events can be expensive, we use\n * #fromEvent which will lazily attach a listener when the first subscription is made and remove the\n * listener once the last observer unsubscribes.\n */\n@Injectable({providedIn: 'root'})\nexport class GlobalChangeAndInputListener<K extends 'change'|'input'> implements OnDestroy {\n\n  /** The injected document if available or fallback to the global document reference. */\n  private _document: Document;\n\n  /** Stores the subjects that emit the events that occur on the global document. */\n  private _observables = new Map<K, Observable<Event>>();\n\n  /** The notifier that triggers the global event observables to stop emitting and complete. */\n  private _destroyed = new Subject();\n\n  constructor(@Inject(DOCUMENT) document: any, private _ngZone: NgZone) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._observables.clear();\n  }\n\n  /** Returns a subscription to global change or input events. */\n  listen(type: K, callback: SpecificEventListener<K>): Subscription {\n    // If this is the first time we are listening to this event, create the observable for it.\n    if (!this._observables.has(type)) {\n      this._observables.set(type, this._createGlobalEventObservable(type));\n    }\n\n    return this._ngZone.runOutsideAngular(() =>\n      this._observables.get(type)!.subscribe((event: Event) =>\n        this._ngZone.run(() => callback(event))\n      )\n    );\n  }\n\n  /** Creates an observable that emits all events of the given type. */\n  private _createGlobalEventObservable(type: K) {\n    return fromEvent(this._document, type, {capture: true, passive: true}).pipe(\n      takeUntil(this._destroyed),\n      finalize(() => this._observables.delete(type)),\n      share(),\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  MatRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisableRipple,\n  RippleAnimationConfig,\n  RippleGlobalOptions,\n  RippleRef,\n  RippleState,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {SpecificEventListener, EventType} from '@material/base/types';\nimport {MDCSliderAdapter, MDCSliderFoundation, Thumb, TickMark} from '@material/slider';\nimport {Subscription} from 'rxjs';\nimport {GlobalChangeAndInputListener} from './global-change-and-input-listener';\n\n/** Represents a drag event emitted by the MatSlider component. */\nexport interface MatSliderDragEvent {\n  /** The MatSliderThumb that was interacted with. */\n  source: MatSliderThumb;\n\n  /** The MatSlider that was interacted with. */\n  parent: MatSlider;\n\n  /** The current value of the slider. */\n  value: number;\n}\n\n/**\n * The visual slider thumb.\n *\n * Handles the slider thumb ripple states (hover, focus, and active),\n * and displaying the value tooltip on discrete sliders.\n * @docs-private\n */\n@Component({\n  selector: 'mat-slider-visual-thumb',\n  templateUrl: './slider-thumb.html',\n  styleUrls: ['slider-thumb.css'],\n  host: {\n    'class': 'mdc-slider__thumb mat-mdc-slider-visual-thumb',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSliderVisualThumb implements AfterViewInit, OnDestroy {\n  /** Whether the slider displays a numeric value label upon pressing the thumb. */\n  @Input() discrete: boolean;\n\n  /** Indicates which slider thumb this input corresponds to. */\n  @Input() thumbPosition: Thumb;\n\n  /** The display value of the slider thumb. */\n  @Input() valueIndicatorText: string;\n\n  /** Whether ripples on the slider thumb should be disabled. */\n  @Input() disableRipple: boolean = false;\n\n  /** The MatRipple for this slider thumb. */\n  @ViewChild(MatRipple) private readonly _ripple: MatRipple;\n\n  /** The slider thumb knob */\n  @ViewChild('knob') _knob: ElementRef<HTMLElement>;\n\n  /** The slider input corresponding to this slider thumb. */\n  private _sliderInput: MatSliderThumb;\n\n  /** The RippleRef for the slider thumbs hover state. */\n  private _hoverRippleRef: RippleRef | undefined;\n\n  /** The RippleRef for the slider thumbs focus state. */\n  private _focusRippleRef: RippleRef | undefined;\n\n  /** The RippleRef for the slider thumbs active state. */\n  private _activeRippleRef: RippleRef | undefined;\n\n  /** Whether the slider thumb is currently being pressed. */\n  private _isActive: boolean = false;\n\n  /** Whether the slider thumb is currently being hovered. */\n  private _isHovered: boolean = false;\n\n  constructor(\n    private readonly _ngZone: NgZone,\n    @Inject(forwardRef(() => MatSlider)) private readonly _slider: MatSlider,\n    private readonly _elementRef: ElementRef<HTMLElement>) {}\n\n  ngAfterViewInit() {\n    this._ripple.radius = 24;\n    this._sliderInput = this._slider._getInput(this.thumbPosition);\n\n    // Note that we don't unsubscribe from these, because they're complete on destroy.\n    this._sliderInput.dragStart.subscribe(event => this._onDragStart(event));\n    this._sliderInput.dragEnd.subscribe(event => this._onDragEnd(event));\n\n    this._sliderInput._focus.subscribe(() => this._onFocus());\n    this._sliderInput._blur.subscribe(() => this._onBlur());\n\n    // These two listeners don't update any data bindings so we bind them\n    // outside of the NgZone to prevent Angular from needlessly running change detection.\n    this._ngZone.runOutsideAngular(() => {\n      this._elementRef.nativeElement.addEventListener('mouseenter', this._onMouseEnter);\n      this._elementRef.nativeElement.addEventListener('mouseleave', this._onMouseLeave);\n    });\n  }\n\n  ngOnDestroy() {\n    this._elementRef.nativeElement.removeEventListener('mouseenter', this._onMouseEnter);\n    this._elementRef.nativeElement.removeEventListener('mouseleave', this._onMouseLeave);\n  }\n\n  private _onMouseEnter = (): void => {\n    this._isHovered = true;\n    // We don't want to show the hover ripple on top of the focus ripple.\n    // This can happen if the user tabs to a thumb and then the user moves their cursor over it.\n    if (!this._isShowingRipple(this._focusRippleRef)) {\n      this._showHoverRipple();\n    }\n  }\n\n  private _onMouseLeave = (): void => {\n    this._isHovered = false;\n    this._hoverRippleRef?.fadeOut();\n  }\n\n  private _onFocus(): void {\n    // We don't want to show the hover ripple on top of the focus ripple.\n    // Happen when the users cursor is over a thumb and then the user tabs to it.\n    this._hoverRippleRef?.fadeOut();\n    this._showFocusRipple();\n  }\n\n  private _onBlur(): void {\n    // Happens when the user tabs away while still dragging a thumb.\n    if (!this._isActive) {\n      this._focusRippleRef?.fadeOut();\n    }\n    // Happens when the user tabs away from a thumb but their cursor is still over it.\n    if (this._isHovered) {\n      this._showHoverRipple();\n    }\n  }\n\n  private _onDragStart(event: MatSliderDragEvent): void {\n    if (event.source._thumbPosition === this.thumbPosition) {\n      this._isActive = true;\n      this._showActiveRipple();\n    }\n  }\n\n  private _onDragEnd(event: MatSliderDragEvent): void {\n    if (event.source._thumbPosition === this.thumbPosition) {\n      this._isActive = false;\n      this._activeRippleRef?.fadeOut();\n      // Happens when the user starts dragging a thumb, tabs away, and then stops dragging.\n      if (!this._sliderInput._isFocused()) {\n        this._focusRippleRef?.fadeOut();\n      }\n    }\n  }\n\n  /** Handles displaying the hover ripple. */\n  private _showHoverRipple(): void {\n    if (!this._slider._noopAnimations && !this._isShowingRipple(this._hoverRippleRef)) {\n      this._hoverRippleRef = this._showRipple({ enterDuration: 0, exitDuration: 0 });\n      this._hoverRippleRef?.element.classList.add('mat-mdc-slider-hover-ripple');\n    }\n  }\n\n  /** Handles displaying the focus ripple. */\n  private _showFocusRipple(): void {\n    // Show the focus ripple event if noop animations are enabled.\n    if (!this._isShowingRipple(this._focusRippleRef)) {\n      this._focusRippleRef = this._showRipple({ enterDuration: 0, exitDuration: 0 });\n      this._focusRippleRef?.element.classList.add('mat-mdc-slider-focus-ripple');\n    }\n  }\n\n  /** Handles displaying the active ripple. */\n  private _showActiveRipple(): void {\n    if (!this._slider._noopAnimations && !this._isShowingRipple(this._activeRippleRef)) {\n      this._activeRippleRef = this._showRipple({ enterDuration: 225, exitDuration: 400 });\n      this._activeRippleRef?.element.classList.add('mat-mdc-slider-active-ripple');\n    }\n  }\n\n  /** Whether the given rippleRef is currently fading in or visible. */\n  private _isShowingRipple(rippleRef?: RippleRef): boolean {\n    return rippleRef?.state === RippleState.FADING_IN || rippleRef?.state === RippleState.VISIBLE;\n  }\n\n  /** Manually launches the slider thumb ripple using the specified ripple animation config. */\n  private _showRipple(animation: RippleAnimationConfig): RippleRef | undefined {\n    if (this.disableRipple) {\n      return;\n    }\n    return this._ripple.launch(\n      {animation, centered: true, persistent: true},\n    );\n  }\n\n  /** Gets the hosts native HTML element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Gets the native HTML element of the slider thumb knob. */\n  _getKnob(): HTMLElement {\n    return this._knob.nativeElement;\n  }\n}\n\n/**\n * Directive that adds slider-specific behaviors to an input element inside `<mat-slider>`.\n * Up to two may be placed inside of a `<mat-slider>`.\n *\n * If one is used, the selector `matSliderThumb` must be used, and the outcome will be a normal\n * slider. If two are used, the selectors `matSliderStartThumb` and `matSliderEndThumb` must be\n * used, and the outcome will be a range slider with two slider thumbs.\n */\n@Directive({\n  selector: 'input[matSliderThumb], input[matSliderStartThumb], input[matSliderEndThumb]',\n  exportAs: 'matSliderThumb',\n  host: {\n    'class': 'mdc-slider__input',\n    'type': 'range',\n    '(blur)': '_onBlur()',\n    '(focus)': '_focus.emit()',\n  },\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: MatSliderThumb,\n    multi: true\n  }],\n})\nexport class MatSliderThumb implements AfterViewInit, ControlValueAccessor, OnInit, OnDestroy {\n\n  // ** IMPORTANT NOTE **\n  //\n  // The way `value` is implemented for MatSliderThumb doesn't follow typical Angular conventions.\n  // Normally we would define a private variable `_value` as the source of truth for the value of\n  // the slider thumb input. The source of truth for the value of the slider inputs has already\n  // been decided for us by MDC to be the value attribute on the slider thumb inputs. This is\n  // because the MDC foundation and adapter expect that the value attribute is the source of truth\n  // for the slider inputs.\n  //\n  // Also, note that the value attribute is completely disconnected from the value property.\n\n  /** The current value of this slider input. */\n  @Input()\n  get value(): number {\n    return coerceNumberProperty(this._hostElement.getAttribute('value'));\n  }\n  set value(v: number) {\n    const value = coerceNumberProperty(v);\n\n    // If the foundation has already been initialized, we need to\n    // relay any value updates to it so that it can update the UI.\n    if (this._slider._initialized) {\n      this._slider._setValue(value, this._thumbPosition);\n    } else {\n      // Setup for the MDC foundation.\n      this._hostElement.setAttribute('value', `${value}`);\n    }\n  }\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when the slider thumb starts being dragged. */\n  @Output() readonly dragStart: EventEmitter<MatSliderDragEvent>\n    = new EventEmitter<MatSliderDragEvent>();\n\n  /** Event emitted when the slider thumb stops being dragged. */\n  @Output() readonly dragEnd: EventEmitter<MatSliderDragEvent>\n    = new EventEmitter<MatSliderDragEvent>();\n\n  /** Event emitted every time the MatSliderThumb is blurred. */\n  @Output() readonly _blur: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted every time the MatSliderThumb is focused. */\n  @Output() readonly _focus: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Used to determine the disabled state of the MatSlider (ControlValueAccessor).\n   * For ranged sliders, the disabled state of the MatSlider depends on the combined state of the\n   * start and end inputs. See MatSlider._updateDisabled.\n   */\n  _disabled: boolean = false;\n\n  /**\n   * A callback function that is called when the\n   * control's value changes in the UI (ControlValueAccessor).\n   */\n  _onChange: (value: any) => void = () => {};\n\n  /**\n   * A callback function that is called by the forms API on\n   * initialization to update the form model on blur (ControlValueAccessor).\n   */\n  private _onTouched: () => void = () => {};\n\n  /** Indicates which slider thumb this input corresponds to. */\n  _thumbPosition: Thumb = this._elementRef.nativeElement.hasAttribute('matSliderStartThumb')\n    ? Thumb.START\n    : Thumb.END;\n\n  /** The injected document if available or fallback to the global document reference. */\n  private _document: Document;\n\n  /** The host native HTML input element. */\n  _hostElement: HTMLInputElement;\n\n  constructor(\n    @Inject(DOCUMENT) document: any,\n    @Inject(forwardRef(() => MatSlider)) private readonly _slider: MatSlider,\n    private readonly _elementRef: ElementRef<HTMLInputElement>) {\n      this._document = document;\n      this._hostElement = _elementRef.nativeElement;\n    }\n\n  ngOnInit() {\n    // By calling this in ngOnInit() we guarantee that the sibling sliders initial value by\n    // has already been set by the time we reach ngAfterViewInit().\n    this._initializeInputValueAttribute();\n    this._initializeAriaValueText();\n  }\n\n  ngAfterViewInit() {\n    this._initializeInputState();\n    this._initializeInputValueProperty();\n\n    // Setup for the MDC foundation.\n    if (this._slider.disabled) {\n      this._hostElement.disabled = true;\n    }\n  }\n\n  ngOnDestroy() {\n    this.dragStart.complete();\n    this.dragEnd.complete();\n    this._focus.complete();\n    this._blur.complete();\n    this.valueChange.complete();\n  }\n\n  _onBlur(): void {\n    this._onTouched();\n    this._blur.emit();\n  }\n\n  _emitFakeEvent(type: 'change'|'input') {\n    const event = new Event(type) as any;\n    event._matIsHandled = true;\n    this._hostElement.dispatchEvent(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any): void {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this._disabled = isDisabled;\n    this._slider._updateDisabled();\n  }\n\n  focus(): void {\n    this._hostElement.focus();\n  }\n\n  blur(): void {\n    this._hostElement.blur();\n  }\n\n  /** Returns true if this slider input currently has focus. */\n  _isFocused(): boolean {\n    return this._document.activeElement === this._hostElement;\n  }\n\n  /**\n   * Sets the min, max, and step properties on the slider thumb input.\n   *\n   * Must be called AFTER the sibling slider thumb input is guaranteed to have had its value\n   * attribute value set. For a range slider, the min and max of the slider thumb input depends on\n   * the value of its sibling slider thumb inputs value.\n   *\n   * Must be called BEFORE the value property is set. In the case where the min and max have not\n   * yet been set and we are setting the input value property to a value outside of the native\n   * inputs default min or max. The value property would not be set to our desired value, but\n   * instead be capped at either the default min or max.\n   *\n   */\n  _initializeInputState(): void {\n    const min = this._hostElement.hasAttribute('matSliderEndThumb')\n      ? this._slider._getInput(Thumb.START).value\n      : this._slider.min;\n    const max = this._hostElement.hasAttribute('matSliderStartThumb')\n      ? this._slider._getInput(Thumb.END).value\n      : this._slider.max;\n    this._hostElement.min = `${min}`;\n    this._hostElement.max = `${max}`;\n    this._hostElement.step = `${this._slider.step}`;\n  }\n\n  /**\n   * Sets the value property on the slider thumb input.\n   *\n   * Must be called AFTER the min and max have been set. In the case where the min and max have not\n   * yet been set and we are setting the input value property to a value outside of the native\n   * inputs default min or max. The value property would not be set to our desired value, but\n   * instead be capped at either the default min or max.\n   */\n  private _initializeInputValueProperty(): void {\n    this._hostElement.value = `${this.value}`;\n  }\n\n  /**\n   * Ensures the value attribute is initialized.\n   *\n   * Must be called BEFORE the min and max are set. For a range slider, the min and max of the\n   * slider thumb input depends on the value of its sibling slider thumb inputs value.\n   */\n  private _initializeInputValueAttribute(): void {\n    // Only set the default value if an initial value has not already been provided.\n    if (!this._hostElement.hasAttribute('value')) {\n      this.value = this._hostElement.hasAttribute('matSliderEndThumb')\n        ? this._slider.max\n        : this._slider.min;\n    }\n  }\n\n  /**\n   * Initializes the aria-valuetext attribute.\n   *\n   * Must be called AFTER the value attribute is set. This is because the slider's parent\n   * `displayWith` function is used to set the `aria-valuetext` attribute.\n   */\n  private _initializeAriaValueText(): void {\n    this._hostElement.setAttribute('aria-valuetext', this._slider.displayWith(this.value));\n  }\n\n  static ngAcceptInputType_value: NumberInput;\n}\n\n// Boilerplate for applying mixins to MatSlider.\nconst _MatSliderMixinBase = mixinColor(mixinDisableRipple(class {\n  constructor(public _elementRef: ElementRef<HTMLElement>) {}\n}), 'primary');\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  selector: 'mat-slider',\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  host: {\n    'class': 'mat-mdc-slider mdc-slider',\n    '[class.mdc-slider--range]': '_isRange()',\n    '[class.mdc-slider--disabled]': 'disabled',\n    '[class.mdc-slider--discrete]': 'discrete',\n    '[class.mdc-slider--tick-marks]': 'showTickMarks',\n    '[class._mat-animation-noopable]': '_noopAnimations',\n  },\n  exportAs: 'matSlider',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  inputs: ['color', 'disableRipple'],\n})\nexport class MatSlider extends _MatSliderMixinBase\n  implements AfterViewInit, CanDisableRipple, OnDestroy {\n  /** The slider thumb(s). */\n  @ViewChildren(MatSliderVisualThumb) _thumbs: QueryList<MatSliderVisualThumb>;\n\n  /** The active section of the slider track. */\n  @ViewChild('trackActive') _trackActive: ElementRef<HTMLElement>;\n\n  /** The sliders hidden range input(s). */\n  @ContentChildren(MatSliderThumb, {descendants: false})\n  _inputs: QueryList<MatSliderThumb>;\n\n  /** Whether the slider is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(v: boolean) {\n    this._setDisabled(coerceBooleanProperty(v));\n    this._updateInputsDisabledState();\n  }\n  private _disabled: boolean = false;\n\n  /** Whether the slider displays a numeric value label upon pressing the thumb. */\n  @Input()\n  get discrete(): boolean { return this._discrete; }\n  set discrete(v: boolean) { this._discrete = coerceBooleanProperty(v); }\n  private _discrete: boolean = false;\n\n  /** Whether the slider displays tick marks along the slider track. */\n  @Input()\n  get showTickMarks(): boolean { return this._showTickMarks; }\n  set showTickMarks(v: boolean) { this._showTickMarks = coerceBooleanProperty(v); }\n  private _showTickMarks: boolean = false;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n    this._reinitialize();\n  }\n  private _min: number = 0;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._reinitialize();\n  }\n  private _max: number = 100;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n    this._reinitialize();\n  }\n  private _step: number = 1;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: ((value: number) => string) = (value: number) => `${value}`;\n\n  /** Instance of the MDC slider foundation for this slider. */\n  private _foundation = new MDCSliderFoundation(new SliderAdapter(this));\n\n  /** Whether the foundation has been initialized. */\n  _initialized: boolean = false;\n\n  /** The injected document if available or fallback to the global document reference. */\n  _document: Document;\n\n  /**\n   * The defaultView of the injected document if\n   * available or fallback to global window reference.\n   */\n  _window: Window;\n\n  /** Used to keep track of & render the active & inactive tick marks on the slider track. */\n  _tickMarks: TickMark[];\n\n  /** The display value of the start thumb. */\n  _startValueIndicatorText: string;\n\n  /** The display value of the end thumb. */\n  _endValueIndicatorText: string;\n\n  /** Whether animations have been disabled. */\n  _noopAnimations: boolean;\n\n  /**\n   * Whether the browser supports pointer events.\n   *\n   * We exclude iOS to mirror the MDC Foundation. The MDC Foundation cannot use pointer events on\n   * iOS because of this open bug - https://bugs.webkit.org/show_bug.cgi?id=220196.\n   */\n  private _SUPPORTS_POINTER_EVENTS = typeof PointerEvent !== 'undefined'\n    && !!PointerEvent\n    && !this._platform.IOS;\n\n  /** Subscription to changes to the directionality (LTR / RTL) context for the application. */\n  private _dirChangeSubscription: Subscription;\n\n  constructor(\n    readonly _ngZone: NgZone,\n    readonly _cdr: ChangeDetectorRef,\n    elementRef: ElementRef<HTMLElement>,\n    private readonly _platform: Platform,\n    readonly _globalChangeAndInputListener: GlobalChangeAndInputListener<'input'|'change'>,\n    @Inject(DOCUMENT) document: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n      readonly _globalRippleOptions?: RippleGlobalOptions,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n      super(elementRef);\n      this._document = document;\n      this._window = this._document.defaultView || window;\n      this._noopAnimations = animationMode === 'NoopAnimations';\n      this._dirChangeSubscription = this._dir.change.subscribe(() => this._onDirChange());\n      this._attachUISyncEventListener();\n    }\n\n  ngAfterViewInit() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      _validateInputs(\n        this._isRange(),\n        this._getInputElement(Thumb.START),\n        this._getInputElement(Thumb.END),\n      );\n    }\n    if (this._platform.isBrowser) {\n      this._foundation.init();\n      this._foundation.layout();\n      this._initialized = true;\n    }\n    // The MDC foundation requires access to the view and content children of the MatSlider. In\n    // order to access the view and content children of MatSlider we need to wait until change\n    // detection runs and materializes them. That is why we call init() and layout() in\n    // ngAfterViewInit().\n    //\n    // The MDC foundation then uses the information it gathers from the DOM to compute an initial\n    // value for the tickMarks array. It then tries to update the component data, but because it is\n    // updating the component data AFTER change detection already ran, we will get a changed after\n    // checked error. Because of this, we need to force change detection to update the UI with the\n    // new state.\n    this._cdr.detectChanges();\n  }\n\n  ngOnDestroy() {\n    if (this._platform.isBrowser) {\n      this._foundation.destroy();\n    }\n    this._dirChangeSubscription.unsubscribe();\n    this._removeUISyncEventListener();\n  }\n\n  /** Returns true if the language direction for this slider element is right to left. */\n  _isRTL() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  /**\n   * Attaches an event listener that keeps sync the slider UI and the foundation in sync.\n   *\n   * Because the MDC Foundation stores the value of the bounding client rect when layout is called,\n   * we need to keep calling layout to avoid the position of the slider getting out of sync with\n   * what the foundation has stored. If we don't do this, the foundation will not be able to\n   * correctly calculate the slider value on click/slide.\n   */\n   _attachUISyncEventListener(): void {\n    // Implementation detail: It may seem weird that we are using \"mouseenter\" instead of\n    // \"mousedown\" as the default for when a browser does not support pointer events. While we\n    // would prefer to use \"mousedown\" as the default, for some reason it does not work (the\n    // callback is never triggered).\n    if (this._SUPPORTS_POINTER_EVENTS) {\n      this._elementRef.nativeElement.addEventListener('pointerdown', this._layout);\n    } else {\n      this._elementRef.nativeElement.addEventListener('mouseenter', this._layout);\n      this._elementRef.nativeElement.addEventListener('touchstart', this._layout);\n    }\n  }\n\n  /** Removes the event listener that keeps sync the slider UI and the foundation in sync. */\n  _removeUISyncEventListener(): void {\n    if (this._SUPPORTS_POINTER_EVENTS) {\n      this._elementRef.nativeElement.removeEventListener('pointerdown', this._layout);\n    } else {\n      this._elementRef.nativeElement.removeEventListener('mouseenter', this._layout);\n      this._elementRef.nativeElement.removeEventListener('touchstart', this._layout);\n    }\n  }\n\n  /** Wrapper function for calling layout (needed for adding & removing an event listener). */\n  private _layout = () => this._foundation.layout();\n\n  /**\n   * Reinitializes the slider foundation and input state(s).\n   *\n   * The MDC Foundation does not support changing some slider attributes after it has been\n   * initialized (e.g. min, max, and step). To continue supporting this feature, we need to\n   * destroy the foundation and re-initialize everything whenever we make these changes.\n   */\n  private _reinitialize(): void {\n    if (this._initialized) {\n      this._foundation.destroy();\n      if (this._isRange()) {\n        this._getInput(Thumb.START)._initializeInputState();\n      }\n      this._getInput(Thumb.END)._initializeInputState();\n      this._foundation.init();\n      this._foundation.layout();\n    }\n  }\n\n  /** Handles updating the slider foundation after a dir change. */\n  private _onDirChange(): void {\n    this._ngZone.runOutsideAngular(() => {\n      // We need to call layout() a few milliseconds after the dir change callback\n      // because we need to wait until the bounding client rect of the slider has updated.\n      setTimeout(() => this._foundation.layout(), 10);\n    });\n  }\n\n  /** Sets the value of a slider thumb. */\n  _setValue(value: number, thumbPosition: Thumb): void {\n    thumbPosition === Thumb.START\n      ? this._foundation.setValueStart(value)\n      : this._foundation.setValue(value);\n  }\n\n  /** Sets the disabled state of the MatSlider. */\n  private _setDisabled(value: boolean) {\n    this._disabled = value;\n\n    // If we want to disable the slider after the foundation has been initialized,\n    // we need to inform the foundation by calling `setDisabled`. Also, we can't call\n    // this before initializing the foundation because it will throw errors.\n    if (this._initialized) {\n      this._foundation.setDisabled(value);\n    }\n  }\n\n  /** Sets the disabled state of the individual slider thumb(s) (ControlValueAccessor). */\n  private _updateInputsDisabledState() {\n    if (this._initialized) {\n      this._getInput(Thumb.END)._disabled = true;\n      if (this._isRange()) {\n        this._getInput(Thumb.START)._disabled = true;\n      }\n    }\n  }\n\n  /** Whether this is a ranged slider. */\n  _isRange(): boolean {\n    return this._inputs.length === 2;\n  }\n\n  /** Sets the disabled state based on the disabled state of the inputs (ControlValueAccessor). */\n  _updateDisabled(): void {\n    const disabled = this._inputs.some(input => input._disabled);\n    this._setDisabled(disabled);\n  }\n\n  /** Gets the slider thumb input of the given thumb position. */\n  _getInput(thumbPosition: Thumb): MatSliderThumb {\n    return thumbPosition === Thumb.END ? this._inputs.last : this._inputs.first;\n  }\n\n  /** Gets the slider thumb HTML input element of the given thumb position. */\n  _getInputElement(thumbPosition: Thumb): HTMLInputElement {\n    return this._getInput(thumbPosition)._hostElement;\n  }\n\n  _getThumb(thumbPosition: Thumb): MatSliderVisualThumb {\n    return thumbPosition === Thumb.END ? this._thumbs.last : this._thumbs.first;\n  }\n\n  /** Gets the slider thumb HTML element of the given thumb position. */\n  _getThumbElement(thumbPosition: Thumb): HTMLElement {\n    return this._getThumb(thumbPosition)._getHostElement();\n  }\n\n  /** Gets the slider knob HTML element of the given thumb position. */\n  _getKnobElement(thumbPosition: Thumb): HTMLElement {\n    return this._getThumb(thumbPosition)._getKnob();\n  }\n\n  /**\n   * Sets the value indicator text of the given thumb position using the given value.\n   *\n   * Uses the `displayWith` function if one has been provided. Otherwise, it just uses the\n   * numeric value as a string.\n   */\n  _setValueIndicatorText(value: number, thumbPosition: Thumb) {\n    thumbPosition === Thumb.START\n      ? this._startValueIndicatorText = this.displayWith(value)\n      : this._endValueIndicatorText = this.displayWith(value);\n    this._cdr.markForCheck();\n  }\n\n  /** Gets the value indicator text for the given thumb position. */\n  _getValueIndicatorText(thumbPosition: Thumb): string {\n    return thumbPosition === Thumb.START\n      ? this._startValueIndicatorText\n      : this._endValueIndicatorText;\n  }\n\n  /** Determines the class name for a HTML element. */\n  _getTickMarkClass(tickMark: TickMark): string {\n    return tickMark === TickMark.ACTIVE\n      ? 'mdc-slider__tick-mark--active'\n      : 'mdc-slider__tick-mark--inactive';\n  }\n\n  /** Whether the slider thumb ripples should be disabled. */\n  _isRippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this._globalRippleOptions?.disabled;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_discrete: BooleanInput;\n  static ngAcceptInputType_showTickMarks: BooleanInput;\n  static ngAcceptInputType_min: NumberInput;\n  static ngAcceptInputType_max: NumberInput;\n  static ngAcceptInputType_step: NumberInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n/** The MDCSliderAdapter implementation. */\nclass SliderAdapter implements MDCSliderAdapter {\n\n  /** The global event listener subscription used to handle events on the slider inputs. */\n  private _globalEventSubscriptions = new Subscription();\n\n  /** The MDC Foundations handler function for start input change events. */\n  private _startInputChangeEventHandler: SpecificEventListener<EventType>;\n\n  /** The MDC Foundations handler function for end input change events. */\n  private _endInputChangeEventHandler: SpecificEventListener<EventType>;\n\n  constructor(private readonly _delegate: MatSlider) {\n    this._globalEventSubscriptions.add(this._subscribeToSliderInputEvents('change'));\n    this._globalEventSubscriptions.add(this._subscribeToSliderInputEvents('input'));\n  }\n\n  /**\n   * Handles \"change\" and \"input\" events on the slider inputs.\n   *\n   * Exposes a callback to allow the MDC Foundations \"change\" event handler to be called for \"real\"\n   * events.\n   *\n   * ** IMPORTANT NOTE **\n   *\n   * We block all \"real\" change and input events and emit fake events from #emitChangeEvent and\n   * #emitInputEvent, instead. We do this because interacting with the MDC slider won't trigger all\n   * of the correct change and input events, but it will call #emitChangeEvent and #emitInputEvent\n   * at the correct times. This allows users to listen for these events directly on the slider\n   * input as they would with a native range input.\n   */\n  private _subscribeToSliderInputEvents(type: 'change'|'input') {\n      return this._delegate._globalChangeAndInputListener.listen(type, (event: Event) => {\n        const thumbPosition = this._getInputThumbPosition(event.target);\n\n        // Do nothing if the event isn't from a thumb input.\n        if (thumbPosition === null) { return; }\n\n        // Do nothing if the event is \"fake\".\n        if ((event as any)._matIsHandled) { return ; }\n\n        // Prevent \"real\" events from reaching end users.\n        event.stopImmediatePropagation();\n\n        // Relay \"real\" change events to the MDC Foundation.\n        if (type === 'change') {\n          this._callChangeEventHandler(event, thumbPosition);\n        }\n      });\n  }\n\n  /** Calls the MDC Foundations change event handler for the specified thumb position. */\n  private _callChangeEventHandler(event: Event, thumbPosition: Thumb) {\n    if (thumbPosition === Thumb.START) {\n      this._startInputChangeEventHandler(event);\n    } else {\n      this._endInputChangeEventHandler(event);\n    }\n  }\n\n  /** Save the event handler so it can be used in our global change event listener subscription. */\n  private _saveChangeEventHandler(thumbPosition: Thumb, handler: SpecificEventListener<EventType>) {\n    if (thumbPosition === Thumb.START) {\n      this._startInputChangeEventHandler = handler;\n    } else {\n      this._endInputChangeEventHandler = handler;\n    }\n  }\n\n  /**\n   * Returns the thumb position of the given event target.\n   * Returns null if the given event target does not correspond to a slider thumb input.\n   */\n  private _getInputThumbPosition(target: EventTarget | null): Thumb | null {\n    if (target === this._delegate._getInputElement(Thumb.END)) {\n      return Thumb.END;\n    }\n    if (this._delegate._isRange() && target === this._delegate._getInputElement(Thumb.START)) {\n      return Thumb.START;\n    }\n    return null;\n  }\n\n  // We manually assign functions instead of using prototype methods because\n  // MDC clobbers the values otherwise.\n  // See https://github.com/material-components/material-components-web/pull/6256\n\n  hasClass = (className: string): boolean => {\n    return this._delegate._elementRef.nativeElement.classList.contains(className);\n  }\n  addClass = (className: string): void => {\n    this._delegate._elementRef.nativeElement.classList.add(className);\n  }\n  removeClass = (className: string): void => {\n    this._delegate._elementRef.nativeElement.classList.remove(className);\n  }\n  getAttribute = (attribute: string): string | null => {\n    return this._delegate._elementRef.nativeElement.getAttribute(attribute);\n  }\n  addThumbClass = (className: string, thumbPosition: Thumb): void => {\n    this._delegate._getThumbElement(thumbPosition).classList.add(className);\n  }\n  removeThumbClass = (className: string, thumbPosition: Thumb): void => {\n    this._delegate._getThumbElement(thumbPosition).classList.remove(className);\n  }\n  getInputValue = (thumbPosition: Thumb): string => {\n    return this._delegate._getInputElement(thumbPosition).value;\n  }\n  setInputValue = (value: string, thumbPosition: Thumb): void => {\n    this._delegate._getInputElement(thumbPosition).value = value;\n  }\n  getInputAttribute = (attribute: string, thumbPosition: Thumb): string | null => {\n    return this._delegate._getInputElement(thumbPosition).getAttribute(attribute);\n  }\n  setInputAttribute = (attribute: string, value: string, thumbPosition: Thumb): void => {\n    const input = this._delegate._getInputElement(thumbPosition);\n\n    // TODO(wagnermaciel): remove this check once this component is\n    // added to the internal allowlist for calling setAttribute.\n\n    // Explicitly check the attribute we are setting to prevent xss.\n    switch (attribute) {\n      case 'aria-valuetext':\n        input.setAttribute('aria-valuetext', value);\n        break;\n      case 'disabled':\n        input.setAttribute('disabled', value);\n        break;\n      case 'min':\n        input.setAttribute('min', value);\n        break;\n      case 'max':\n        input.setAttribute('max', value);\n        break;\n      case 'value':\n        input.setAttribute('value', value);\n        break;\n      case 'step':\n        input.setAttribute('step', value);\n        break;\n      default:\n        throw Error(`Tried to set invalid attribute ${attribute} on the mdc-slider.`);\n    }\n  }\n  removeInputAttribute = (attribute: string, thumbPosition: Thumb): void => {\n    this._delegate._getInputElement(thumbPosition).removeAttribute(attribute);\n  }\n  focusInput = (thumbPosition: Thumb): void => {\n    this._delegate._getInputElement(thumbPosition).focus();\n  }\n  isInputFocused = (thumbPosition: Thumb): boolean => {\n    return this._delegate._getInput(thumbPosition)._isFocused();\n  }\n  getThumbKnobWidth = (thumbPosition: Thumb): number => {\n    return this._delegate._getKnobElement(thumbPosition).getBoundingClientRect().width;\n  }\n  getThumbBoundingClientRect = (thumbPosition: Thumb): ClientRect => {\n    return this._delegate._getThumbElement(thumbPosition).getBoundingClientRect();\n  }\n  getBoundingClientRect = (): ClientRect => {\n    return this._delegate._elementRef.nativeElement.getBoundingClientRect();\n  }\n  isRTL = (): boolean => {\n    return this._delegate._isRTL();\n  }\n  setThumbStyleProperty = (propertyName: string, value: string, thumbPosition: Thumb): void => {\n    this._delegate._getThumbElement(thumbPosition).style.setProperty(propertyName, value);\n  }\n  removeThumbStyleProperty = (propertyName: string, thumbPosition: Thumb): void => {\n    this._delegate._getThumbElement(thumbPosition).style.removeProperty(propertyName);\n  }\n  setTrackActiveStyleProperty = (propertyName: string, value: string): void => {\n    this._delegate._trackActive.nativeElement.style.setProperty(propertyName, value);\n  }\n  removeTrackActiveStyleProperty = (propertyName: string): void => {\n    this._delegate._trackActive.nativeElement.style.removeProperty(propertyName);\n  }\n  setValueIndicatorText = (value: number, thumbPosition: Thumb): void => {\n    this._delegate._setValueIndicatorText(value, thumbPosition);\n  }\n  getValueToAriaValueTextFn = (): ((value: number) => string) | null => {\n    return this._delegate.displayWith;\n  }\n  updateTickMarks = (tickMarks: TickMark[]): void => {\n    this._delegate._tickMarks = tickMarks;\n    this._delegate._cdr.markForCheck();\n  }\n  setPointerCapture = (pointerId: number): void => {\n    this._delegate._elementRef.nativeElement.setPointerCapture(pointerId);\n  }\n  emitChangeEvent = (value: number, thumbPosition: Thumb): void => {\n    // We block all real slider input change events and emit fake change events from here, instead.\n    // We do this because the mdc implementation of the slider does not trigger real change events\n    // on pointer up (only on left or right arrow key down).\n    //\n    // By stopping real change events from reaching users, and dispatching fake change events\n    // (which we allow to reach the user) the slider inputs change events are triggered at the\n    // appropriate times. This allows users to listen for change events directly on the slider\n    // input as they would with a native range input.\n    const input = this._delegate._getInput(thumbPosition);\n    input._emitFakeEvent('change');\n    input._onChange(value);\n    input.valueChange.emit(value);\n  }\n  emitInputEvent = (value: number, thumbPosition: Thumb): void => {\n    this._delegate._getInput(thumbPosition)._emitFakeEvent('input');\n  }\n  emitDragStartEvent = (value: number, thumbPosition: Thumb): void => {\n    const input = this._delegate._getInput(thumbPosition);\n    input.dragStart.emit({ source: input, parent: this._delegate, value });\n  }\n  emitDragEndEvent = (value: number, thumbPosition: Thumb): void => {\n    const input = this._delegate._getInput(thumbPosition);\n    input.dragEnd.emit({ source: input, parent: this._delegate, value });\n  }\n  registerEventHandler =\n    <K extends EventType>(evtType: K, handler: SpecificEventListener<K>): void => {\n      this._delegate._elementRef.nativeElement.addEventListener(evtType, handler);\n  }\n  deregisterEventHandler =\n    <K extends EventType>(evtType: K, handler: SpecificEventListener<K>): void => {\n      this._delegate._elementRef.nativeElement.removeEventListener(evtType, handler);\n  }\n  registerThumbEventHandler = <K extends EventType>\n    (thumbPosition: Thumb, evtType: K, handler: SpecificEventListener<K>): void => {\n      this._delegate._getThumbElement(thumbPosition).addEventListener(evtType, handler);\n  }\n  deregisterThumbEventHandler = <K extends EventType>\n    (thumbPosition: Thumb, evtType: K, handler: SpecificEventListener<K>): void => {\n      this._delegate._getThumbElement(thumbPosition).removeEventListener(evtType, handler);\n  }\n  registerInputEventHandler = <K extends EventType>\n    (thumbPosition: Thumb, evtType: K, handler: SpecificEventListener<K>): void => {\n      if (evtType === 'change') {\n        this._saveChangeEventHandler(thumbPosition, handler as SpecificEventListener<EventType>);\n      } else {\n        this._delegate._getInputElement(thumbPosition).addEventListener(evtType, handler);\n      }\n  }\n  deregisterInputEventHandler = <K extends EventType>\n    (thumbPosition: Thumb, evtType: K, handler: SpecificEventListener<K>): void => {\n      if (evtType === 'change') {\n        this._globalEventSubscriptions.unsubscribe();\n      } else {\n        this._delegate._getInputElement(thumbPosition).removeEventListener(evtType, handler);\n      }\n  }\n  registerBodyEventHandler =\n    <K extends EventType>(evtType: K, handler: SpecificEventListener<K>): void => {\n      this._delegate._document.body.addEventListener(evtType, handler);\n  }\n  deregisterBodyEventHandler =\n    <K extends EventType>(evtType: K, handler: SpecificEventListener<K>): void => {\n      this._delegate._document.body.removeEventListener(evtType, handler);\n  }\n  registerWindowEventHandler =\n    <K extends EventType>(evtType: K, handler: SpecificEventListener<K>): void => {\n      this._delegate._window.addEventListener(evtType, handler);\n  }\n  deregisterWindowEventHandler =\n    <K extends EventType>(evtType: K, handler: SpecificEventListener<K>): void => {\n      this._delegate._window.removeEventListener(evtType, handler);\n  }\n}\n\n/**\n * Ensures that there is not an invalid configuration for the slider thumb inputs.\n */\nfunction _validateInputs(\n  isRange: boolean,\n  startInputElement: HTMLInputElement,\n  endInputElement: HTMLInputElement): void {\n  if (isRange) {\n    if (!startInputElement.hasAttribute('matSliderStartThumb')) {\n      _throwInvalidInputConfigurationError();\n    }\n    if (!endInputElement.hasAttribute('matSliderEndThumb')) {\n      _throwInvalidInputConfigurationError();\n    }\n  } else {\n    if (!endInputElement.hasAttribute('matSliderThumb')) {\n      _throwInvalidInputConfigurationError();\n    }\n  }\n}\n\nfunction _throwInvalidInputConfigurationError(): void {\n  throw Error(`Invalid slider thumb input configuration!\n\n  Valid configurations are as follows:\n\n    <mat-slider>\n      <input matSliderThumb>\n    </mat-slider>\n\n    or\n\n    <mat-slider>\n      <input matSliderStartThumb>\n      <input matSliderEndThumb>\n    </mat-slider>\n  `);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material-experimental/mdc-core';\nimport {MatSlider, MatSliderThumb, MatSliderVisualThumb} from './slider';\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule, MatRippleModule],\n  exports: [MatSlider, MatSliderThumb],\n  declarations: [\n    MatSlider,\n    MatSliderThumb,\n    MatSliderVisualThumb,\n  ],\n})\nexport class MatSliderModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {MatSlider, MatSliderThumb, MatSliderDragEvent} from './slider';\nexport {MatSliderModule} from './module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {GlobalChangeAndInputListener as ɵangular_material_src_material_experimental_mdc_slider_mdc_slider_b} from './global-change-and-input-listener';\nexport {MatSliderVisualThumb as ɵangular_material_src_material_experimental_mdc_slider_mdc_slider_a} from './slider';"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;;;;;;;AAcA;;;;;;;;MASa,4BAA4B;IAWvC,YAA8B,QAAa,EAAU,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;;QAL5D,iBAAY,GAAG,IAAI,GAAG,EAAwB,CAAC;;QAG/C,eAAU,GAAG,IAAI,OAAO,EAAE,CAAC;QAGjC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;KAC3B;IAED,WAAW;QACT,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;QAC3B,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;KAC3B;;IAGD,MAAM,CAAC,IAAO,EAAE,QAAkC;;QAEhD,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YAChC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,CAAC,CAAC;SACtE;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,MACpC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC,SAAS,CAAC,CAAC,KAAY,KAClD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,CAAC,CACxC,CACF,CAAC;KACH;;IAGO,4BAA4B,CAAC,IAAO;QAC1C,OAAO,SAAS,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC,IAAI,CACzE,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,EAC1B,QAAQ,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAC9C,KAAK,EAAE,CACR,CAAC;KACH;;;;YA3CF,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;4CAYjB,MAAM,SAAC,QAAQ;YAzBF,MAAM;;;ACTlC;;;;;;;AAqEA;;;;;;;MAiBa,oBAAoB;IAqC/B,YACmB,OAAe,EACsB,OAAkB,EACvD,WAAoC;QAFpC,YAAO,GAAP,OAAO,CAAQ;QACsB,YAAO,GAAP,OAAO,CAAW;QACvD,gBAAW,GAAX,WAAW,CAAyB;;QA7B9C,kBAAa,GAAY,KAAK,CAAC;;QAqBhC,cAAS,GAAY,KAAK,CAAC;;QAG3B,eAAU,GAAY,KAAK,CAAC;QA+B5B,kBAAa,GAAG;YACtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;;;YAGvB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;gBAChD,IAAI,CAAC,gBAAgB,EAAE,CAAC;aACzB;SACF,CAAA;QAEO,kBAAa,GAAG;;YACtB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,MAAA,IAAI,CAAC,eAAe,0CAAE,OAAO,EAAE,CAAC;SACjC,CAAA;KAtC0D;IAE3D,eAAe;QACb,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;;QAG/D,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;QACzE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QAErE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC1D,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;;;QAIxD,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;YAC7B,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YAClF,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;SACnF,CAAC,CAAC;KACJ;IAED,WAAW;QACT,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACrF,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;KACtF;IAgBO,QAAQ;;;;QAGd,MAAA,IAAI,CAAC,eAAe,0CAAE,OAAO,EAAE,CAAC;QAChC,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACzB;IAEO,OAAO;;;QAEb,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,MAAA,IAAI,CAAC,eAAe,0CAAE,OAAO,EAAE,CAAC;SACjC;;QAED,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,gBAAgB,EAAE,CAAC;SACzB;KACF;IAEO,YAAY,CAAC,KAAyB;QAC5C,IAAI,KAAK,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,aAAa,EAAE;YACtD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC1B;KACF;IAEO,UAAU,CAAC,KAAyB;;QAC1C,IAAI,KAAK,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,aAAa,EAAE;YACtD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,MAAA,IAAI,CAAC,gBAAgB,0CAAE,OAAO,EAAE,CAAC;;YAEjC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE;gBACnC,MAAA,IAAI,CAAC,eAAe,0CAAE,OAAO,EAAE,CAAC;aACjC;SACF;KACF;;IAGO,gBAAgB;;QACtB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;YACjF,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,aAAa,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC;YAC/E,MAAA,IAAI,CAAC,eAAe,0CAAE,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;SAC5E;KACF;;IAGO,gBAAgB;;;QAEtB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;YAChD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,aAAa,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC;YAC/E,MAAA,IAAI,CAAC,eAAe,0CAAE,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;SAC5E;KACF;;IAGO,iBAAiB;;QACvB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE;YAClF,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,aAAa,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG,EAAE,CAAC,CAAC;YACpF,MAAA,IAAI,CAAC,gBAAgB,0CAAE,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;SAC9E;KACF;;IAGO,gBAAgB,CAAC,SAAqB;QAC5C,OAAO,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,2BAA8B,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,sBAAyB;KAC/F;;IAGO,WAAW,CAAC,SAAgC;QAClD,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,OAAO;SACR;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CACxB,EAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAC,CAC9C,CAAC;KACH;;IAGD,eAAe;QACb,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;KACvC;;IAGD,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;KACjC;;;YA9KF,SAAS,SAAC;gBACT,QAAQ,EAAE,yBAAyB;gBACnC,mVAAkC;gBAElC,IAAI,EAAE;oBACJ,OAAO,EAAE,+CAA+C;iBACzD;gBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,aAAa,EAAE,iBAAiB,CAAC,IAAI;;aACtC;;;YAxDC,MAAM;YAgG2D,SAAS,uBAAvE,MAAM,SAAC,UAAU,CAAC,MAAM,SAAS,CAAC;YArGrC,UAAU;;;uBAgET,KAAK;4BAGL,KAAK;iCAGL,KAAK;4BAGL,KAAK;sBAGL,SAAS,SAAC,SAAS;oBAGnB,SAAS,SAAC,MAAM;;AAsJnB;;;;;;;;MAuBa,cAAc;IAkFzB,YACoB,QAAa,EACuB,OAAkB,EACvD,WAAyC;QADJ,YAAO,GAAP,OAAO,CAAW;QACvD,gBAAW,GAAX,WAAW,CAA8B;;;;;;QAjDzC,gBAAW,GAAyB,IAAI,YAAY,EAAU,CAAC;;QAG/D,cAAS,GACxB,IAAI,YAAY,EAAsB,CAAC;;QAGxB,YAAO,GACtB,IAAI,YAAY,EAAsB,CAAC;;QAGxB,UAAK,GAAuB,IAAI,YAAY,EAAQ,CAAC;;QAGrD,WAAM,GAAuB,IAAI,YAAY,EAAQ,CAAC;;;;;;QAOzE,cAAS,GAAY,KAAK,CAAC;;;;;QAM3B,cAAS,GAAyB,SAAQ,CAAC;;;;;QAMnC,eAAU,GAAe,SAAQ,CAAC;;QAG1C,mBAAc,GAAU,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,YAAY,CAAC,qBAAqB,CAAC;cACtF,KAAK,CAAC,KAAK;cACX,KAAK,CAAC,GAAG,CAAC;QAYV,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,aAAa,CAAC;KAC/C;;;;;;;;;;;;IA1EH,IACI,KAAK;QACP,OAAO,oBAAoB,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;KACtE;IACD,IAAI,KAAK,CAAC,CAAS;QACjB,MAAM,KAAK,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;;;QAItC,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;YAC7B,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;SACpD;aAAM;;YAEL,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,KAAK,EAAE,CAAC,CAAC;SACrD;KACF;IA6DD,QAAQ;;;QAGN,IAAI,CAAC,8BAA8B,EAAE,CAAC;QACtC,IAAI,CAAC,wBAAwB,EAAE,CAAC;KACjC;IAED,eAAe;QACb,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,CAAC,6BAA6B,EAAE,CAAC;;QAGrC,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;YACzB,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,IAAI,CAAC;SACnC;KACF;IAED,WAAW;QACT,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;QAC1B,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACxB,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;QACvB,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QACtB,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;KAC7B;IAED,OAAO;QACL,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;KACnB;IAED,cAAc,CAAC,IAAsB;QACnC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAQ,CAAC;QACrC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;KACxC;;;;;IAMD,UAAU,CAAC,KAAU;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACpB;;;;;;IAOD,gBAAgB,CAAC,EAAO;QACtB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;KACrB;;;;;;IAOD,iBAAiB,CAAC,EAAO;QACvB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;KACtB;;;;;;IAOD,gBAAgB,CAAC,UAAmB;QAClC,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC;QAC5B,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;KAChC;IAED,KAAK;QACH,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;KAC3B;IAED,IAAI;QACF,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;KAC1B;;IAGD,UAAU;QACR,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,KAAK,IAAI,CAAC,YAAY,CAAC;KAC3D;;;;;;;;;;;;;;IAeD,qBAAqB;QACnB,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,mBAAmB,CAAC;cAC3D,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK;cACzC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;QACrB,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,qBAAqB,CAAC;cAC7D,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK;cACvC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;QACrB,IAAI,CAAC,YAAY,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC;QACjC,IAAI,CAAC,YAAY,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC;QACjC,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;KACjD;;;;;;;;;IAUO,6BAA6B;QACnC,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;KAC3C;;;;;;;IAQO,8BAA8B;;QAEpC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE;YAC5C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,mBAAmB,CAAC;kBAC5D,IAAI,CAAC,OAAO,CAAC,GAAG;kBAChB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;SACtB;KACF;;;;;;;IAQO,wBAAwB;QAC9B,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,gBAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;KACxF;;;YA1PF,SAAS,SAAC;gBACT,QAAQ,EAAE,6EAA6E;gBACvF,QAAQ,EAAE,gBAAgB;gBAC1B,IAAI,EAAE;oBACJ,OAAO,EAAE,mBAAmB;oBAC5B,MAAM,EAAE,OAAO;oBACf,QAAQ,EAAE,WAAW;oBACrB,SAAS,EAAE,eAAe;iBAC3B;gBACD,SAAS,EAAE,CAAC;wBACV,OAAO,EAAE,iBAAiB;wBAC1B,WAAW,EAAE,cAAc;wBAC3B,KAAK,EAAE,IAAI;qBACZ,CAAC;aACH;;;4CAoFI,MAAM,SAAC,QAAQ;YAC+C,SAAS,uBAAvE,MAAM,SAAC,UAAU,CAAC,MAAM,SAAS,CAAC;YAhVrC,UAAU;;;oBA0QT,KAAK;0BAsBL,MAAM;wBAGN,MAAM;sBAIN,MAAM;oBAIN,MAAM;qBAGN,MAAM;;AA8LT;AACA,MAAM,mBAAmB,GAAG,UAAU,CAAC,kBAAkB,CAAC;IACxD,YAAmB,WAAoC;QAApC,gBAAW,GAAX,WAAW,CAAyB;KAAI;CAC5D,CAAC,EAAE,SAAS,CAAC,CAAC;AAEf;;;;MAqBa,SAAU,SAAQ,mBAAmB;IA2GhD,YACW,OAAe,EACf,IAAuB,EAChC,UAAmC,EAClB,SAAmB,EAC3B,6BAA6E,EACpE,QAAa,EACX,IAAoB,EAE7B,oBAA0C,EACV,aAAsB;QAC/D,KAAK,CAAC,UAAU,CAAC,CAAC;QAVX,YAAO,GAAP,OAAO,CAAQ;QACf,SAAI,GAAJ,IAAI,CAAmB;QAEf,cAAS,GAAT,SAAS,CAAU;QAC3B,kCAA6B,GAA7B,6BAA6B,CAAgD;QAElE,SAAI,GAAJ,IAAI,CAAgB;QAE7B,yBAAoB,GAApB,oBAAoB,CAAsB;QAjG/C,cAAS,GAAY,KAAK,CAAC;QAM3B,cAAS,GAAY,KAAK,CAAC;QAM3B,mBAAc,GAAY,KAAK,CAAC;QAShC,SAAI,GAAW,CAAC,CAAC;QASjB,SAAI,GAAW,GAAG,CAAC;QASnB,UAAK,GAAW,CAAC,CAAC;;;;;;QAOjB,gBAAW,GAAgC,CAAC,KAAa,KAAK,GAAG,KAAK,EAAE,CAAC;;QAG1E,gBAAW,GAAG,IAAI,mBAAmB,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;;QAGvE,iBAAY,GAAY,KAAK,CAAC;;;;;;;QA6BtB,6BAAwB,GAAG,OAAO,YAAY,KAAK,WAAW;eACjE,CAAC,CAAC,YAAY;eACd,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;;QA+FjB,YAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;QA9E9C,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,IAAI,MAAM,CAAC;QACpD,IAAI,CAAC,eAAe,GAAG,aAAa,KAAK,gBAAgB,CAAC;QAC1D,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,0BAA0B,EAAE,CAAC;KACnC;;IA/GH,IACI,QAAQ,KAAc,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;IAClD,IAAI,QAAQ,CAAC,CAAU;QACrB,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5C,IAAI,CAAC,0BAA0B,EAAE,CAAC;KACnC;;IAID,IACI,QAAQ,KAAc,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;IAClD,IAAI,QAAQ,CAAC,CAAU,IAAI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC,EAAE;;IAIvE,IACI,aAAa,KAAc,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE;IAC5D,IAAI,aAAa,CAAC,CAAU,IAAI,IAAI,CAAC,cAAc,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC,EAAE;;IAIjF,IACI,GAAG,KAAa,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE;IACvC,IAAI,GAAG,CAAC,CAAS;QACf,IAAI,CAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,aAAa,EAAE,CAAC;KACtB;;IAID,IACI,GAAG,KAAa,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE;IACvC,IAAI,GAAG,CAAC,CAAS;QACf,IAAI,CAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,aAAa,EAAE,CAAC;KACtB;;IAID,IACI,IAAI,KAAa,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE;IACzC,IAAI,IAAI,CAAC,CAAS;QAChB,IAAI,CAAC,KAAK,GAAG,oBAAoB,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACjD,IAAI,CAAC,aAAa,EAAE,CAAC;KACtB;IAqED,eAAe;QACb,IAAI,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,EAAE;YACjD,eAAe,CACb,IAAI,CAAC,QAAQ,EAAE,EACf,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,KAAK,CAAC,EAClC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CACjC,CAAC;SACH;QACD,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE;YAC5B,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YACxB,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;YAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC1B;;;;;;;;;;;QAWD,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;KAC3B;IAED,WAAW;QACT,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE;YAC5B,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;SAC5B;QACD,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,CAAC;QAC1C,IAAI,CAAC,0BAA0B,EAAE,CAAC;KACnC;;IAGD,MAAM;QACJ,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC;KAC/C;;;;;;;;;IAUA,0BAA0B;;;;;QAKzB,IAAI,IAAI,CAAC,wBAAwB,EAAE;YACjC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SAC9E;aAAM;YACL,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAC5E,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SAC7E;KACF;;IAGD,0BAA0B;QACxB,IAAI,IAAI,CAAC,wBAAwB,EAAE;YACjC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,mBAAmB,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACjF;aAAM;YACL,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/E,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SAChF;KACF;;;;;;;;IAYO,aAAa;QACnB,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;YAC3B,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE;gBACnB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,qBAAqB,EAAE,CAAC;aACrD;YACD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,qBAAqB,EAAE,CAAC;YAClD,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YACxB,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;SAC3B;KACF;;IAGO,YAAY;QAClB,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;;;YAG7B,UAAU,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC;SACjD,CAAC,CAAC;KACJ;;IAGD,SAAS,CAAC,KAAa,EAAE,aAAoB;QAC3C,aAAa,KAAK,KAAK,CAAC,KAAK;cACzB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC;cACrC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KACtC;;IAGO,YAAY,CAAC,KAAc;QACjC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;;;;QAKvB,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SACrC;KACF;;IAGO,0BAA0B;QAChC,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC;YAC3C,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE;gBACnB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC;aAC9C;SACF;KACF;;IAGD,QAAQ;QACN,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC;KAClC;;IAGD,eAAe;QACb,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;QAC7D,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;KAC7B;;IAGD,SAAS,CAAC,aAAoB;QAC5B,OAAO,aAAa,KAAK,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;KAC7E;;IAGD,gBAAgB,CAAC,aAAoB;QACnC,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC;KACnD;IAED,SAAS,CAAC,aAAoB;QAC5B,OAAO,aAAa,KAAK,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;KAC7E;;IAGD,gBAAgB,CAAC,aAAoB;QACnC,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,eAAe,EAAE,CAAC;KACxD;;IAGD,eAAe,CAAC,aAAoB;QAClC,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,QAAQ,EAAE,CAAC;KACjD;;;;;;;IAQD,sBAAsB,CAAC,KAAa,EAAE,aAAoB;QACxD,aAAa,KAAK,KAAK,CAAC,KAAK;cACzB,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;cACvD,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC1D,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;KAC1B;;IAGD,sBAAsB,CAAC,aAAoB;QACzC,OAAO,aAAa,KAAK,KAAK,CAAC,KAAK;cAChC,IAAI,CAAC,wBAAwB;cAC7B,IAAI,CAAC,sBAAsB,CAAC;KACjC;;IAGD,iBAAiB,CAAC,QAAkB;QAClC,OAAO,QAAQ,KAAK,QAAQ,CAAC,MAAM;cAC/B,+BAA+B;cAC/B,iCAAiC,CAAC;KACvC;;IAGD,iBAAiB;;QACf,OAAO,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,aAAa,IAAI,CAAC,EAAC,MAAA,IAAI,CAAC,oBAAoB,0CAAE,QAAQ,CAAA,CAAC;KACrF;;;YAlVF,SAAS,SAAC;gBACT,QAAQ,EAAE,YAAY;gBACtB,8wBAA0B;gBAE1B,IAAI,EAAE;oBACJ,OAAO,EAAE,2BAA2B;oBACpC,2BAA2B,EAAE,YAAY;oBACzC,8BAA8B,EAAE,UAAU;oBAC1C,8BAA8B,EAAE,UAAU;oBAC1C,gCAAgC,EAAE,eAAe;oBACjD,iCAAiC,EAAE,iBAAiB;iBACrD;gBACD,QAAQ,EAAE,WAAW;gBACrB,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,MAAM,EAAE,CAAC,OAAO,EAAE,eAAe,CAAC;;aACnC;;;YAhgBC,MAAM;YATN,iBAAiB;YAIjB,UAAU;YATJ,QAAQ;YAwCR,4BAA4B;4CAwlB/B,MAAM,SAAC,QAAQ;YAvoBZ,cAAc,uBAwoBjB,QAAQ;4CACR,QAAQ,YAAI,MAAM,SAAC,yBAAyB;yCAE5C,QAAQ,YAAI,MAAM,SAAC,qBAAqB;;;sBAlH1C,YAAY,SAAC,oBAAoB;2BAGjC,SAAS,SAAC,aAAa;sBAGvB,eAAe,SAAC,cAAc,EAAE,EAAC,WAAW,EAAE,KAAK,EAAC;uBAIpD,KAAK;uBASL,KAAK;4BAML,KAAK;kBAML,KAAK;kBASL,KAAK;mBASL,KAAK;0BAaL,KAAK;;AA2QR;AACA,MAAM,aAAa;IAWjB,YAA6B,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;;QARzC,8BAAyB,GAAG,IAAI,YAAY,EAAE,CAAC;;;;QAmFvD,aAAQ,GAAG,CAAC,SAAiB;YAC3B,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;SAC/E,CAAA;QACD,aAAQ,GAAG,CAAC,SAAiB;YAC3B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;SACnE,CAAA;QACD,gBAAW,GAAG,CAAC,SAAiB;YAC9B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;SACtE,CAAA;QACD,iBAAY,GAAG,CAAC,SAAiB;YAC/B,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;SACzE,CAAA;QACD,kBAAa,GAAG,CAAC,SAAiB,EAAE,aAAoB;YACtD,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;SACzE,CAAA;QACD,qBAAgB,GAAG,CAAC,SAAiB,EAAE,aAAoB;YACzD,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;SAC5E,CAAA;QACD,kBAAa,GAAG,CAAC,aAAoB;YACnC,OAAO,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC;SAC7D,CAAA;QACD,kBAAa,GAAG,CAAC,KAAa,EAAE,aAAoB;YAClD,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;SAC9D,CAAA;QACD,sBAAiB,GAAG,CAAC,SAAiB,EAAE,aAAoB;YAC1D,OAAO,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;SAC/E,CAAA;QACD,sBAAiB,GAAG,CAAC,SAAiB,EAAE,KAAa,EAAE,aAAoB;YACzE,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;;;;YAM7D,QAAQ,SAAS;gBACf,KAAK,gBAAgB;oBACnB,KAAK,CAAC,YAAY,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;oBAC5C,MAAM;gBACR,KAAK,UAAU;oBACb,KAAK,CAAC,YAAY,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;oBACtC,MAAM;gBACR,KAAK,KAAK;oBACR,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;oBACjC,MAAM;gBACR,KAAK,KAAK;oBACR,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;oBACjC,MAAM;gBACR,KAAK,OAAO;oBACV,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;oBACnC,MAAM;gBACR,KAAK,MAAM;oBACT,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;oBAClC,MAAM;gBACR;oBACE,MAAM,KAAK,CAAC,kCAAkC,SAAS,qBAAqB,CAAC,CAAC;aACjF;SACF,CAAA;QACD,yBAAoB,GAAG,CAAC,SAAiB,EAAE,aAAoB;YAC7D,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;SAC3E,CAAA;QACD,eAAU,GAAG,CAAC,aAAoB;YAChC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,KAAK,EAAE,CAAC;SACxD,CAAA;QACD,mBAAc,GAAG,CAAC,aAAoB;YACpC,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,UAAU,EAAE,CAAC;SAC7D,CAAA;QACD,sBAAiB,GAAG,CAAC,aAAoB;YACvC,OAAO,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC,qBAAqB,EAAE,CAAC,KAAK,CAAC;SACpF,CAAA;QACD,+BAA0B,GAAG,CAAC,aAAoB;YAChD,OAAO,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,qBAAqB,EAAE,CAAC;SAC/E,CAAA;QACD,0BAAqB,GAAG;YACtB,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAC;SACzE,CAAA;QACD,UAAK,GAAG;YACN,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;SAChC,CAAA;QACD,0BAAqB,GAAG,CAAC,YAAoB,EAAE,KAAa,EAAE,aAAoB;YAChF,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;SACvF,CAAA;QACD,6BAAwB,GAAG,CAAC,YAAoB,EAAE,aAAoB;YACpE,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;SACnF,CAAA;QACD,gCAA2B,GAAG,CAAC,YAAoB,EAAE,KAAa;YAChE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;SAClF,CAAA;QACD,mCAA8B,GAAG,CAAC,YAAoB;YACpD,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;SAC9E,CAAA;QACD,0BAAqB,GAAG,CAAC,KAAa,EAAE,aAAoB;YAC1D,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;SAC7D,CAAA;QACD,8BAAyB,GAAG;YAC1B,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;SACnC,CAAA;QACD,oBAAe,GAAG,CAAC,SAAqB;YACtC,IAAI,CAAC,SAAS,CAAC,UAAU,GAAG,SAAS,CAAC;YACtC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;SACpC,CAAA;QACD,sBAAiB,GAAG,CAAC,SAAiB;YACpC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;SACvE,CAAA;QACD,oBAAe,GAAG,CAAC,KAAa,EAAE,aAAoB;;;;;;;;;YASpD,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YACtD,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YAC/B,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACvB,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC/B,CAAA;QACD,mBAAc,GAAG,CAAC,KAAa,EAAE,aAAoB;YACnD,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;SACjE,CAAA;QACD,uBAAkB,GAAG,CAAC,KAAa,EAAE,aAAoB;YACvD,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YACtD,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;SACxE,CAAA;QACD,qBAAgB,GAAG,CAAC,KAAa,EAAE,aAAoB;YACrD,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YACtD,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;SACtE,CAAA;QACD,yBAAoB,GAClB,CAAsB,OAAU,EAAE,OAAiC;YACjE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SAC/E,CAAA;QACD,2BAAsB,GACpB,CAAsB,OAAU,EAAE,OAAiC;YACjE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SAClF,CAAA;QACD,8BAAyB,GAAG,CACzB,aAAoB,EAAE,OAAU,EAAE,OAAiC;YAClE,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SACrF,CAAA;QACD,gCAA2B,GAAG,CAC3B,aAAoB,EAAE,OAAU,EAAE,OAAiC;YAClE,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SACxF,CAAA;QACD,8BAAyB,GAAG,CACzB,aAAoB,EAAE,OAAU,EAAE,OAAiC;YAClE,IAAI,OAAO,KAAK,QAAQ,EAAE;gBACxB,IAAI,CAAC,uBAAuB,CAAC,aAAa,EAAE,OAA2C,CAAC,CAAC;aAC1F;iBAAM;gBACL,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;aACnF;SACJ,CAAA;QACD,gCAA2B,GAAG,CAC3B,aAAoB,EAAE,OAAU,EAAE,OAAiC;YAClE,IAAI,OAAO,KAAK,QAAQ,EAAE;gBACxB,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,CAAC;aAC9C;iBAAM;gBACL,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;aACtF;SACJ,CAAA;QACD,6BAAwB,GACtB,CAAsB,OAAU,EAAE,OAAiC;YACjE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SACpE,CAAA;QACD,+BAA0B,GACxB,CAAsB,OAAU,EAAE,OAAiC;YACjE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SACvE,CAAA;QACD,+BAA0B,GACxB,CAAsB,OAAU,EAAE,OAAiC;YACjE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SAC7D,CAAA;QACD,iCAA4B,GAC1B,CAAsB,OAAU,EAAE,OAAiC;YACjE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SAChE,CAAA;QAzPC,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,IAAI,CAAC,6BAA6B,CAAC,QAAQ,CAAC,CAAC,CAAC;QACjF,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC,CAAC;KACjF;;;;;;;;;;;;;;;IAgBO,6BAA6B,CAAC,IAAsB;QACxD,OAAO,IAAI,CAAC,SAAS,CAAC,6BAA6B,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,KAAY;YAC5E,MAAM,aAAa,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;;YAGhE,IAAI,aAAa,KAAK,IAAI,EAAE;gBAAE,OAAO;aAAE;;YAGvC,IAAK,KAAa,CAAC,aAAa,EAAE;gBAAE,OAAQ;aAAE;;YAG9C,KAAK,CAAC,wBAAwB,EAAE,CAAC;;YAGjC,IAAI,IAAI,KAAK,QAAQ,EAAE;gBACrB,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;aACpD;SACF,CAAC,CAAC;KACN;;IAGO,uBAAuB,CAAC,KAAY,EAAE,aAAoB;QAChE,IAAI,aAAa,KAAK,KAAK,CAAC,KAAK,EAAE;YACjC,IAAI,CAAC,6BAA6B,CAAC,KAAK,CAAC,CAAC;SAC3C;aAAM;YACL,IAAI,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;SACzC;KACF;;IAGO,uBAAuB,CAAC,aAAoB,EAAE,OAAyC;QAC7F,IAAI,aAAa,KAAK,KAAK,CAAC,KAAK,EAAE;YACjC,IAAI,CAAC,6BAA6B,GAAG,OAAO,CAAC;SAC9C;aAAM;YACL,IAAI,CAAC,2BAA2B,GAAG,OAAO,CAAC;SAC5C;KACF;;;;;IAMO,sBAAsB,CAAC,MAA0B;QACvD,IAAI,MAAM,KAAK,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;YACzD,OAAO,KAAK,CAAC,GAAG,CAAC;SAClB;QACD,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,MAAM,KAAK,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YACxF,OAAO,KAAK,CAAC,KAAK,CAAC;SACpB;QACD,OAAO,IAAI,CAAC;KACb;CAsLF;AAED;;;AAGA,SAAS,eAAe,CACtB,OAAgB,EAChB,iBAAmC,EACnC,eAAiC;IACjC,IAAI,OAAO,EAAE;QACX,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,qBAAqB,CAAC,EAAE;YAC1D,oCAAoC,EAAE,CAAC;SACxC;QACD,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,mBAAmB,CAAC,EAAE;YACtD,oCAAoC,EAAE,CAAC;SACxC;KACF;SAAM;QACL,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE;YACnD,oCAAoC,EAAE,CAAC;SACxC;KACF;AACH,CAAC;AAED,SAAS,oCAAoC;IAC3C,MAAM,KAAK,CAAC;;;;;;;;;;;;;;GAcX,CAAC,CAAC;AACL;;ACxpCA;;;;;;;MAsBa,eAAe;;;YAT3B,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,eAAe,EAAE,YAAY,EAAE,eAAe,CAAC;gBACzD,OAAO,EAAE,CAAC,SAAS,EAAE,cAAc,CAAC;gBACpC,YAAY,EAAE;oBACZ,SAAS;oBACT,cAAc;oBACd,oBAAoB;iBACrB;aACF;;;ACrBD;;;;;;;;ACAA;;;;;;"}