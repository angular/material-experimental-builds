{"version":3,"file":"mdc-checkbox.js","sources":["../../../../../../src/material-experimental/mdc-checkbox/checkbox.ts","../../../../../../src/material-experimental/mdc-checkbox/module.ts","../../../../../../src/material-experimental/mdc-checkbox/public-api.ts","../../../../../../src/material-experimental/mdc-checkbox/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  MAT_CHECKBOX_CLICK_ACTION,\n  MAT_CHECKBOX_DEFAULT_OPTIONS,\n  MatCheckboxClickAction, MatCheckboxDefaultOptions\n} from '@angular/material/checkbox';\nimport {ThemePalette, RippleAnimationConfig} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MDCCheckboxAdapter, MDCCheckboxFoundation} from '@material/checkbox';\nimport {numbers} from '@material/ripple';\n\nlet nextUniqueId = 0;\n\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n/** Configuration for the ripple animation. */\nconst RIPPLE_ANIMATION_CONFIG: RippleAnimationConfig = {\n  enterDuration: numbers.DEACTIVATION_TIMEOUT_MS,\n  exitDuration: numbers.FG_DEACTIVATION_MS,\n};\n\n@Component({\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-mdc-checkbox',\n    '[attr.tabindex]': 'null',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[class.mdc-checkbox--disabled]': 'disabled',\n    '[id]': 'id',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  exportAs: 'matCheckbox',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCheckbox implements AfterViewInit, OnDestroy, ControlValueAccessor {\n  /**\n   * The `aria-label` attribute to use for the input element. In most cases, `aria-labelledby` will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** The `aria-labelledby` attribute to use for the input element. */\n  @Input('aria-labelledby') ariaLabelledby: string|null = null;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** The color palette  for this checkbox ('primary', 'accent', or 'warn'). */\n  @Input() color: ThemePalette = 'accent';\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after'. */\n  @Input() labelPosition: 'before'|'after' = 'after';\n\n  /** The `name` attribute to use for the input element. */\n  @Input() name: string|null = null;\n\n  /** The `tabindex` attribute to use for the input element. */\n  @Input() tabIndex: number;\n\n  /** The `value` attribute to use for the input element */\n  @Input() value: string;\n\n  private _uniqueId = `mat-mdc-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the checkbox is checked. */\n  @Input()\n  get checked(): boolean {\n    return this._checked;\n  }\n  set checked(checked) {\n    this._checked = coerceBooleanProperty(checked);\n  }\n  private _checked = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n  set indeterminate(indeterminate) {\n    this._indeterminate = coerceBooleanProperty(indeterminate);\n    this._syncIndeterminate(this._indeterminate);\n  }\n  private _indeterminate = false;\n\n  /** Whether the checkbox is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(disabled) {\n    this._disabled = coerceBooleanProperty(disabled);\n  }\n  private _disabled = false;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n  set required(required) {\n    this._required = coerceBooleanProperty(required);\n  }\n  private _required = false;\n\n  /** Whether to disable the ripple on this checkbox. */\n  @Input()\n  get disableRipple(): boolean {\n    return this._disableRipple;\n  }\n  set disableRipple(disableRipple: boolean) {\n    this._disableRipple = coerceBooleanProperty(disableRipple);\n  }\n  private _disableRipple = false;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output()\n  readonly change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The root element for the `MDCCheckbox`. */\n  @ViewChild('checkbox') _checkbox: ElementRef<HTMLElement>;\n\n  /** The native input element. */\n  @ViewChild('nativeCheckbox') _nativeCheckbox: ElementRef<HTMLInputElement>;\n\n  /** The native label element. */\n  @ViewChild('label') _label: ElementRef<HTMLElement>;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string {\n    return `${this.id || this._uniqueId}-input`;\n  }\n\n  /** The `MDCCheckboxFoundation` instance for this checkbox. */\n  _checkboxFoundation: MDCCheckboxFoundation;\n\n  /** The set of classes that should be applied to the native input. */\n  _classes: {[key: string]: boolean} = {'mdc-checkbox__native-control': true};\n\n  /** Animation config for the ripple. */\n  _rippleAnimation = RIPPLE_ANIMATION_CONFIG;\n\n  /** ControlValueAccessor onChange */\n  private _cvaOnChange = (_: boolean) => {};\n\n  /** ControlValueAccessor onTouch */\n  private _cvaOnTouch = () => {};\n\n  /**\n   * A list of attributes that should not be modified by `MDCFoundation` classes.\n   *\n   * MDC uses animation events to determine when to update `aria-checked` which is unreliable.\n   * Therefore we disable it and handle it ourselves.\n   */\n  private _attrBlacklist = new Set(['aria-checked']);\n\n  /** The `MDCCheckboxAdapter` instance for this checkbox. */\n  private _checkboxAdapter: MDCCheckboxAdapter = {\n    addClass: (className) => this._setClass(className, true),\n    removeClass: (className) => this._setClass(className, false),\n    forceLayout: () => this._checkbox.nativeElement.offsetWidth,\n    hasNativeControl: () => !!this._nativeCheckbox,\n    isAttachedToDOM: () => !!this._checkbox.nativeElement.parentNode,\n    isChecked: () => this.checked,\n    isIndeterminate: () => this.indeterminate,\n    removeNativeControlAttr:\n        (attr) => {\n          if (!this._attrBlacklist.has(attr)) {\n            this._nativeCheckbox.nativeElement.removeAttribute(attr);\n          }\n        },\n    setNativeControlAttr:\n        (attr, value) => {\n          if (!this._attrBlacklist.has(attr)) {\n            this._nativeCheckbox.nativeElement.setAttribute(attr, value);\n          }\n        },\n    setNativeControlDisabled: (disabled) => this.disabled = disabled,\n  };\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Attribute('tabindex') tabIndex: string,\n      /**\n       * @deprecated `_clickAction` parameter to be removed, use\n       * `MAT_CHECKBOX_DEFAULT_OPTIONS`\n       * @breaking-change 10.0.0-sha-cf53a70b1\n       */\n      @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION) private _clickAction: MatCheckboxClickAction,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n      @Optional() @Inject(MAT_CHECKBOX_DEFAULT_OPTIONS)\n          private _options?: MatCheckboxDefaultOptions) {\n    // Note: We don't need to set up the MDCFormFieldFoundation. Its only purpose is to manage the\n    // ripple, which we do ourselves instead.\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this._checkboxFoundation = new MDCCheckboxFoundation(this._checkboxAdapter);\n\n    this._options = this._options || {};\n\n    if (this._options.color) {\n      this.color = this._options.color;\n    }\n\n    // @breaking-change 10.0.0-sha-cf53a70b1: Remove this after the `_clickAction` parameter is removed as an\n    // injection parameter.\n    this._clickAction = this._clickAction || this._options.clickAction;\n  }\n\n  ngAfterViewInit() {\n    this._syncIndeterminate(this._indeterminate);\n    this._checkboxFoundation.init();\n  }\n\n  ngOnDestroy() {\n    this._checkboxFoundation.destroy();\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  registerOnChange(fn: (checked: boolean) => void) {\n    this._cvaOnChange = fn;\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void) {\n    this._cvaOnTouch = fn;\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the checkbox. */\n  focus() {\n    this._nativeCheckbox.nativeElement.focus();\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle() {\n    this.checked = !this.checked;\n    this._cvaOnChange(this.checked);\n  }\n\n  /** Handles blur events on the native input. */\n  _onBlur() {\n    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n    // Angular does not expect events to be raised during change detection, so any state change\n    // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n    // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n    // telling the form control it has been touched until the next tick.\n    Promise.resolve().then(() => {\n      this._cvaOnTouch();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /**\n   * Handles click events on the native input.\n   *\n   * Note: we must listen to the `click` event rather than the `change` event because IE & Edge do\n   * not actually change the checked state when the user clicks an indeterminate checkbox. By\n   * listening to `click` instead we can override and normalize the behavior to change the checked\n   * state like other browsers do.\n   */\n  _onClick() {\n    if (this._clickAction === 'noop') {\n      this._nativeCheckbox.nativeElement.checked = this.checked;\n      this._nativeCheckbox.nativeElement.indeterminate = this.indeterminate;\n      return;\n    }\n\n    if (this.indeterminate && this._clickAction !== 'check') {\n      this.indeterminate = false;\n      // tslint:disable:max-line-length\n      // We use `Promise.resolve().then` to ensure the same timing as the original `MatCheckbox`:\n      // https://github.com/angular/components/blob/309d5644aa610ee083c56a823ce7c422988730e8/src/lib/checkbox/checkbox.ts#L381\n      // tslint:enable:max-line-length\n      Promise.resolve().then(() => this.indeterminateChange.next(this.indeterminate));\n    } else {\n      this._nativeCheckbox.nativeElement.indeterminate = this.indeterminate;\n    }\n\n    this.checked = !this.checked;\n    this._checkboxFoundation.handleChange();\n\n    // Dispatch our change event\n    const newEvent = new MatCheckboxChange();\n    newEvent.source = this as any;\n    newEvent.checked = this.checked;\n    this._cvaOnChange(this.checked);\n    this.change.next(newEvent);\n  }\n\n  /** Gets the value for the `aria-checked` attribute of the native input. */\n  _getAriaChecked(): 'true'|'false'|'mixed' {\n    if (this.checked) {\n      return 'true';\n    }\n\n    return this.indeterminate ? 'mixed' : 'false';\n  }\n\n  /** Sets whether the given CSS class should be applied to the native input. */\n  private _setClass(cssClass: string, active: boolean) {\n    this._classes[cssClass] = active;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Syncs the indeterminate value with the checkbox DOM node.\n   *\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n   * server-side rendering.\n   */\n  private _syncIndeterminate(value: boolean) {\n    const nativeCheckbox = this._nativeCheckbox;\n    if (nativeCheckbox) {\n      nativeCheckbox.nativeElement.indeterminate = value;\n    }\n  }\n\n  static ngAcceptInputType_checked: BooleanInput;\n  static ngAcceptInputType_indeterminate: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {_MatCheckboxRequiredValidatorModule} from '@angular/material/checkbox';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule, CommonModule, _MatCheckboxRequiredValidatorModule],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_MatCheckboxRequiredValidatorModule} from '@angular/material/checkbox';\n\nexport * from './checkbox';\nexport * from './module';\n\nexport {\n  MAT_CHECKBOX_CLICK_ACTION,\n  MAT_CHECKBOX_REQUIRED_VALIDATOR,\n  MatCheckboxClickAction,\n  MatCheckboxRequiredValidator,\n  _MatCheckboxRequiredValidatorModule,\n  /**\n   * @deprecated\n   * @breaking-change 9.0.0\n   */\n  TransitionCheckState,\n} from '@angular/material/checkbox';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}