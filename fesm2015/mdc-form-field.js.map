{"version":3,"file":"mdc-form-field.js","sources":["../../../../../../src/material-experimental/mdc-form-field/directives/label.ts","../../../../../../src/material-experimental/mdc-form-field/directives/error.ts","../../../../../../src/material-experimental/mdc-form-field/directives/hint.ts","../../../../../../src/material-experimental/mdc-form-field/directives/prefix.ts","../../../../../../src/material-experimental/mdc-form-field/directives/suffix.ts","../../../../../../src/material-experimental/mdc-form-field/directives/floating-label.ts","../../../../../../src/material-experimental/mdc-form-field/directives/line-ripple.ts","../../../../../../src/material-experimental/mdc-form-field/directives/notched-outline.ts","../../../../../../src/material-experimental/mdc-form-field/form-field.ts","../../../../../../src/material-experimental/mdc-form-field/module.ts","../../../../../../src/material-experimental/mdc-form-field/public-api.ts","../../../../../../src/material-experimental/mdc-form-field/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label',\n})\nexport class MatLabel {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\nlet nextUniqueId = 0;\n\n/** Single error message to be shown underneath the form-field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-mdc-form-field-error',\n    'role': 'alert',\n    '[id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-mdc-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\nlet nextUniqueId = 0;\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-mdc-form-field-hint',\n    '[class.mat-form-field-hint-end]': 'align == \"end\"',\n    '[id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-mdc-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, OnDestroy} from '@angular/core';\nimport {MDCFloatingLabel} from '@material/floating-label';\n\n/**\n * Internal directive that creates an instance of the MDC floating label\n * component. Using a directive allows us to conditionally render a floating label\n * in the template without having to manually instantiate the `MDCFloatingLabel` component.\n *\n * The component is responsible for setting up the floating label styles, and for providing\n * an @Input that can be used by the form-field to toggle floating state of the label.\n */\n@Directive({\n  selector: 'label[matFormFieldFloatingLabel]',\n  host: {\n    'class': 'mdc-floating-label',\n  },\n})\nexport class MatFormFieldFloatingLabel extends MDCFloatingLabel implements OnDestroy {\n  @Input()\n  get floating() { return this._floating; }\n  set floating(shouldFloat: boolean) {\n    if (shouldFloat !== this._floating) {\n      this._floating = shouldFloat;\n      this.float(shouldFloat);\n    }\n  }\n  private _floating = false;\n\n  constructor(private _elementRef: ElementRef) {\n    super(_elementRef.nativeElement);\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n  }\n\n  /** Gets the HTML element for the floating label. */\n  get element(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, OnDestroy} from '@angular/core';\nimport {MDCLineRipple} from '@material/line-ripple';\n\n/**\n * Internal directive that creates an instance of the MDC line-ripple component. Using a\n * directive allows us to conditionally render a line-ripple in the template without having\n * to manually create and destroy the `MDCLineRipple` component whenever the condition changes.\n *\n * The directive sets up the styles for the line-ripple and provides an API for activating\n * and deactivating the line-ripple.\n */\n@Directive({\n  selector: 'div[matFormFieldLineRipple]',\n  host: {\n    'class': 'mdc-line-ripple',\n  },\n})\nexport class MatFormFieldLineRipple extends MDCLineRipple implements OnDestroy {\n  constructor(elementRef: ElementRef) {\n    super(elementRef.nativeElement);\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MDCNotchedOutline} from '@material/notched-outline';\n\n/**\n * Internal component that creates an instance of the MDC notched-outline component. Using\n * a directive allows us to conditionally render a notched-outline in the template without\n * having to manually create and destroy the `MDCNotchedOutline` component whenever the\n * appearance changes.\n *\n * The component sets up the HTML structure and styles for the notched-outline. It provides\n * inputs to toggle the notch state and width.\n */\n@Component({\n  selector: 'div[matFormFieldNotchedOutline]',\n  templateUrl: './notched-outline.html',\n  host: {\n    'class': 'mdc-notched-outline',\n    // Besides updating the notch state through the MDC component, we toggle this class through\n    // a host binding in order to ensure that the notched-outline renders correctly on the server.\n    '[class.mdc-notched-outline--notched]': 'open',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatFormFieldNotchedOutline implements AfterViewInit, OnChanges, OnDestroy {\n  /** Width of the notch. */\n  @Input('matFormFieldNotchedOutlineWidth') width: number = 0;\n\n  /** Whether the notch should be opened. */\n  @Input('matFormFieldNotchedOutlineOpen') open: boolean = false;\n\n  /** Instance of the MDC notched outline. */\n  private _mdcNotchedOutline: MDCNotchedOutline|null = null;\n\n  constructor(private _elementRef: ElementRef, private _platform: Platform) {}\n\n  ngAfterViewInit() {\n    // The notched outline cannot be attached in the server platform. It schedules tasks\n    // for the next browser animation frame and relies on element client rectangles to render\n    // the outline notch. To avoid failures on the server, we just do not initialize it,\n    // but the actual notched-outline styles will be still displayed.\n    if (this._platform.isBrowser) {\n      // The notch component relies on the view to be initialized. This means\n      // that we cannot extend from the \"MDCNotchedOutline\".\n      this._mdcNotchedOutline = MDCNotchedOutline.attachTo(this._elementRef.nativeElement);\n    }\n    // Initial sync in case state has been updated before view initialization.\n    this._syncNotchedOutlineState();\n  }\n\n  ngOnChanges() {\n    // Whenever the width, or the open state changes, sync the notched outline to be\n    // based on the new values.\n    this._syncNotchedOutlineState();\n  }\n\n  ngOnDestroy() {\n    if (this._mdcNotchedOutline !== null) {\n      this._mdcNotchedOutline.destroy();\n    }\n  }\n\n  /** Synchronizes the notched outline state to be based on the `width` and `open` inputs. */\n  private _syncNotchedOutlineState() {\n    if (this._mdcNotchedOutline === null) {\n      return;\n    }\n    if (this.open) {\n      this._mdcNotchedOutline.notch(this.width);\n    } else {\n      this._mdcNotchedOutline.closeNotch();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {NgControl} from '@angular/forms';\nimport {\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  ThemePalette\n} from '@angular/material/core';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  MAT_FORM_FIELD,\n  matFormFieldAnimations,\n  MatFormFieldControl,\n} from '@angular/material/form-field';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MDCTextFieldAdapter,\n  MDCTextFieldFoundation,\n  numbers as mdcTextFieldNumbers\n} from '@material/textfield';\nimport {merge, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatError} from './directives/error';\nimport {MatFormFieldFloatingLabel} from './directives/floating-label';\nimport {MatHint} from './directives/hint';\nimport {MatLabel} from './directives/label';\nimport {MatFormFieldLineRipple} from './directives/line-ripple';\nimport {MatFormFieldNotchedOutline} from './directives/notched-outline';\nimport {MatPrefix} from './directives/prefix';\nimport {MatSuffix} from './directives/suffix';\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'auto';\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n  hideRequiredMarker?: boolean;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n  new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\nlet nextUniqueId = 0;\n\n/** Default appearance used by the form-field. */\nconst DEFAULT_APPEARANCE: MatFormFieldAppearance = 'fill';\n\n/** Default appearance used by the form-field. */\nconst DEFAULT_FLOAT_LABEL: FloatLabelType = 'auto';\n\n/**\n * Default transform for docked floating labels in a MDC text-field. This value has been\n * extracted from the MDC text-field styles because we programmatically modify the docked\n * label transform, but do not want to accidentally discard the default label transform.\n */\nconst FLOATING_LABEL_DEFAULT_DOCKED_TRANSFORM = `translateY(-50%)`;\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: './form-field.html',\n  styleUrls: ['./form-field.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-mdc-form-field',\n    '[class.mat-mdc-form-field-label-always-float]': '_shouldAlwaysFloat()',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-form-field-no-animations]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {provide: MAT_FORM_FIELD, useExisting: MatFormField},\n  ]\n})\nexport class MatFormField implements AfterViewInit, OnDestroy, AfterContentChecked,\n    AfterContentInit {\n  @ViewChild('textField') _textField: ElementRef<HTMLElement>;\n  @ViewChild('prefixContainer') _prefixContainer: ElementRef<HTMLElement>;\n  @ViewChild(MatFormFieldFloatingLabel) _floatingLabel: MatFormFieldFloatingLabel|undefined;\n  @ViewChild(MatFormFieldNotchedOutline) _notchedOutline: MatFormFieldNotchedOutline|undefined;\n  @ViewChild(MatFormFieldLineRipple) _lineRipple: MatFormFieldLineRipple|undefined;\n\n  @ContentChild(MatLabel) _labelChildNonStatic: MatLabel|undefined;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel|undefined;\n  @ContentChild(MatFormFieldControl) _formFieldControl: MatFormFieldControl<any>;\n  @ContentChildren(MatPrefix, {descendants: true}) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix, {descendants: true}) _suffixChildren: QueryList<MatSuffix>;\n  @ContentChildren(MatError, {descendants: true}) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint, {descendants: true}) _hintChildren: QueryList<MatHint>;\n\n  /** Whether the required marker should be hidden. */\n  @Input() hideRequiredMarker: boolean = false;\n\n  /** The color palette for the form-field. */\n  @Input() color: ThemePalette = 'primary';\n\n  /** Whether the label should always float or float as the user types. */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this._floatLabel || (this._labelOptions && this._labelOptions.float)\n        || DEFAULT_FLOAT_LABEL;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value;\n      // For backwards compatibility. Custom form-field controls or directives might set\n      // the \"floatLabel\" input and expect the form-field view to be updated automatically.\n      // e.g. autocomplete trigger. Ideally we'd get rid of this and the consumers would just\n      // emit the \"stateChanges\" observable. TODO(devversion): consider removing.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n    this._appearance = value || (this._defaults && this._defaults.appearance) || DEFAULT_APPEARANCE;\n    // If the appearance has been switched to `outline`, the label offset needs to be updated.\n    // The update can happen once the view has been re-checked, but not immediately because\n    // the view has not been updated and the notched-outline floating label is not present.\n    if (this._appearance === 'outline' && this._appearance !== oldValue) {\n      this._needsOutlineLabelOffsetUpdateOnStable = true;\n    }\n  }\n  private _appearance: MatFormFieldAppearance = DEFAULT_APPEARANCE;\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId = `mat-mdc-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-mdc-form-field-label-${nextUniqueId++}`;\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState = '';\n\n  /** Width of the outline notch. */\n  _outlineNotchWidth: number;\n\n  /** Gets the current form field control */\n  get _control(): MatFormFieldControl<any> {\n    return this._explicitFormFieldControl || this._formFieldControl;\n  }\n  set _control(value) { this._explicitFormFieldControl = value; }\n\n  private _destroyed = new Subject<void>();\n  private _isFocused: boolean|null = null;\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n  private _foundation: MDCTextFieldFoundation;\n  private _needsOutlineLabelOffsetUpdateOnStable = false;\n  private _adapter: MDCTextFieldAdapter = {\n    addClass: className => this._textField.nativeElement.classList.add(className),\n    removeClass: className => this._textField.nativeElement.classList.remove(className),\n    hasClass: className => this._textField.nativeElement.classList.contains(className),\n\n    hasLabel: () => this._hasFloatingLabel(),\n    isFocused: () => this._control.focused,\n    hasOutline: () => this._hasOutline(),\n\n    // MDC text-field will call this method on focus, blur and value change. It expects us\n    // to update the floating label state accordingly. Though we make this a noop because we\n    // want to react to floating label state changes through change detection. Relying on this\n    // adapter method would mean that the label would not update if the custom form-field control\n    // sets \"shouldLabelFloat\" to true, or if the \"floatLabel\" input binding changes to \"always\".\n    floatLabel: () => {},\n\n    // Label shaking is not supported yet. It will require a new API for form field\n    // controls to trigger the shaking. This can be a feature in the future.\n    // TODO(devversion): explore options on how to integrate label shaking.\n    shakeLabel: () => {},\n\n    // MDC by default updates the notched-outline whenever the text-field receives focus, or\n    // is being blurred. It also computes the label width every time the notch is opened or\n    // closed. This works fine in the standard MDC text-field, but not in Angular where the\n    // floating label could change through interpolation. We want to be able to update the\n    // notched outline whenever the label content changes. Additionally, relying on focus or\n    // blur to open and close the notch does not work for us since abstract form-field controls\n    // have the ability to control the floating label state (i.e. `shouldLabelFloat`), and we\n    // want to update the notch whenever the `_shouldLabelFloat()` value changes.\n    getLabelWidth: () => 0,\n\n    // TODO: MDC now supports setting the required asterisk marker directly on\n    // the label component. This adapter method may be implemented and\n    // mat-mdc-form-field-required-marker removed.\n    setLabelRequired: () => {},\n    notchOutline: () => {},\n    closeOutline: () => {},\n\n    activateLineRipple: () => this._lineRipple && this._lineRipple.activate(),\n    deactivateLineRipple: () => this._lineRipple && this._lineRipple.deactivate(),\n\n    // The foundation tries to register events on the input. This is not matching\n    // our concept of abstract form field controls. We handle each event manually\n    // in \"stateChanges\" based on the form-field control state. The following events\n    // need to be handled: focus, blur. We do not handle the \"input\" event since\n    // that one is only needed for the text-field character count, which we do\n    // not implement as part of the form-field, but should be implemented manually\n    // by consumers using template bindings.\n    registerInputInteractionHandler: () => {},\n    deregisterInputInteractionHandler: () => {},\n\n    // We do not have a reference to the native input since we work with abstract form field\n    // controls. MDC needs a reference to the native input optionally to handle character\n    // counting and value updating. These are both things we do not handle from within the\n    // form-field, so we can just return null.\n    getNativeInput: () => null,\n\n    // This method will never be called since we do not have the ability to add event listeners\n    // to the native input. This is because the form control is not necessarily an input, and\n    // the form field deals with abstract form controls of any type.\n    setLineRippleTransformOrigin: () => {},\n\n    // The foundation tries to register click and keyboard events on the form-field to figure out\n    // if the input value changes through user interaction. Based on that, the foundation tries\n    // to focus the input. Since we do not handle the input value as part of the form-field, nor\n    // it's guaranteed to be an input (see adapter methods above), this is a noop.\n    deregisterTextFieldInteractionHandler: () => {},\n    registerTextFieldInteractionHandler: () => {},\n\n    // The foundation tries to setup a \"MutationObserver\" in order to watch for attributes\n    // like \"maxlength\" or \"pattern\" to change. The foundation will update the validity state\n    // based on that. We do not need this logic since we handle the validity through the\n    // abstract form control instance.\n    deregisterValidationAttributeChangeHandler: () => {},\n    registerValidationAttributeChangeHandler: () => null as any,\n  };\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _ngZone: NgZone,\n              private _dir: Directionality,\n              private _platform: Platform,\n              @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n              private _defaults?: MatFormFieldDefaultOptions,\n              @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) private _labelOptions?: LabelOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    if (_defaults && _defaults.appearance) {\n      this.appearance = _defaults.appearance;\n    } else if (_defaults && _defaults.hideRequiredMarker) {\n      this.hideRequiredMarker = true;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._foundation = new MDCTextFieldFoundation(this._adapter);\n\n    // MDC uses the \"shouldFloat\" getter to know whether the label is currently floating. This\n    // does not match our implementation of when the label floats because we support more cases.\n    // For example, consumers can set \"@Input floatLabel\" to always, or the custom form-field\n    // control can set \"MatFormFieldControl#shouldLabelFloat\" to true. To ensure that MDC knows\n    // when the label is floating, we overwrite the property to be based on the method we use to\n    // determine the current state of the floating label.\n    Object.defineProperty(this._foundation, 'shouldFloat', {\n      get: () => this._shouldLabelFloat(),\n    });\n\n    // By default, the foundation determines the validity of the text-field from the\n    // specified native input. Since we don't pass a native input to the foundation because\n    // abstract form controls are not necessarily consisting of an input, we handle the\n    // text-field validity through the abstract form-field control state.\n    this._foundation.isValid = () => !this._control.errorState;\n\n    // Initial focus state sync. This happens rarely, but we want to account for\n    // it in case the form-field control has \"focused\" set to true on init.\n    this._updateFocusState();\n    // Initial notch width update. This is needed in case the text-field label floats\n    // on initialization, and renders inside of the notched outline.\n    this._refreshOutlineNotchWidth();\n    // Enable animations now. This ensures we don't animate on initial render.\n    this._subscriptAnimationState = 'enter';\n    // Because the above changes a value used in the template after it was checked, we need\n    // to trigger CD or the change might not be reflected if there is no other CD scheduled.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngAfterContentInit() {\n    this._assertFormFieldControl();\n    this._initializeControl();\n    this._initializeSubscript();\n    this._initializePrefixAndSuffix();\n    this._initializeOutlineLabelOffsetSubscriptions();\n  }\n\n  ngAfterContentChecked() {\n    this._assertFormFieldControl();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field\n   * should be positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._textField || this._elementRef;\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    // This is for backwards compatibility only. Consumers of the form-field might use\n    // this method. e.g. the autocomplete trigger. This method has been added to the non-MDC\n    // form-field because setting \"floatLabel\" to \"always\" caused the label to float without\n    // animation. This is different in MDC where the label always animates, so this method\n    // is no longer necessary. There doesn't seem any benefit in adding logic to allow changing\n    // the floating label state without animations. The non-MDC implementation was inconsistent\n    // because it always animates if \"floatLabel\" is set away from \"always\".\n    // TODO(devversion): consider removing this method when releasing the MDC form-field.\n    if (this._hasFloatingLabel()) {\n      this.floatLabel = 'always';\n    }\n  }\n\n  /** Initializes the registered form-field control. */\n  private _initializeControl() {\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(\n        `mat-mdc-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.subscribe(() => {\n      this._updateFocusState();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n  }\n\n  /** Initializes the prefix and suffix containers. */\n  private _initializePrefixAndSuffix() {\n    // Mark the form-field as dirty whenever the prefix or suffix children change. This\n    // is necessary because we conditionally display the prefix/suffix containers based\n    // on whether there is projected content.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes)\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /**\n   * Initializes the subscript by validating hints and synchronizing \"aria-describedby\" ids\n   * with the custom form-field control. Also subscribes to hint and error changes in order\n   * to be able to validate and synchronize ids on change.\n   */\n  private _initializeSubscript() {\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Initial mat-hint validation and subscript describedByIds sync.\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  private _assertFormFieldControl() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  private _updateFocusState() {\n    // Usually the MDC foundation would call \"activateFocus\" and \"deactivateFocus\" whenever\n    // certain DOM events are emitted. This is not possible in our implementation of the\n    // form-field because we support abstract form field controls which are not necessarily\n    // of type input, nor do we have a reference to a native form-field control element. Instead\n    // we handle the focus by checking if the abstract form-field control focused state changes.\n    if (this._control.focused && !this._isFocused) {\n      this._isFocused = true;\n      this._foundation.activateFocus();\n    } else if (!this._control.focused && (this._isFocused || this._isFocused === null)) {\n      this._isFocused = false;\n      this._foundation.deactivateFocus();\n    }\n  }\n\n  /**\n   * The floating label in the docked state needs to account for prefixes. The horizontal offset\n   * is calculated whenever the appearance changes to `outline`, the prefixes change, or when the\n   * form-field is added to the DOM. This method sets up all subscriptions which are needed to\n   * trigger the label offset update. In general, we want to avoid performing measurements often,\n   * so we rely on the `NgZone` as indicator when the offset should be recalculated, instead of\n   * checking every change detection cycle.\n   */\n  private _initializeOutlineLabelOffsetSubscriptions() {\n    // Whenever the prefix changes, schedule an update of the label offset.\n    this._prefixChildren.changes\n      .subscribe(() => this._needsOutlineLabelOffsetUpdateOnStable = true);\n\n    // Note that we have to run outside of the `NgZone` explicitly, in order to avoid\n    // throwing users into an infinite loop if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._needsOutlineLabelOffsetUpdateOnStable) {\n          this._needsOutlineLabelOffsetUpdateOnStable = false;\n          this._updateOutlineLabelOffset();\n        }\n      });\n    });\n\n    this._dir.change.pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._needsOutlineLabelOffsetUpdateOnStable = true);\n  }\n\n  /** Whether the floating label should always float or not. */\n  _shouldAlwaysFloat() {\n    return this.floatLabel === 'always';\n  }\n\n  _hasOutline() {\n    return this.appearance === 'outline';\n  }\n\n  /**\n   * Whether the label should display in the infix. Labels in the outline appearance are\n   * displayed as part of the notched-outline and are horizontally offset to account for\n   * form-field prefix content. This won't work in server side rendering since we cannot\n   * measure the width of the prefix container. To make the docked label appear as if the\n   * right offset has been calculated, we forcibly render the label inside the infix. Since\n   * the label is part of the infix, the label cannot overflow the prefix content.\n   */\n  _forceDisplayInfixLabel() {\n    return !this._platform.isBrowser && this._prefixChildren.length && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return !!this._labelChildNonStatic || !!this._labelChildStatic;\n  }\n\n  _shouldLabelFloat() {\n    return this._control.shouldLabelFloat || this._shouldAlwaysFloat();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n      this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Refreshes the width of the outline-notch, if present. */\n  _refreshOutlineNotchWidth() {\n    if (!this._hasOutline() || !this._floatingLabel) {\n      return;\n    }\n    // The outline notch should be based on the label width, but needs to respect the scaling\n    // applied to the label if it actively floats. Since the label always floats when the notch\n    // is open, the MDC text-field floating label scaling is respected in notch width calculation.\n    this._outlineNotchWidth = this._floatingLabel.getWidth() * mdcTextFieldNumbers.LABEL_SCALE;\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each \"mat-hint\" alignment specified. The hint\n   * label specified set through the input is being considered as \"start\" aligned.\n   *\n   * This method is a noop if Angular runs in production mode.\n   */\n  private _validateHints() {\n    if (isDevMode() && this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n          this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n          this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /**\n   * Updates the horizontal offset of the label in the outline appearance. In the outline\n   * appearance, the notched-outline and label are not relative to the infix container because\n   * the outline intends to surround prefixes, suffixes and the infix. This means that the\n   * floating label by default overlaps prefixes in the docked state. To avoid this, we need to\n   * horizontally offset the label by the width of the prefix container. The MDC text-field does\n   * not need to do this because they use a fixed width for prefixes. Hence, they can simply\n   * incorporate the horizontal offset into their default text-field styles.\n   */\n  private _updateOutlineLabelOffset() {\n    if (!this._platform.isBrowser || !this._hasOutline() || !this._floatingLabel) {\n      return;\n    }\n    const floatingLabel = this._floatingLabel.element;\n    // If no prefix is displayed, reset the outline label offset from potential\n    // previous label offset updates.\n    if (!this._prefixContainer) {\n      floatingLabel.style.transform = '';\n      return;\n    }\n    // If the form-field is not attached to the DOM yet (e.g. in a tab), we defer\n    // the label offset update until the zone stabilizes.\n    if (!this._isAttachedToDom()) {\n      this._needsOutlineLabelOffsetUpdateOnStable = true;\n      return;\n    }\n    const prefixContainer = this._prefixContainer.nativeElement as HTMLElement;\n    // If the directionality is RTL, the x-axis transform needs to be inverted. This\n    // is because `transformX` does not change based on the page directionality.\n    const labelHorizontalOffset =\n      (this._dir.value === 'rtl' ? -1 : 1) * prefixContainer.getBoundingClientRect().width;\n\n    // Update the transform the floating label to account for the prefix container. Note\n    // that we do not want to overwrite the default transform for docked floating labels.\n    floatingLabel.style.transform =\n        `${FLOATING_LABEL_DEFAULT_DOCKED_TRANSFORM} translateX(${labelHorizontalOffset}px)`;\n  }\n\n  /** Checks whether the form field is attached to the DOM. */\n  private _isAttachedToDom(): boolean {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    if (element.getRootNode) {\n      const rootNode = element.getRootNode();\n      // If the element is inside the DOM the root node will be either the document\n      // or the closest shadow root, otherwise it'll be the element itself.\n      return rootNode && rootNode !== element;\n    }\n    // Otherwise fall back to checking if it's in the document. This doesn't account for\n    // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n    return document.documentElement!.contains(element);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatError} from './directives/error';\nimport {MatFormFieldFloatingLabel} from './directives/floating-label';\nimport {MatHint} from './directives/hint';\nimport {MatLabel} from './directives/label';\nimport {MatFormFieldLineRipple} from './directives/line-ripple';\nimport {MatFormFieldNotchedOutline} from './directives/notched-outline';\nimport {MatPrefix} from './directives/prefix';\nimport {MatSuffix} from './directives/suffix';\nimport {MatFormField} from './form-field';\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    ObserversModule\n  ],\n  exports: [\n    MatFormField,\n    MatLabel,\n    MatHint,\n    MatError,\n    MatPrefix,\n    MatSuffix,\n    MatCommonModule\n  ],\n  declarations: [\n    MatFormField,\n    MatLabel,\n    MatError,\n    MatHint,\n    MatPrefix,\n    MatSuffix,\n    MatFormFieldFloatingLabel,\n    MatFormFieldNotchedOutline,\n    MatFormFieldLineRipple\n  ],\n})\nexport class MatFormFieldModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {\n  MAT_FORM_FIELD,\n  MatFormFieldControl,\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n} from '@angular/material/form-field';\n\nexport * from './directives/label';\nexport * from './directives/error';\nexport * from './directives/hint';\nexport * from './directives/prefix';\nexport * from './directives/suffix';\nexport * from './form-field';\nexport * from './module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {MatFormFieldFloatingLabel as Éµangular_material_src_material_experimental_mdc_form_field_mdc_form_field_a} from './directives/floating-label';\nexport {MatFormFieldLineRipple as Éµangular_material_src_material_experimental_mdc_form_field_mdc_form_field_c} from './directives/line-ripple';\nexport {MatFormFieldNotchedOutline as Éµangular_material_src_material_experimental_mdc_form_field_mdc_form_field_b} from './directives/notched-outline';"],"names":["nextUniqueId","mdcTextFieldNumbers"],"mappings":"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"}