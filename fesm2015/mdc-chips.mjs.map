{"version":3,"file":"mdc-chips.mjs","sources":["../../../../../../src/material-experimental/mdc-chips/emit-event.ts","../../../../../../src/material-experimental/mdc-chips/chip-action.ts","../../../../../../src/material-experimental/mdc-chips/chip-icons.ts","../../../../../../src/material-experimental/mdc-chips/chip.ts","../../../../../../src/material-experimental/mdc-chips/chip.html","../../../../../../src/material-experimental/mdc-chips/chip-option.ts","../../../../../../src/material-experimental/mdc-chips/chip-option.html","../../../../../../src/material-experimental/mdc-chips/chip-edit-input.ts","../../../../../../src/material-experimental/mdc-chips/chip-row.ts","../../../../../../src/material-experimental/mdc-chips/chip-row.html","../../../../../../src/material-experimental/mdc-chips/chip-set.ts","../../../../../../src/material-experimental/mdc-chips/chip-listbox.ts","../../../../../../src/material-experimental/mdc-chips/chip-grid.ts","../../../../../../src/material-experimental/mdc-chips/chip-default-options.ts","../../../../../../src/material-experimental/mdc-chips/chip-input.ts","../../../../../../src/material-experimental/mdc-chips/module.ts","../../../../../../src/material-experimental/mdc-chips/public-api.ts","../../../../../../src/material-experimental/mdc-chips/index.ts","../../../../../../src/material-experimental/mdc-chips/mdc-chips_public_index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Emits a custom event from an element.\n * @param element Element from which to emit the event.\n * @param _document Document that the element is placed in.\n * @param eventName Name of the event.\n * @param data Data attached to the event.\n * @param shouldBubble Whether the event should bubble.\n */\nexport function emitCustomEvent<T>(\n  element: HTMLElement,\n  _document: Document,\n  eventName: string,\n  data: T,\n  shouldBubble: boolean,\n): void {\n  let event: CustomEvent<T>;\n  if (typeof CustomEvent === 'function') {\n    event = new CustomEvent<T>(eventName, {bubbles: shouldBubble, detail: data});\n  } else {\n    event = _document.createEvent('CustomEvent');\n    event.initCustomEvent(eventName, shouldBubble, false, data);\n  }\n\n  element.dispatchEvent(event);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  MDCChipActionAdapter,\n  MDCChipActionFoundation,\n  MDCChipActionType,\n  MDCChipPrimaryActionFoundation,\n} from '@material/chips';\nimport {emitCustomEvent} from './emit-event';\nimport {\n  CanDisable,\n  HasTabIndex,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material-experimental/mdc-core';\n\nconst _MatChipActionMixinBase = mixinTabIndex(mixinDisabled(class {}), -1);\n\n/**\n * Interactive element within a chip.\n * @docs-private\n */\n@Directive({\n  selector: '[matChipAction]',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    'class': 'mdc-evolution-chip__action mat-mdc-chip-action',\n    '[class.mdc-evolution-chip__action--primary]': `_getFoundation().actionType() === ${MDCChipActionType.PRIMARY}`,\n    // Note that while our actions are interactive, we have to add the `--presentational` class,\n    // in order to avoid some super-specific `:hover` styles from MDC.\n    '[class.mdc-evolution-chip__action--presentational]': `_getFoundation().actionType() === ${MDCChipActionType.PRIMARY}`,\n    '[class.mdc-evolution-chip__action--trailing]': `_getFoundation().actionType() === ${MDCChipActionType.TRAILING}`,\n    '[attr.tabindex]': '(disabled || !isInteractive) ? null : tabIndex',\n    '[attr.disabled]': \"disabled ? '' : null\",\n    '[attr.aria-disabled]': 'disabled',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n})\nexport class MatChipAction\n  extends _MatChipActionMixinBase\n  implements AfterViewInit, OnDestroy, CanDisable, HasTabIndex, OnChanges\n{\n  private _document: Document;\n  private _foundation: MDCChipActionFoundation;\n  private _adapter: MDCChipActionAdapter = {\n    focus: () => this.focus(),\n    getAttribute: (name: string) => this._elementRef.nativeElement.getAttribute(name),\n    setAttribute: (name: string, value: string) => {\n      // MDC tries to update the tabindex directly in the DOM when navigating using the keyboard\n      // which overrides our own handling. If we detect such a case, assign it to the same property\n      // as the Angular binding in order to maintain consistency.\n      if (name === 'tabindex') {\n        this._updateTabindex(parseInt(value));\n      } else {\n        this._elementRef.nativeElement.setAttribute(name, value);\n      }\n    },\n    removeAttribute: (name: string) => {\n      if (name !== 'tabindex') {\n        this._elementRef.nativeElement.removeAttribute(name);\n      }\n    },\n    getElementID: () => this._elementRef.nativeElement.id,\n    emitEvent: <T>(eventName: string, data: T) => {\n      emitCustomEvent<T>(this._elementRef.nativeElement, this._document, eventName, data, true);\n    },\n  };\n\n  /** Whether the action is interactive. */\n  @Input() isInteractive = true;\n\n  _handleClick(_event: MouseEvent) {\n    // Usually these events can't happen while the chip is disabled since the browser won't\n    // allow them which is what MDC seems to rely on, however the event can be faked in tests.\n    if (!this.disabled && this.isInteractive) {\n      this._foundation.handleClick();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    // Usually these events can't happen while the chip is disabled since the browser won't\n    // allow them which is what MDC seems to rely on, however the event can be faked in tests.\n    if (!this.disabled && this.isInteractive) {\n      this._foundation.handleKeydown(event);\n    }\n  }\n\n  protected _createFoundation(adapter: MDCChipActionAdapter): MDCChipActionFoundation {\n    return new MDCChipPrimaryActionFoundation(adapter);\n  }\n\n  constructor(\n    public _elementRef: ElementRef,\n    @Inject(DOCUMENT) _document: any,\n    private _changeDetectorRef: ChangeDetectorRef,\n  ) {\n    super();\n    this._foundation = this._createFoundation(this._adapter);\n\n    if (_elementRef.nativeElement.nodeName === 'BUTTON') {\n      _elementRef.nativeElement.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterViewInit() {\n    this._foundation.init();\n    this._foundation.setDisabled(this.disabled);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['disabled']) {\n      this._foundation.setDisabled(this.disabled);\n    }\n  }\n\n  ngOnDestroy() {\n    this._foundation.destroy();\n  }\n\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  _getFoundation() {\n    return this._foundation;\n  }\n\n  _updateTabindex(value: number) {\n    this.tabIndex = value;\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken} from '@angular/core';\nimport {MDCChipActionAdapter, MDCChipTrailingActionFoundation} from '@material/chips';\nimport {MatChipAction} from './chip-action';\n\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_CHIP_AVATAR = new InjectionToken<MatChipAvatar>('MatChipAvatar');\n\n/**\n * Directive to add CSS classes to chip leading icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {\n    'class': 'mat-mdc-chip-avatar mdc-evolution-chip__icon mdc-evolution-chip__icon--primary',\n    'role': 'img',\n  },\n  providers: [{provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar}],\n})\nexport class MatChipAvatar {}\n\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_CHIP_TRAILING_ICON = new InjectionToken<MatChipTrailingIcon>(\n  'MatChipTrailingIcon',\n);\n\n/**\n * Directive to add CSS classes to and configure attributes for chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {\n    'class':\n      'mat-mdc-chip-trailing-icon mdc-evolution-chip__icon mdc-evolution-chip__icon--trailing',\n    'aria-hidden': 'true',\n  },\n  providers: [{provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon}],\n})\nexport class MatChipTrailingIcon extends MatChipAction {\n  /**\n   * MDC considers all trailing actions as a remove icon,\n   * but we support non-interactive trailing icons.\n   */\n  override isInteractive = false;\n\n  protected override _createFoundation(adapter: MDCChipActionAdapter) {\n    return new MDCChipTrailingActionFoundation(adapter);\n  }\n}\n\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_CHIP_REMOVE = new InjectionToken<MatChipRemove>('MatChipRemove');\n\n/**\n * Directive to remove the parent chip when the trailing icon is clicked or\n * when the ENTER key is pressed on it.\n *\n * Recommended for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n * ```\n * <mat-chip>\n *   <mat-icon matChipRemove>cancel</mat-icon>\n * </mat-chip>\n * ```\n */\n\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class':\n      'mat-mdc-chip-remove mat-mdc-chip-trailing-icon mat-mdc-focus-indicator ' +\n      'mdc-evolution-chip__icon mdc-evolution-chip__icon--trailing',\n    'role': 'button',\n    '[attr.aria-hidden]': 'null',\n  },\n  providers: [{provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove}],\n})\nexport class MatChipRemove extends MatChipAction {\n  protected override _createFoundation(adapter: MDCChipActionAdapter) {\n    return new MDCChipTrailingActionFoundation(adapter);\n  }\n\n  override _handleClick(event: MouseEvent) {\n    // Some consumers bind `click` events directly on the chip\n    // which will also pick up clicks on the remove button.\n    event.stopPropagation();\n    super._handleClick(event);\n  }\n\n  override _handleKeydown(event: KeyboardEvent) {\n    event.stopPropagation();\n    super._handleKeydown(event);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  AfterViewInit,\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n  Attribute,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleGlobalOptions,\n} from '@angular/material-experimental/mdc-core';\nimport {\n  MDCChipFoundation,\n  MDCChipAdapter,\n  MDCChipActionType,\n  MDCChipActionFocusBehavior,\n  MDCChipActionFoundation,\n  MDCChipActionEvents,\n  ActionInteractionEvent,\n  ActionNavigationEvent,\n  MDCChipActionInteractionTrigger,\n} from '@material/chips';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Subject} from 'rxjs';\nimport {\n  MatChipAvatar,\n  MatChipTrailingIcon,\n  MatChipRemove,\n  MAT_CHIP_AVATAR,\n  MAT_CHIP_TRAILING_ICON,\n  MAT_CHIP_REMOVE,\n} from './chip-icons';\nimport {emitCustomEvent} from './emit-event';\nimport {MatChipAction} from './chip-action';\n\nlet uid = 0;\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/**\n * Boilerplate for applying mixins to MatChip.\n * @docs-private\n */\nabstract class MatChipBase {\n  abstract disabled: boolean;\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n\n/**\n * Material design styled Chip base component. Used inside the MatChipSet component.\n *\n * Extended by MatChipOption and MatChipRow for different interaction patterns.\n */\n@Component({\n  selector: 'mat-basic-chip, mat-chip',\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  exportAs: 'matChip',\n  templateUrl: 'chip.html',\n  styleUrls: ['chip.css'],\n  host: {\n    'class': 'mat-mdc-chip',\n    '[class.mdc-evolution-chip]': '!_isBasicChip',\n    '[class.mdc-evolution-chip--disabled]': 'disabled',\n    '[class.mdc-evolution-chip--with-trailing-action]': '_hasTrailingIcon()',\n    '[class.mdc-evolution-chip--with-primary-graphic]': 'leadingIcon',\n    '[class.mdc-evolution-chip--with-primary-icon]': 'leadingIcon',\n    '[class.mdc-evolution-chip--with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-basic-chip]': '_isBasicChip',\n    '[class.mat-mdc-standard-chip]': '!_isBasicChip',\n    '[class.mat-mdc-chip-with-trailing-icon]': '_hasTrailingIcon()',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[id]': 'id',\n    '[attr.role]': 'role',\n    '[attr.tabindex]': 'role ? tabIndex : null',\n    '[attr.aria-label]': 'ariaLabel',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChip\n  extends _MatChipMixinBase\n  implements AfterViewInit, CanColor, CanDisableRipple, CanDisable, HasTabIndex, OnDestroy\n{\n  protected _document: Document;\n\n  /** Whether the ripple is centered on the chip. */\n  readonly _isRippleCentered = false;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blurred. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Whether this chip is a basic (unstyled) chip. */\n  readonly _isBasicChip: boolean;\n\n  /** Role for the root of the chip. */\n  @Input() role: string | null = null;\n\n  /** Whether the chip has focus. */\n  protected _hasFocusInternal = false;\n\n  /** Whether moving focus into the chip is pending. */\n  private _pendingFocus: boolean;\n\n  /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  _hasFocus() {\n    return this._hasFocusInternal;\n  }\n\n  /** A unique id for the chip. If none is supplied, it will be auto-generated. */\n  @Input() id: string = `mat-mdc-chip-${uid++}`;\n\n  /** ARIA label for the content of the chip. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: BooleanInput) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.removeIcon) {\n      this.removeIcon.disabled = this._disabled;\n    }\n\n    this._chipFoundation.setDisabled(this._disabled);\n  }\n  protected _disabled: boolean = false;\n\n  private _textElement!: HTMLElement;\n\n  /**\n   * The value of the chip. Defaults to the content inside\n   * the `mat-mdc-chip-action-label` element.\n   */\n  @Input()\n  get value(): any {\n    return this._value !== undefined ? this._value : this._textElement.textContent!.trim();\n  }\n  set value(value: any) {\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean {\n    return this._removable;\n  }\n  set removable(value: BooleanInput) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /**\n   * Colors the chip for emphasis as if it were selected.\n   */\n  @Input()\n  get highlighted(): boolean {\n    return this._highlighted;\n  }\n  set highlighted(value: BooleanInput) {\n    this._highlighted = coerceBooleanProperty(value);\n  }\n  protected _highlighted: boolean = false;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The MDC foundation containing business logic for MDC chip. */\n  _chipFoundation: MDCChipFoundation;\n\n  /** The unstyled chip selector for this component. */\n  protected basicChipAttrName = 'mat-basic-chip';\n\n  /** The chip's leading icon. */\n  @ContentChild(MAT_CHIP_AVATAR) leadingIcon: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MAT_CHIP_TRAILING_ICON) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's trailing remove icon. */\n  @ContentChild(MAT_CHIP_REMOVE) removeIcon: MatChipRemove;\n\n  /** Reference to the MatRipple instance of the chip. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /** Action receiving the primary set of user interactions. */\n  @ViewChild(MatChipAction) primaryAction: MatChipAction;\n\n  /**\n   * Implementation of the MDC chip adapter interface.\n   * These methods are called by the chip foundation.\n   */\n  protected _chipAdapter: MDCChipAdapter = {\n    addClass: className => this._setMdcClass(className, true),\n    removeClass: className => this._setMdcClass(className, false),\n    hasClass: className => this._elementRef.nativeElement.classList.contains(className),\n    emitEvent: <T>(eventName: string, data: T) => {\n      emitCustomEvent(this._elementRef.nativeElement, this._document, eventName, data, true);\n    },\n    setStyleProperty: (propertyName: string, value: string) => {\n      this._elementRef.nativeElement.style.setProperty(propertyName, value);\n    },\n    isRTL: () => this._dir?.value === 'rtl',\n    getAttribute: attributeName => this._elementRef.nativeElement.getAttribute(attributeName),\n    getElementID: () => this._elementRef.nativeElement.id,\n    getOffsetWidth: () => this._elementRef.nativeElement.offsetWidth,\n    getActions: () => {\n      const result: MDCChipActionType[] = [];\n\n      if (this._getAction(MDCChipActionType.PRIMARY)) {\n        result.push(MDCChipActionType.PRIMARY);\n      }\n\n      if (this._getAction(MDCChipActionType.TRAILING)) {\n        result.push(MDCChipActionType.TRAILING);\n      }\n\n      return result;\n    },\n    isActionSelectable: (action: MDCChipActionType) => {\n      return this._getAction(action)?.isSelectable() || false;\n    },\n    isActionSelected: (action: MDCChipActionType) => {\n      return this._getAction(action)?.isSelected() || false;\n    },\n    isActionDisabled: (action: MDCChipActionType) => {\n      return this._getAction(action)?.isDisabled() || false;\n    },\n    isActionFocusable: (action: MDCChipActionType) => {\n      return this._getAction(action)?.isFocusable() || false;\n    },\n    setActionSelected: (action: MDCChipActionType, isSelected: boolean) => {\n      this._getAction(action)?.setSelected(isSelected);\n    },\n    setActionDisabled: (action: MDCChipActionType, isDisabled: boolean) => {\n      this._getAction(action)?.setDisabled(isDisabled);\n    },\n    setActionFocus: (action: MDCChipActionType, behavior: MDCChipActionFocusBehavior) => {\n      this._getAction(action)?.setFocus(behavior);\n    },\n  };\n\n  constructor(\n    public _changeDetectorRef: ChangeDetectorRef,\n    elementRef: ElementRef<HTMLElement>,\n    protected _ngZone: NgZone,\n    private _focusMonitor: FocusMonitor,\n    @Inject(DOCUMENT) _document: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n    @Optional()\n    @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n    private _globalRippleOptions?: RippleGlobalOptions,\n    @Attribute('tabindex') tabIndex?: string,\n  ) {\n    super(elementRef);\n    const element = elementRef.nativeElement;\n    this._document = _document;\n    this._chipFoundation = new MDCChipFoundation(this._chipAdapter);\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n    this._isBasicChip =\n      element.hasAttribute(this.basicChipAttrName) ||\n      element.tagName.toLowerCase() === this.basicChipAttrName;\n    element.addEventListener(MDCChipActionEvents.INTERACTION, this._handleActionInteraction);\n    element.addEventListener(MDCChipActionEvents.NAVIGATION, this._handleActionNavigation);\n    _focusMonitor.monitor(elementRef, true);\n\n    _ngZone.runOutsideAngular(() => {\n      element.addEventListener('transitionend', this._handleTransitionend);\n      element.addEventListener('animationend', this._handleAnimationend);\n    });\n\n    if (tabIndex != null) {\n      this.tabIndex = parseInt(tabIndex) ?? this.defaultTabIndex;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._chipFoundation.init();\n    this._chipFoundation.setDisabled(this.disabled);\n    this._textElement = this._elementRef.nativeElement.querySelector('.mat-mdc-chip-action-label');\n\n    if (this._pendingFocus) {\n      this._pendingFocus = false;\n      this.focus();\n    }\n  }\n\n  ngOnDestroy() {\n    const element = this._elementRef.nativeElement;\n    element.removeEventListener(MDCChipActionEvents.INTERACTION, this._handleActionInteraction);\n    element.removeEventListener(MDCChipActionEvents.NAVIGATION, this._handleActionNavigation);\n    element.removeEventListener('transitionend', this._handleTransitionend);\n    element.removeEventListener('animationend', this._handleAnimationend);\n    this._chipFoundation.destroy();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this.destroyed.emit({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Sets whether the given CSS class should be applied to the MDC chip. */\n  private _setMdcClass(cssClass: string, active: boolean) {\n    const classes = this._elementRef.nativeElement.classList;\n    active ? classes.add(cssClass) : classes.remove(cssClass);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Whether or not the ripple should be disabled. */\n  _isRippleDisabled(): boolean {\n    return (\n      this.disabled ||\n      this.disableRipple ||\n      this._animationsDisabled ||\n      this._isBasicChip ||\n      !!this._globalRippleOptions?.disabled\n    );\n  }\n\n  _getAction(type: MDCChipActionType): MDCChipActionFoundation | undefined {\n    switch (type) {\n      case MDCChipActionType.PRIMARY:\n        return this.primaryAction?._getFoundation();\n      case MDCChipActionType.TRAILING:\n        return (this.removeIcon || this.trailingIcon)?._getFoundation();\n    }\n\n    return undefined;\n  }\n\n  _getFoundation() {\n    return this._chipFoundation;\n  }\n\n  _hasTrailingIcon() {\n    return !!(this.trailingIcon || this.removeIcon);\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // If `focus` is called before `ngAfterViewInit`, we won't have access to the primary action.\n    // This can happen if the consumer tries to focus a chip immediately after it is added.\n    // Queue the method to be called again on init.\n    if (!this.primaryAction) {\n      this._pendingFocus = true;\n      return;\n    }\n\n    if (!this._hasFocus()) {\n      this._onFocus.next({chip: this});\n      this._hasFocusInternal = true;\n    }\n\n    this.primaryAction.focus();\n  }\n\n  /** Overridden by MatChipOption. */\n  protected _onChipInteraction(event: ActionInteractionEvent) {\n    const removeElement = this.removeIcon?._elementRef.nativeElement;\n    const trigger = event.detail.trigger;\n\n    // MDC's removal process requires an `animationend` event followed by a `transitionend`\n    // event coming from the chip, which in turn will call `remove`. While we can stub\n    // out these events in our own tests, they can be difficult to fake for consumers that are\n    // testing our components or are wrapping them. We skip the entire sequence and trigger the\n    // removal directly in order to make the component easier to deal with.\n    if (\n      removeElement &&\n      (trigger === MDCChipActionInteractionTrigger.CLICK ||\n        trigger === MDCChipActionInteractionTrigger.ENTER_KEY ||\n        trigger === MDCChipActionInteractionTrigger.SPACEBAR_KEY) &&\n      (event.target === removeElement || removeElement.contains(event.target))\n    ) {\n      this.remove();\n    } else {\n      this._chipFoundation.handleActionInteraction(event);\n    }\n  }\n\n  private _handleActionInteraction = (event: Event) => {\n    this._onChipInteraction(event as ActionInteractionEvent);\n  };\n\n  private _handleActionNavigation = (event: Event) => {\n    this._chipFoundation.handleActionNavigation(event as ActionNavigationEvent);\n  };\n\n  private _handleTransitionend = (event: TransitionEvent) => {\n    if (event.target === this._elementRef.nativeElement) {\n      this._ngZone.run(() => this._chipFoundation.handleTransitionEnd());\n    }\n  };\n\n  private _handleAnimationend = (event: AnimationEvent) => {\n    if (event.target === this._elementRef.nativeElement) {\n      this._ngZone.run(() => this._chipFoundation.handleAnimationEnd(event));\n    }\n  };\n}\n","<span matRipple class=\"mat-mdc-chip-ripple\"\n     [matRippleDisabled]=\"_isRippleDisabled()\"\n     [matRippleCentered]=\"_isRippleCentered\"\n     [matRippleTrigger]=\"_elementRef.nativeElement\"></span>\n<span class=\"mat-mdc-chip-focus-overlay\"></span>\n\n<span class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--primary\">\n  <div matChipAction [isInteractive]=\"false\">\n    <span class=\"mdc-evolution-chip__graphic mat-mdc-chip-graphic\" *ngIf=\"leadingIcon\">\n      <ng-content select=\"mat-chip-avatar, [matChipAvatar]\"></ng-content>\n    </span>\n    <span class=\"mdc-evolution-chip__text-label mat-mdc-chip-action-label\">\n      <ng-content></ng-content>\n      <span class=\"mat-mdc-chip-primary-focus-indicator mat-mdc-focus-indicator\"></span>\n    </span>\n  </div>\n</span>\n\n<span\n  class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--trailing\"\n  *ngIf=\"_hasTrailingIcon()\">\n  <ng-content select=\"mat-chip-trailing-icon,[matChipRemove],[matChipTrailingIcon]\"></ng-content>\n</span>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  AfterViewInit,\n  OnInit,\n} from '@angular/core';\nimport {\n  ActionInteractionEvent,\n  MDCChipActionInteractionTrigger,\n  MDCChipActionType,\n  MDCChipCssClasses,\n} from '@material/chips';\nimport {take} from 'rxjs/operators';\nimport {MatChip} from './chip';\n\n/** Event object emitted by MatChipOption when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChipOption,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false,\n  ) {}\n}\n\n/**\n * An extension of the MatChip component that supports chip selection.\n * Used with MatChipListbox.\n */\n@Component({\n  selector: 'mat-basic-chip-option, mat-chip-option',\n  templateUrl: 'chip-option.html',\n  styleUrls: ['chip.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-mdc-chip mat-mdc-chip-option mdc-evolution-chip mdc-evolution-chip--filter',\n    '[class.mat-mdc-chip-selected]': 'selected',\n    '[class.mat-mdc-chip-multiple]': '_chipListMultiple',\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mdc-evolution-chip--selectable]': 'selectable',\n    '[class.mdc-evolution-chip--disabled]': 'disabled',\n    '[class.mdc-evolution-chip--with-trailing-action]': '_hasTrailingIcon()',\n    '[class.mdc-evolution-chip--with-primary-graphic]': '_hasLeadingGraphic()',\n    '[class.mdc-evolution-chip--with-primary-icon]': 'leadingIcon',\n    '[class.mdc-evolution-chip--with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-trailing-icon]': '_hasTrailingIcon()',\n    '[attr.tabindex]': 'null',\n    '[attr.aria-label]': 'null',\n    '[attr.role]': 'role',\n    '[id]': 'id',\n  },\n  providers: [{provide: MatChip, useExisting: MatChipOption}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipOption extends MatChip implements OnInit, AfterViewInit {\n  /** Whether the component is done initializing. */\n  private _isInitialized: boolean;\n\n  /**\n   * Selected state that was assigned before the component was initializing\n   * and which needs to be synced back up with the foundation.\n   */\n  private _pendingSelectedState: boolean | undefined;\n\n  /** Whether the chip list is selectable. */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /**\n   * Whether or not the chip is selectable.\n   *\n   * When a chip is not selectable, changes to its selected state are always\n   * ignored. By default an option chip is selectable, and it becomes\n   * non-selectable if its parent chip list is not selectable.\n   */\n  @Input()\n  get selectable(): boolean {\n    return this._selectable && this.chipListSelectable;\n  }\n  set selectable(value: BooleanInput) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean {\n    return (\n      this._pendingSelectedState ?? this._chipFoundation.isActionSelected(MDCChipActionType.PRIMARY)\n    );\n  }\n  set selected(value: BooleanInput) {\n    if (this.selectable) {\n      const coercedValue = coerceBooleanProperty(value);\n\n      if (this._isInitialized) {\n        this._setSelectedState(coercedValue, false);\n      } else {\n        this._pendingSelectedState = coercedValue;\n      }\n    }\n  }\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected)\n      ? this.selected.toString()\n      : null;\n  }\n\n  /** The unstyled chip selector for this component. */\n  protected override basicChipAttrName = 'mat-basic-chip-option';\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n    new EventEmitter<MatChipSelectionChange>();\n\n  ngOnInit() {\n    this.role = 'presentation';\n  }\n\n  override ngAfterViewInit() {\n    super.ngAfterViewInit();\n    this._isInitialized = true;\n\n    if (this._pendingSelectedState != null) {\n      // Note that we want to clear the pending state before calling `_setSelectedState`, because\n      // we want it to read the actual selected state instead falling back to the pending one.\n      const selectedState = this._pendingSelectedState;\n      this._pendingSelectedState = undefined;\n      this._setSelectedState(selectedState, false);\n    }\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (this.selectable) {\n      this._setSelectedState(true, false);\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this.selectable) {\n      this._setSelectedState(false, false);\n    }\n  }\n\n  /** Selects this chip and emits userInputSelection event */\n  selectViaInteraction(): void {\n    if (this.selectable) {\n      this._setSelectedState(true, true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    if (this.selectable) {\n      this._setSelectedState(!this.selected, isUserInput);\n    }\n\n    return this.selected;\n  }\n\n  /** Resets the state of the chip when it loses focus. */\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      this._ngZone.run(() => {\n        this._hasFocusInternal = false;\n        this._onBlur.next({chip: this});\n      });\n    });\n  }\n\n  protected override _onChipInteraction(event: ActionInteractionEvent) {\n    const {trigger, source} = event.detail;\n\n    // Non-selection interactions should work the same as other chips.\n    if (\n      source !== MDCChipActionType.PRIMARY ||\n      (trigger !== MDCChipActionInteractionTrigger.CLICK &&\n        trigger !== MDCChipActionInteractionTrigger.ENTER_KEY &&\n        trigger !== MDCChipActionInteractionTrigger.SPACEBAR_KEY)\n    ) {\n      super._onChipInteraction(event);\n    } else if (this.selectable && !this.disabled) {\n      // Otherwise only let the event through if the chip is enabled and selectable.\n      this._chipFoundation.handleActionInteraction(event);\n      this.selectionChange.emit({\n        source: this,\n        isUserInput: true,\n        selected: this.selected,\n      });\n    }\n  }\n\n  _hasLeadingGraphic() {\n    // The checkmark graphic is built in for multi-select chip lists.\n    return this.leadingIcon || (this._chipListMultiple && this.selectable);\n  }\n\n  private _setSelectedState(isSelected: boolean, isUserInput: boolean) {\n    if (isSelected !== this.selected) {\n      this._chipFoundation.setActionSelected(MDCChipActionType.PRIMARY, isSelected);\n      this.selectionChange.emit({\n        source: this,\n        isUserInput,\n        selected: this.selected,\n      });\n    }\n\n    // MDC won't assign the selected class until the animation finishes, but that may not\n    // happen if animations are disabled. If we detect such a case, assign the class manually.\n    if (this._animationsDisabled) {\n      this._elementRef.nativeElement.classList.toggle(MDCChipCssClasses.SELECTED, isSelected);\n    }\n  }\n}\n","<span matRipple class=\"mat-mdc-chip-ripple\"\n     [matRippleDisabled]=\"_isRippleDisabled()\"\n     [matRippleCentered]=\"_isRippleCentered\"\n     [matRippleTrigger]=\"_elementRef.nativeElement\"></span>\n<span class=\"mat-mdc-chip-focus-overlay\"></span>\n\n<span class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--primary\">\n  <button\n    matChipAction\n    [tabIndex]=\"tabIndex\"\n    [disabled]=\"disabled\"\n    [attr.aria-selected]=\"ariaSelected\"\n    [attr.aria-label]=\"ariaLabel\"\n    role=\"option\"\n    (blur)=\"_blur()\"\n    (focus)=\"focus()\">\n    <span class=\"mdc-evolution-chip__graphic mat-mdc-chip-graphic\" *ngIf=\"_hasLeadingGraphic()\">\n      <ng-content select=\"mat-chip-avatar, [matChipAvatar]\"></ng-content>\n      <span class=\"mdc-evolution-chip__checkmark\">\n        <svg class=\"mdc-evolution-chip__checkmark-svg\" viewBox=\"-2 -3 30 30\" focusable=\"false\">\n          <path class=\"mdc-evolution-chip__checkmark-path\"\n                fill=\"none\" stroke=\"currentColor\" d=\"M1.73,12.91 8.1,19.28 22.79,4.59\" />\n        </svg>\n      </span>\n    </span>\n    <span class=\"mdc-evolution-chip__text-label mat-mdc-chip-action-label\">\n      <ng-content></ng-content>\n      <span class=\"mat-mdc-chip-primary-focus-indicator mat-mdc-focus-indicator\"></span>\n    </span>\n  </button>\n</span>\n\n<span\n  class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--trailing\"\n  *ngIf=\"_hasTrailingIcon()\">\n  <ng-content select=\"mat-chip-trailing-icon,[matChipRemove],[matChipTrailingIcon]\"></ng-content>\n</span>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * A directive that makes a span editable and exposes functions to modify and retrieve the\n * element's contents.\n */\n@Directive({\n  selector: 'span[matChipEditInput]',\n  host: {\n    'class': 'mat-chip-edit-input',\n    'role': 'textbox',\n    'tabindex': '-1',\n    'contenteditable': 'true',\n  },\n})\nexport class MatChipEditInput {\n  constructor(\n    private readonly _elementRef: ElementRef,\n    @Inject(DOCUMENT) private readonly _document: any,\n  ) {}\n\n  initialize(initialValue: string) {\n    this.getNativeElement().focus();\n    this.setValue(initialValue);\n  }\n\n  getNativeElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  setValue(value: string) {\n    this.getNativeElement().innerText = value;\n    this._moveCursorToEndOfInput();\n  }\n\n  getValue(): string {\n    return this.getNativeElement().textContent || '';\n  }\n\n  private _moveCursorToEndOfInput() {\n    const range = this._document.createRange();\n    range.selectNodeContents(this.getNativeElement());\n    range.collapse(false);\n    const sel = window.getSelection()!;\n    sel.removeAllRanges();\n    sel.addRange(range);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BACKSPACE, DELETE, ENTER} from '@angular/cdk/keycodes';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  RippleGlobalOptions,\n} from '@angular/material-experimental/mdc-core';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {MatChip, MatChipEvent} from './chip';\nimport {MatChipEditInput} from './chip-edit-input';\n\n/** Represents an event fired on an individual `mat-chip` when it is edited. */\nexport interface MatChipEditedEvent extends MatChipEvent {\n  /** The final edit value. */\n  value: string;\n}\n\n/**\n * An extension of the MatChip component used with MatChipGrid and\n * the matChipInputFor directive.\n */\n@Component({\n  selector: 'mat-chip-row, mat-basic-chip-row',\n  templateUrl: 'chip-row.html',\n  styleUrls: ['chip.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-mdc-chip mat-mdc-chip-row mdc-evolution-chip',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-editing]': '_isEditing',\n    '[class.mat-mdc-chip-editable]': 'editable',\n    '[class.mdc-evolution-chip--disabled]': 'disabled',\n    '[class.mdc-evolution-chip--with-trailing-action]': '_hasTrailingIcon()',\n    '[class.mdc-evolution-chip--with-primary-graphic]': 'leadingIcon',\n    '[class.mdc-evolution-chip--with-primary-icon]': 'leadingIcon',\n    '[class.mdc-evolution-chip--with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-trailing-icon]': '_hasTrailingIcon()',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[attr.aria-label]': 'null',\n    '[attr.role]': 'role',\n    '(mousedown)': '_mousedown($event)',\n    '(keydown)': '_keydown($event)',\n    '(dblclick)': '_doubleclick()',\n    '(focusin)': '_focusin($event)',\n    '(focusout)': '_focusout($event)',\n  },\n  providers: [{provide: MatChip, useExisting: MatChipRow}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipRow extends MatChip implements AfterViewInit {\n  protected override basicChipAttrName = 'mat-basic-chip-row';\n\n  @Input() editable: boolean = false;\n\n  /** Emitted when the chip is edited. */\n  @Output() readonly edited: EventEmitter<MatChipEditedEvent> =\n    new EventEmitter<MatChipEditedEvent>();\n\n  /** The default chip edit input that is used if none is projected into this chip row. */\n  @ViewChild(MatChipEditInput) defaultEditInput?: MatChipEditInput;\n\n  /** The projected chip edit input. */\n  @ContentChild(MatChipEditInput) contentEditInput?: MatChipEditInput;\n\n  _isEditing = false;\n\n  /**\n   * Timeout used to give some time between `focusin` and `focusout`\n   * in order to determine whether focus has left the chip.\n   */\n  private _focusoutTimeout: number | null;\n\n  constructor(\n    changeDetectorRef: ChangeDetectorRef,\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    focusMonitor: FocusMonitor,\n    @Inject(DOCUMENT) _document: any,\n    @Optional() dir: Directionality,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n    @Optional()\n    @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n    globalRippleOptions?: RippleGlobalOptions,\n    @Attribute('tabindex') tabIndex?: string,\n  ) {\n    super(\n      changeDetectorRef,\n      elementRef,\n      ngZone,\n      focusMonitor,\n      _document,\n      dir,\n      animationMode,\n      globalRippleOptions,\n      tabIndex,\n    );\n\n    this.role = 'row';\n  }\n\n  override _hasTrailingIcon() {\n    // The trailing icon is hidden while editing.\n    return !this._isEditing && super._hasTrailingIcon();\n  }\n\n  /**\n   * Emits a blur event when one of the gridcells loses focus, unless focus moved\n   * to the other gridcell.\n   */\n  _focusout() {\n    if (this._focusoutTimeout) {\n      clearTimeout(this._focusoutTimeout);\n    }\n\n    // Wait to see if focus moves to the other gridcell\n    this._focusoutTimeout = window.setTimeout(() => {\n      if (this._isEditing) {\n        this._onEditFinish();\n      }\n\n      this._hasFocusInternal = false;\n      this._onBlur.next({chip: this});\n    });\n  }\n\n  /** Records that the chip has focus when one of the gridcells is focused. */\n  _focusin() {\n    if (this._focusoutTimeout) {\n      clearTimeout(this._focusoutTimeout);\n      this._focusoutTimeout = null;\n    }\n\n    this._hasFocusInternal = true;\n  }\n\n  /** Sends focus to the first gridcell when the user clicks anywhere inside the chip. */\n  _mousedown(event: MouseEvent) {\n    if (!this._isEditing) {\n      if (!this.disabled) {\n        this.focus();\n      }\n\n      event.preventDefault();\n    }\n  }\n\n  /** Handles custom key presses. */\n  _keydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case ENTER:\n        if (this._isEditing) {\n          event.preventDefault();\n          // Wrap in a timeout so the timing is consistent as when it is emitted in `focusout`.\n          setTimeout(() => this._onEditFinish());\n        } else if (this.editable) {\n          this._startEditing();\n        }\n        break;\n      case DELETE:\n      case BACKSPACE:\n        if (!this._isEditing) {\n          // Remove the focused chip\n          this.remove();\n          // Always prevent so page navigation does not occur\n          event.preventDefault();\n        }\n        break;\n    }\n  }\n\n  _doubleclick() {\n    if (!this.disabled && this.editable) {\n      this._startEditing();\n    }\n  }\n\n  private _startEditing() {\n    // The value depends on the DOM so we need to extract it before we flip the flag.\n    const value = this.value;\n\n    // Make the primary action non-interactive so that it doesn't\n    // navigate when the user presses the arrow keys while editing.\n    this.primaryAction.isInteractive = false;\n    this._isEditing = true;\n\n    // Defer initializing the input so it has time to be added to the DOM.\n    setTimeout(() => this._getEditInput().initialize(value));\n  }\n\n  private _onEditFinish() {\n    // If the edit input is still focused or focus was returned to the body after it was destroyed,\n    // return focus to the chip contents.\n    if (\n      this._document.activeElement === this._getEditInput().getNativeElement() ||\n      this._document.activeElement === this._document.body\n    ) {\n      this.primaryAction.focus();\n    }\n    this.edited.emit({chip: this, value: this._getEditInput().getValue()});\n    this.primaryAction.isInteractive = true;\n    this._isEditing = false;\n  }\n\n  /**\n   * Gets the projected chip edit input, or the default input if none is projected in. One of these\n   * two values is guaranteed to be defined.\n   */\n  private _getEditInput(): MatChipEditInput {\n    return this.contentEditInput || this.defaultEditInput!;\n  }\n}\n","<ng-container *ngIf=\"!_isEditing\">\n  <span matRipple class=\"mat-mdc-chip-ripple\"\n       [matRippleDisabled]=\"_isRippleDisabled()\"\n       [matRippleCentered]=\"_isRippleCentered\"\n       [matRippleTrigger]=\"_elementRef.nativeElement\"></span>\n  <span class=\"mat-mdc-chip-focus-overlay\"></span>\n</ng-container>\n\n\n<span class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--primary\" role=\"gridcell\">\n  <button\n    matChipAction\n    [tabIndex]=\"tabIndex\"\n    [disabled]=\"disabled\"\n    [attr.aria-label]=\"ariaLabel\">\n    <span class=\"mdc-evolution-chip__graphic mat-mdc-chip-graphic\" *ngIf=\"leadingIcon\">\n      <ng-content select=\"mat-chip-avatar, [matChipAvatar]\"></ng-content>\n    </span>\n    <span class=\"mdc-evolution-chip__text-label mat-mdc-chip-action-label\" [ngSwitch]=\"_isEditing\">\n      <ng-container *ngSwitchCase=\"false\"><ng-content></ng-content></ng-container>\n\n      <ng-container *ngSwitchCase=\"true\">\n        <ng-content *ngIf=\"contentEditInput; else defaultMatChipEditInput\"\n                    select=\"[matChipEditInput]\"></ng-content>\n        <ng-template #defaultMatChipEditInput><span matChipEditInput></span></ng-template>\n      </ng-container>\n\n      <span class=\"mat-mdc-chip-primary-focus-indicator mat-mdc-focus-indicator\"></span>\n    </span>\n  </button>\n</span>\n\n<span\n  class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--trailing\"\n  *ngIf=\"_hasTrailingIcon()\">\n  <ng-content select=\"mat-chip-trailing-icon,[matChipRemove],[matChipTrailingIcon]\"></ng-content>\n</span>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  OnDestroy,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HasTabIndex, mixinTabIndex} from '@angular/material-experimental/mdc-core';\nimport {\n  MDCChipSetFoundation,\n  MDCChipSetAdapter,\n  MDCChipFoundation,\n  MDCChipEvents,\n  ChipAnimationEvent,\n  ChipInteractionEvent,\n  ChipNavigationEvent,\n  MDCChipActionType,\n} from '@material/chips';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {startWith, switchMap, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent} from './chip';\nimport {emitCustomEvent} from './emit-event';\n\n/**\n * Boilerplate for applying mixins to MatChipSet.\n * @docs-private\n */\nabstract class MatChipSetBase {\n  abstract disabled: boolean;\n  constructor(_elementRef: ElementRef) {}\n}\nconst _MatChipSetMixinBase = mixinTabIndex(MatChipSetBase);\n\n/**\n * Basic container component for the MatChip component.\n *\n * Extended by MatChipListbox and MatChipGrid for different interaction patterns.\n */\n@Component({\n  selector: 'mat-chip-set',\n  template: `\n    <span class=\"mdc-evolution-chip-set__chips\" role=\"presentation\">\n      <ng-content></ng-content>\n    </span>\n  `,\n  styleUrls: ['chip-set.css'],\n  host: {\n    'class': 'mat-mdc-chip-set mdc-evolution-chip-set',\n    '[attr.role]': 'role',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipSet\n  extends _MatChipSetMixinBase\n  implements AfterContentInit, AfterViewInit, HasTabIndex, OnDestroy\n{\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  protected _lastDestroyedChipIndex: number | null = null;\n\n  /** The MDC foundation containing business logic for MDC chip-set. */\n  protected _chipSetFoundation: MDCChipSetFoundation;\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /** Combined stream of all of the child chips' remove events. */\n  get chipDestroyedChanges(): Observable<MatChipEvent> {\n    return this._getChipStream(chip => chip.destroyed);\n  }\n\n  /**\n   * Implementation of the MDC chip-set adapter interface.\n   * These methods are called by the chip set foundation.\n   */\n  protected _chipSetAdapter: MDCChipSetAdapter = {\n    announceMessage: message => this._liveAnnouncer.announce(message),\n    emitEvent: (eventName, eventDetail) => {\n      emitCustomEvent(this._elementRef.nativeElement, this._document, eventName, eventDetail, true);\n    },\n    getAttribute: name => this._elementRef.nativeElement.getAttribute(name),\n    getChipActionsAtIndex: index => this._chipFoundation(index)?.getActions() || [],\n    getChipCount: () => this._chips.length,\n    getChipIdAtIndex: index => this._chipFoundation(index)?.getElementID() || '',\n    getChipIndexById: id => {\n      return this._chips.toArray().findIndex(chip => chip._getFoundation().getElementID() === id);\n    },\n    isChipFocusableAtIndex: (index, actionType) => {\n      return this._chipFoundation(index)?.isActionFocusable(actionType) || false;\n    },\n    isChipSelectableAtIndex: (index, actionType) => {\n      return this._chipFoundation(index)?.isActionSelectable(actionType) || false;\n    },\n    isChipSelectedAtIndex: (index, actionType) => {\n      return this._chipFoundation(index)?.isActionSelected(actionType) || false;\n    },\n    removeChipAtIndex: index => this._chips.toArray()[index]?.remove(),\n    setChipFocusAtIndex: (index, action, behavior) => {\n      this._chipFoundation(index)?.setActionFocus(action, behavior);\n    },\n    setChipSelectedAtIndex: (index, actionType, isSelected) => {\n      // Setting the trailing action as deselected ends up deselecting the entire chip.\n      // This is working as expected, but it's not something we want so we only apply the\n      // selected state to the primary chip.\n      if (actionType === MDCChipActionType.PRIMARY) {\n        this._chipFoundation(index)?.setActionSelected(actionType, isSelected);\n      }\n    },\n    startChipAnimationAtIndex: (index, animation) => {\n      this._chipFoundation(index)?.startAnimation(animation);\n    },\n  };\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /**\n   * Map from class to whether the class is enabled.\n   * Enabled classes are set on the MDC chip-set div.\n   */\n  _mdcClasses: {[key: string]: boolean} = {};\n\n  /** Whether the chip set is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: BooleanInput) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Whether the chip list contains chips or not. */\n  get empty(): boolean {\n    return this._chips.length === 0;\n  }\n\n  /** The ARIA role applied to the chip set. */\n  @Input()\n  get role(): string | null {\n    if (this._role) {\n      return this._role;\n    } else {\n      return this.empty ? null : 'presentation';\n    }\n  }\n\n  set role(value: string | null) {\n    this._role = value;\n  }\n  private _role: string | null = null;\n\n  /** Whether any of the chips inside of this chip-set has focus. */\n  get focused(): boolean {\n    return this._hasFocusedChip();\n  }\n\n  /** The chips that are part of this chip set. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true,\n  })\n  _chips: QueryList<MatChip>;\n\n  constructor(\n    private _liveAnnouncer: LiveAnnouncer,\n    @Inject(DOCUMENT) private _document: any,\n    protected _elementRef: ElementRef<HTMLElement>,\n    protected _changeDetectorRef: ChangeDetectorRef,\n  ) {\n    super(_elementRef);\n    const element = _elementRef.nativeElement;\n    this._chipSetFoundation = new MDCChipSetFoundation(this._chipSetAdapter);\n    element.addEventListener(MDCChipEvents.ANIMATION, this._handleChipAnimation);\n    element.addEventListener(MDCChipEvents.INTERACTION, this._handleChipInteraction);\n    element.addEventListener(MDCChipEvents.NAVIGATION, this._handleChipNavigation);\n  }\n\n  ngAfterViewInit() {\n    this._chipSetFoundation.init();\n  }\n\n  ngAfterContentInit() {\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n    });\n\n    this.chipDestroyedChanges.pipe(takeUntil(this._destroyed)).subscribe((event: MatChipEvent) => {\n      const chip = event.chip;\n      const chipIndex = this._chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus()) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    const element = this._elementRef.nativeElement;\n    element.removeEventListener(MDCChipEvents.ANIMATION, this._handleChipAnimation);\n    element.removeEventListener(MDCChipEvents.INTERACTION, this._handleChipInteraction);\n    element.removeEventListener(MDCChipEvents.NAVIGATION, this._handleChipNavigation);\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._chipSetFoundation.destroy();\n  }\n\n  /** Checks whether any of the chips is focused. */\n  protected _hasFocusedChip() {\n    return this._chips && this._chips.some(chip => chip._hasFocus());\n  }\n\n  /** Syncs the chip-set's state with the individual chips. */\n  protected _syncChipsState() {\n    if (this._chips) {\n      this._chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /** Dummy method for subclasses to override. Base chip set cannot be focused. */\n  focus() {}\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  protected _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this._chips.length;\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  protected _originatesFromChip(event: Event): boolean {\n    return this._checkForClassInHierarchy(event, 'mdc-evolution-chip');\n  }\n\n  /**\n   * Removes the `tabindex` from the chip grid and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the grid from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  protected _allowFocusEscape() {\n    const previousTabIndex = this.tabIndex;\n\n    if (this.tabIndex !== -1) {\n      this.tabIndex = -1;\n\n      setTimeout(() => {\n        this.tabIndex = previousTabIndex;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Gets a stream of events from all the chips within the set.\n   * The stream will automatically incorporate any newly-added chips.\n   */\n  protected _getChipStream<T, C extends MatChip = MatChip>(\n    mappingFunction: (chip: C) => Observable<T>,\n  ): Observable<T> {\n    return this._chips.changes.pipe(\n      startWith(null),\n      switchMap(() => merge(...(this._chips as QueryList<C>).map(mappingFunction))),\n    );\n  }\n\n  protected _checkForClassInHierarchy(event: Event, className: string) {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      // Null check the classList, because IE and Edge don't support it on all elements.\n      if (currentElement.classList && currentElement.classList.contains(className)) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  private _chipFoundation(index: number): MDCChipFoundation | undefined {\n    return this._chips.toArray()[index]?._getFoundation();\n  }\n\n  private _handleChipAnimation = (event: Event) => {\n    this._chipSetFoundation.handleChipAnimation(event as ChipAnimationEvent);\n  };\n\n  private _handleChipInteraction = (event: Event) => {\n    this._chipSetFoundation.handleChipInteraction(event as ChipInteractionEvent);\n  };\n\n  private _handleChipNavigation = (event: Event) => {\n    this._chipSetFoundation.handleChipNavigation(event as ChipNavigationEvent);\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {TAB} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MDCChipActionType} from '@material/chips';\nimport {Observable} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent} from './chip';\nimport {MatChipOption, MatChipSelectionChange} from './chip-option';\nimport {MatChipSet} from './chip-set';\n\n/** Change event object that is emitted when the chip listbox value has changed. */\nexport class MatChipListboxChange {\n  constructor(\n    /** Chip listbox that emitted the event. */\n    public source: MatChipListbox,\n    /** Value of the chip listbox when the event was emitted. */\n    public value: any,\n  ) {}\n}\n\n/**\n * Provider Expression that allows mat-chip-listbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatChipListbox),\n  multi: true,\n};\n\n/**\n * An extension of the MatChipSet component that supports chip selection.\n * Used with MatChipOption chips.\n */\n@Component({\n  selector: 'mat-chip-listbox',\n  template: `\n    <span class=\"mdc-evolution-chip-set__chips\" role=\"presentation\">\n      <ng-content></ng-content>\n    </span>\n  `,\n  styleUrls: ['chip-set.css'],\n  inputs: ['tabIndex'],\n  host: {\n    'class': 'mdc-evolution-chip-set mat-mdc-chip-listbox',\n    '[attr.role]': 'role',\n    '[tabIndex]': 'empty ? -1 : tabIndex',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'role ? required : null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    '[class.mat-mdc-chip-list-disabled]': 'disabled',\n    '[class.mat-mdc-chip-list-required]': 'required',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n  },\n  providers: [MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipListbox\n  extends MatChipSet\n  implements AfterContentInit, OnDestroy, ControlValueAccessor\n{\n  /**\n   * Function when touched. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onTouched = () => {};\n\n  /**\n   * Function when changed. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onChange: (value: any) => void = () => {};\n\n  /** The ARIA role applied to the chip listbox. */\n  // TODO: MDC uses `grid` here\n  override get role(): string | null {\n    return this.empty ? null : 'listbox';\n  }\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean {\n    return this._multiple;\n  }\n  set multiple(value: BooleanInput) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncListboxProperties();\n  }\n  private _multiple: boolean = false;\n\n  /** The array of selected chips inside the chip listbox. */\n  get selected(): MatChipOption[] | MatChipOption {\n    const selectedChips = this._chips.toArray().filter(chip => chip.selected);\n    return this.multiple ? selectedChips : selectedChips[0];\n  }\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip listbox is selectable.\n   *\n   * When a chip listbox is not selectable, the selected states for all\n   * the chips inside the chip listbox are always ignored.\n   */\n  @Input()\n  get selectable(): boolean {\n    return this._selectable;\n  }\n  set selectable(value: BooleanInput) {\n    this._selectable = coerceBooleanProperty(value);\n    this._syncListboxProperties();\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean {\n    return this._compareWith;\n  }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    this._initializeSelection();\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Whether this chip listbox is required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n  set required(value: BooleanInput) {\n    this._required = coerceBooleanProperty(value);\n  }\n  protected _required: boolean = false;\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return this._getChipStream<MatChipSelectionChange, MatChipOption>(chip => chip.selectionChange);\n  }\n\n  /** Combined stream of all of the child chips' focus events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return this._getChipStream(chip => chip._onFocus);\n  }\n\n  /** Combined stream of all of the child chips' blur events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return this._getChipStream(chip => chip._onBlur);\n  }\n\n  /** The value of the listbox, which is the combined value of the selected chips. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /** Event emitted when the selected chip listbox value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListboxChange> =\n    new EventEmitter<MatChipListboxChange>();\n\n  @ContentChildren(MatChipOption, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true,\n  })\n  override _chips: QueryList<MatChipOption>;\n\n  override ngAfterContentInit() {\n    super.ngAfterContentInit();\n\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      // Update listbox selectable/multiple properties on chips\n      this._syncListboxProperties();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n\n    this.chipBlurChanges.pipe(takeUntil(this._destroyed)).subscribe(() => this._blur());\n    this.chipSelectionChanges.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /**\n   * Focuses the first selected chip in this chip listbox, or the first non-disabled chip when there\n   * are no selected chips.\n   */\n  override focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    const firstSelectedChip = this._getFirstSelectedChip();\n\n    if (firstSelectedChip) {\n      firstSelectedChip.focus();\n    } else if (this._chips.length > 0) {\n      // MDC sets the tabindex directly on the DOM node when the user is navigating which means\n      // that we may end up with a `0` value from a previous interaction. We reset it manually\n      // here to ensure that the state is correct.\n      this._chips.forEach(chip => chip.primaryAction._updateTabindex(-1));\n      this._chips.first.primaryAction.focus();\n    }\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    if (this._chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Selects all chips with value. */\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n    } else {\n      this._selectValue(value, isUserInput);\n    }\n  }\n\n  /** When blurred, marks the field as touched when focus moved outside the chip listbox. */\n  _blur() {\n    if (!this.disabled) {\n      // Wait to see if focus moves to an individual chip.\n      setTimeout(() => {\n        if (!this.focused) {\n          this._propagateChanges();\n          this._markAsTouched();\n        }\n      });\n    }\n  }\n\n  _keydown(event: KeyboardEvent) {\n    if (event.keyCode === TAB) {\n      super._allowFocusEscape();\n    }\n  }\n\n  /** Marks the field as touched */\n  private _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : undefined;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListboxChange(this, valueToEmit));\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Initializes the chip listbox selection state to reflect any chips that were preselected.\n   */\n  private _initializeSelection() {\n    setTimeout(() => {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      this._chips.forEach((chip, index) => {\n        if (chip.selected) {\n          this._chipSetFoundation.setChipSelected(index, MDCChipActionType.PRIMARY, true);\n        }\n      });\n    });\n  }\n\n  /**\n   * Deselects every chip in the listbox.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n    const correspondingChip = this._chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value, value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n    }\n\n    return correspondingChip;\n  }\n\n  /** Syncs the chip-listbox selection state with the individual chips. */\n  private _syncListboxProperties() {\n    if (this._chips) {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        this._chips.forEach(chip => {\n          chip._chipListMultiple = this.multiple;\n          chip.chipListSelectable = this._selectable;\n          chip._changeDetectorRef.markForCheck();\n        });\n      });\n    }\n  }\n\n  /** Returns the first selected chip in this listbox, or undefined if no chips are selected. */\n  private _getFirstSelectedChip(): MatChipOption | undefined {\n    if (Array.isArray(this.selected)) {\n      return this.selected.length ? this.selected[0] : undefined;\n    } else {\n      return this.selected;\n    }\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  private _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-listbox itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this._chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this._chips.length - 1);\n        this._chips.toArray()[newChipIndex].focus();\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {TAB} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm,\n  Validators,\n} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material-experimental/mdc-core';\nimport {MatFormFieldControl} from '@angular/material-experimental/mdc-form-field';\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {MatChipTextControl} from './chip-text-control';\nimport {Observable} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChipEvent} from './chip';\nimport {MatChipRow} from './chip-row';\nimport {MatChipSet} from './chip-set';\n\n/** Change event object that is emitted when the chip grid value has changed. */\nexport class MatChipGridChange {\n  constructor(\n    /** Chip grid that emitted the event. */\n    public source: MatChipGrid,\n    /** Value of the chip grid when the event was emitted. */\n    public value: any,\n  ) {}\n}\n\n/**\n * Boilerplate for applying mixins to MatChipGrid.\n * @docs-private\n */\nclass MatChipGridBase extends MatChipSet {\n  constructor(\n    liveAnnouncer: LiveAnnouncer,\n    document: any,\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    public _defaultErrorStateMatcher: ErrorStateMatcher,\n    public _parentForm: NgForm,\n    public _parentFormGroup: FormGroupDirective,\n    /** @docs-private */\n    public ngControl: NgControl,\n  ) {\n    super(liveAnnouncer, document, elementRef, changeDetectorRef);\n  }\n}\nconst _MatChipGridMixinBase = mixinErrorState(MatChipGridBase);\n\n/**\n * An extension of the MatChipSet component used with MatChipRow chips and\n * the matChipInputFor directive.\n */\n@Component({\n  selector: 'mat-chip-grid',\n  template: `\n    <span class=\"mdc-evolution-chip-set__chips\" role=\"presentation\">\n      <ng-content></ng-content>\n    </span>\n  `,\n  styleUrls: ['chip-set.css'],\n  inputs: ['tabIndex'],\n  host: {\n    'class': 'mat-mdc-chip-set mat-mdc-chip-grid mdc-evolution-chip-set',\n    '[attr.role]': 'role',\n    '[tabIndex]': '_chips && _chips.length === 0 ? -1 : tabIndex',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[class.mat-mdc-chip-list-disabled]': 'disabled',\n    '[class.mat-mdc-chip-list-invalid]': 'errorState',\n    '[class.mat-mdc-chip-list-required]': 'required',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipGrid}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipGrid\n  extends _MatChipGridMixinBase\n  implements\n    AfterContentInit,\n    AfterViewInit,\n    CanUpdateErrorState,\n    ControlValueAccessor,\n    DoCheck,\n    MatFormFieldControl<any>,\n    OnDestroy\n{\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-grid';\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /**\n   * Function when touched. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onTouched = () => {};\n\n  /**\n   * Function when changed. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onChange: (value: any) => void = () => {};\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  override get disabled(): boolean {\n    return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n  }\n  override set disabled(value: BooleanInput) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput.id;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  override get empty(): boolean {\n    return (\n      (!this._chipInput || this._chipInput.empty) && (!this._chips || this._chips.length === 0)\n    );\n  }\n\n  /** The ARIA role applied to the chip grid. */\n  override get role(): string | null {\n    return this.empty ? null : 'grid';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-grid has focus. */\n  override get focused(): boolean {\n    return this._chipInput.focused || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean {\n    return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n  }\n  set required(value: BooleanInput) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean | undefined;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return !this.empty || this.focused;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n  set value(value: any) {\n    this._value = value;\n  }\n  protected _value: any[] = [];\n\n  /** An object used to control when error messages are shown. */\n  @Input() override errorStateMatcher: ErrorStateMatcher;\n\n  /** Combined stream of all of the child chips' blur events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return this._getChipStream(chip => chip._onBlur);\n  }\n\n  /** Combined stream of all of the child chips' focus events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return this._getChipStream(chip => chip._onFocus);\n  }\n\n  /** Emits when the chip grid value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipGridChange> =\n    new EventEmitter<MatChipGridChange>();\n\n  /**\n   * Emits whenever the raw value of the chip-grid changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  @ContentChildren(MatChipRow, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true,\n  })\n  override _chips: QueryList<MatChipRow>;\n\n  constructor(\n    liveAnnouncer: LiveAnnouncer,\n    @Inject(DOCUMENT) document: any,\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    @Optional() parentForm: NgForm,\n    @Optional() parentFormGroup: FormGroupDirective,\n    defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() ngControl: NgControl,\n  ) {\n    super(\n      liveAnnouncer,\n      document,\n      elementRef,\n      changeDetectorRef,\n      defaultErrorStateMatcher,\n      parentForm,\n      parentFormGroup,\n      ngControl,\n    );\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  override ngAfterContentInit() {\n    super.ngAfterContentInit();\n\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n      this.stateChanges.next();\n    });\n\n    this.chipBlurChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  override ngAfterViewInit() {\n    super.ngAfterViewInit();\n    if (!this._chipInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('mat-chip-grid must be used in combination with matChipInputFor.');\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this.stateChanges.complete();\n  }\n\n  /** Associates an HTML input element with this chip grid. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this.disabled && !this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first chip in this chip grid, or the associated input when there\n   * are no eligible chips.\n   */\n  override focus(): void {\n    if (this.disabled || this._chipInput.focused) {\n      return;\n    }\n\n    if (this._chips.length > 0) {\n      // MDC sets the tabindex directly on the DOM node when the user is navigating which means\n      // that we may end up with a `0` value from a previous interaction. We reset it manually\n      // here to ensure that the state is correct.\n      this._chips.forEach(chip => chip.primaryAction._updateTabindex(-1));\n      this._chips.first.focus();\n    } else {\n      // Delay until the next tick, because this can cause a \"changed after checked\"\n      // error if the input does something on focus (e.g. opens an autocomplete).\n      Promise.resolve().then(() => this._chipInput.focus());\n    }\n\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    // The user is responsible for creating the child chips, so we just store the value.\n    this._value = value;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip grid. */\n  _blur() {\n    if (this.disabled) {\n      return;\n    }\n\n    // Check whether the focus moved to chip input.\n    // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n    // to chip input, do nothing.\n    // Timeout is needed to wait for the focus() event trigger on chip input.\n    setTimeout(() => {\n      if (!this.focused) {\n        this._propagateChanges();\n        this._markAsTouched();\n      }\n    });\n  }\n\n  /**\n   * Removes the `tabindex` from the chip grid and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the grid from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  protected override _allowFocusEscape() {\n    if (!this._chipInput.focused) {\n      super._allowFocusEscape();\n    }\n  }\n\n  /** Handles custom keyboard events. */\n  _keydown(event: KeyboardEvent) {\n    if (event.keyCode === TAB && (event.target as HTMLElement).id !== this._chipInput.id) {\n      this._allowFocusEscape();\n    }\n\n    this.stateChanges.next();\n  }\n\n  _focusLastChip() {\n    if (this._chips.length) {\n      this._chips.last.primaryAction.focus();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(): void {\n    const valueToEmit = this._chips.length ? this._chips.toArray().map(chip => chip.value) : [];\n    this._value = valueToEmit;\n    this.change.emit(new MatChipGridChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Mark the field as touched */\n  private _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * If the amount of chips changed, we need to focus the next closest chip.\n   */\n  private _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-grid itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this._chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this._chips.length - 1);\n        this._chips.toArray()[newChipIndex].focus();\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: readonly number[] | ReadonlySet<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken<MatChipsDefaultOptions>(\n  'mat-chips-default-options',\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {MatFormField, MAT_FORM_FIELD} from '@angular/material-experimental/mdc-form-field';\nimport {MatChipsDefaultOptions, MAT_CHIPS_DEFAULT_OPTIONS} from './chip-default-options';\nimport {MatChipGrid} from './chip-grid';\nimport {MatChipTextControl} from './chip-text-control';\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /**\n   * The native `<input>` element that the event is being fired for.\n   * @deprecated Use `MatChipInputEvent#chipInput.inputElement` instead.\n   * @breaking-change 13.0.0 This property will be removed.\n   */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n\n  /**\n   * Reference to the chip input that emitted the event.\n   * @breaking-change 13.0.0 This property will be made required.\n   */\n  chipInput?: MatChipInput;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of a `<mat-chip-grid>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    // TODO: eventually we should remove `mat-input-element` from here since it comes from the\n    // non-MDC version of the input. It's currently being kept for backwards compatibility, because\n    // the MDC chips were landed initially with it.\n    'class': 'mat-mdc-chip-input mat-mdc-input-element mdc-text-field__input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(keyup)': '_keyup($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipGrid && _chipGrid.ngControl ? _chipGrid.ngControl.invalid : null',\n    '[attr.aria-required]': '_chipGrid && _chipGrid.required || null',\n    '[attr.required]': '_chipGrid && _chipGrid.required || null',\n  },\n})\nexport class MatChipInput implements MatChipTextControl, AfterContentInit, OnChanges, OnDestroy {\n  /** Used to prevent focus moving to chips while user is holding backspace */\n  private _focusLastChipOnBackspace: boolean;\n\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipGrid: MatChipGrid;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipGrid(value: MatChipGrid) {\n    if (value) {\n      this._chipGrid = value;\n      this._chipGrid.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean {\n    return this._addOnBlur;\n  }\n  set addOnBlur(value: BooleanInput) {\n    this._addOnBlur = coerceBooleanProperty(value);\n  }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: readonly number[] | ReadonlySet<number> =\n    this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  readonly chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-mdc-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this._chipGrid && this._chipGrid.disabled);\n  }\n  set disabled(value: BooleanInput) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    return !this.inputElement.value;\n  }\n\n  /** The native input element to which this directive is attached. */\n  readonly inputElement!: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions,\n    @Optional() @Inject(MAT_FORM_FIELD) formField?: MatFormField,\n  ) {\n    this.inputElement = this._elementRef.nativeElement as HTMLInputElement;\n\n    if (formField) {\n      this.inputElement.classList.add('mat-mdc-form-field-input-control');\n    }\n  }\n\n  ngOnChanges() {\n    this._chipGrid.stateChanges.next();\n  }\n\n  ngOnDestroy(): void {\n    this.chipEnd.complete();\n  }\n\n  ngAfterContentInit(): void {\n    this._focusLastChipOnBackspace = this.empty;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    if (event) {\n      // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n      // We focus the last chip on backspace only after the user has released the backspace button,\n      // And the input is empty (see behaviour in _keyup)\n      if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n        this._chipGrid._focusLastChip();\n        event.preventDefault();\n        return;\n      } else {\n        this._focusLastChipOnBackspace = false;\n      }\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keyup(event: KeyboardEvent) {\n    // Allow user to move focus to chips next time he presses backspace\n    if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n      this._focusLastChipOnBackspace = true;\n      event.preventDefault();\n    }\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipGrid.focused) {\n      this._chipGrid._blur();\n    }\n    this._chipGrid.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._focusLastChipOnBackspace = this.empty;\n    this._chipGrid.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this.inputElement.value && !!event) {\n      this._chipGrid._keydown(event);\n    }\n\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({\n        input: this.inputElement,\n        value: this.inputElement.value,\n        chipInput: this,\n      });\n\n      event?.preventDefault();\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipGrid.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this.inputElement.focus();\n  }\n\n  /** Clears the input */\n  clear(): void {\n    this.inputElement.value = '';\n    this._focusLastChipOnBackspace = true;\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  ErrorStateMatcher,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material-experimental/mdc-core';\nimport {MatChip} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipEditInput} from './chip-edit-input';\nimport {MatChipGrid} from './chip-grid';\nimport {MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip-icons';\nimport {MatChipInput} from './chip-input';\nimport {MatChipListbox} from './chip-listbox';\nimport {MatChipRow} from './chip-row';\nimport {MatChipOption} from './chip-option';\nimport {MatChipSet} from './chip-set';\nimport {MatChipAction} from './chip-action';\n\nconst CHIP_DECLARATIONS = [\n  MatChip,\n  MatChipAvatar,\n  MatChipEditInput,\n  MatChipGrid,\n  MatChipInput,\n  MatChipListbox,\n  MatChipOption,\n  MatChipRemove,\n  MatChipRow,\n  MatChipSet,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule, MatRippleModule],\n  exports: [MatCommonModule, CHIP_DECLARATIONS],\n  declarations: [MatChipAction, CHIP_DECLARATIONS],\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER],\n      } as MatChipsDefaultOptions,\n    },\n  ],\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './chip';\nexport * from './chip-option';\nexport * from './chip-row';\nexport * from './chip-set';\nexport * from './chip-listbox';\nexport * from './chip-grid';\nexport * from './module';\nexport * from './chip-input';\nexport * from './chip-default-options';\nexport * from './chip-icons';\nexport * from './chip-text-control';\nexport * from './chip-edit-input';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}