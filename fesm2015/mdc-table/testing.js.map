{"version":3,"file":"mdc-table__testing.js","sources":["../../../../../../src/material-experimental/mdc-table/testing/cell-harness.ts","../../../../../../src/material-experimental/mdc-table/testing/row-harness.ts","../../../../../../src/material-experimental/mdc-table/testing/table-harness.ts","../../../../../../src/material-experimental/mdc-table/testing/public-api.ts","../../../../../../src/material-experimental/mdc-table/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {\n  MatCellHarness as BaseMatCellHarness,\n  MatHeaderCellHarness as BaseMatHeaderCellHarness,\n  MatFooterCellHarness as BaseMatFooterCellHarness,\n  CellHarnessFilters\n} from '@angular/material/table/testing';\n\n/** Harness for interacting with an MDC-based Angular Material table cell. */\nexport class MatCellHarness extends BaseMatCellHarness {\n  /** The selector for the host element of a `MatCellHarness` instance. */\n  static hostSelector = '.mat-mdc-cell';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a table cell with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: CellHarnessFilters = {}): HarnessPredicate<MatCellHarness> {\n    return BaseMatCellHarness._getCellPredicate(MatCellHarness, options);\n  }\n}\n\n/** Harness for interacting with an MDC-based Angular Material table header cell. */\nexport class MatHeaderCellHarness extends BaseMatHeaderCellHarness {\n  /** The selector for the host element of a `MatHeaderCellHarness` instance. */\n  static hostSelector = '.mat-mdc-header-cell';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for\n   * a table header cell with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: CellHarnessFilters = {}): HarnessPredicate<MatHeaderCellHarness> {\n    return BaseMatHeaderCellHarness._getCellPredicate(MatHeaderCellHarness, options);\n  }\n}\n\n/** Harness for interacting with an MDC-based Angular Material table footer cell. */\nexport class MatFooterCellHarness extends BaseMatFooterCellHarness {\n  /** The selector for the host element of a `MatFooterCellHarness` instance. */\n  static hostSelector = '.mat-mdc-footer-cell';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for\n   * a table footer cell with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: CellHarnessFilters = {}): HarnessPredicate<MatFooterCellHarness> {\n    return BaseMatFooterCellHarness._getCellPredicate(MatFooterCellHarness, options);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {_MatRowHarnessBase, RowHarnessFilters} from '@angular/material/table/testing';\nimport {MatCellHarness, MatHeaderCellHarness, MatFooterCellHarness} from './cell-harness';\n\n/** Harness for interacting with an MDC-based Angular Material table row. */\nexport class MatRowHarness extends _MatRowHarnessBase<typeof MatCellHarness, MatCellHarness> {\n  /** The selector for the host element of a `MatRowHarness` instance. */\n  static hostSelector = '.mat-mdc-row';\n  protected _cellHarness = MatCellHarness;\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a table row with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: RowHarnessFilters = {}): HarnessPredicate<MatRowHarness> {\n    return new HarnessPredicate(MatRowHarness, options);\n  }\n}\n\n/** Harness for interacting with an MDC-based Angular Material table header row. */\nexport class MatHeaderRowHarness extends _MatRowHarnessBase<\n  typeof MatHeaderCellHarness, MatHeaderCellHarness> {\n  /** The selector for the host element of a `MatHeaderRowHarness` instance. */\n  static hostSelector = '.mat-mdc-header-row';\n  protected _cellHarness = MatHeaderCellHarness;\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for\n   * a table header row with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: RowHarnessFilters = {}): HarnessPredicate<MatHeaderRowHarness> {\n    return new HarnessPredicate(MatHeaderRowHarness, options);\n  }\n}\n\n\n/** Harness for interacting with an MDC-based Angular Material table footer row. */\nexport class MatFooterRowHarness extends _MatRowHarnessBase<\n  typeof MatFooterCellHarness, MatFooterCellHarness> {\n  /** The selector for the host element of a `MatFooterRowHarness` instance. */\n  static hostSelector = '.mat-mdc-footer-row';\n  protected _cellHarness = MatFooterCellHarness;\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for\n   * a table footer row cell with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: RowHarnessFilters = {}): HarnessPredicate<MatFooterRowHarness> {\n    return new HarnessPredicate(MatFooterRowHarness, options);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {TableHarnessFilters, _MatTableHarnessBase} from '@angular/material/table/testing';\nimport {\n  MatRowHarness,\n  MatHeaderRowHarness,\n  MatFooterRowHarness,\n} from './row-harness';\n\n/** Harness for interacting with an MDC-based mat-table in tests. */\nexport class MatTableHarness extends _MatTableHarnessBase<\n  typeof MatHeaderRowHarness, MatHeaderRowHarness,\n  typeof MatRowHarness, MatRowHarness,\n  typeof MatFooterRowHarness, MatFooterRowHarness\n> {\n  /** The selector for the host element of a `MatTableHarness` instance. */\n  static hostSelector = '.mat-mdc-table';\n  protected _headerRowHarness = MatHeaderRowHarness;\n  protected _rowHarness = MatRowHarness;\n  protected _footerRowHarness = MatFooterRowHarness;\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a table with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: TableHarnessFilters = {}): HarnessPredicate<MatTableHarness> {\n    return new HarnessPredicate(MatTableHarness, options);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {\n  CellHarnessFilters,\n  RowHarnessFilters,\n  TableHarnessFilters,\n  MatRowHarnessColumnsText,\n  MatTableHarnessColumnsText,\n} from '@angular/material/table/testing';\nexport * from './table-harness';\nexport * from './row-harness';\nexport * from './cell-harness';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":["BaseMatCellHarness","BaseMatHeaderCellHarness","BaseMatFooterCellHarness"],"mappings":";;;AAAA;;;;;;;AAgBA;MACa,cAAe,SAAQA,gBAAkB;;;;;;IASpD,OAAO,IAAI,CAAC,UAA8B,EAAE;QAC1C,OAAOA,gBAAkB,CAAC,iBAAiB,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;KACtE;;AAVD;AACO,2BAAY,GAAG,eAAe,CAAC;AAYxC;MACa,oBAAqB,SAAQC,sBAAwB;;;;;;;IAUhE,OAAO,IAAI,CAAC,UAA8B,EAAE;QAC1C,OAAOA,sBAAwB,CAAC,iBAAiB,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;KAClF;;AAXD;AACO,iCAAY,GAAG,sBAAsB,CAAC;AAa/C;MACa,oBAAqB,SAAQC,sBAAwB;;;;;;;IAUhE,OAAO,IAAI,CAAC,UAA8B,EAAE;QAC1C,OAAOA,sBAAwB,CAAC,iBAAiB,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;KAClF;;AAXD;AACO,iCAAY,GAAG,sBAAsB;;AClD9C;;;;;;;AAYA;MACa,aAAc,SAAQ,kBAAyD;IAA5F;;QAGY,iBAAY,GAAG,cAAc,CAAC;KAUzC;;;;;;IAHC,OAAO,IAAI,CAAC,UAA6B,EAAE;QACzC,OAAO,IAAI,gBAAgB,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;KACrD;;AAXD;AACO,0BAAY,GAAG,cAAc,CAAC;AAavC;MACa,mBAAoB,SAAQ,kBACW;IADpD;;QAIY,iBAAY,GAAG,oBAAoB,CAAC;KAW/C;;;;;;;IAHC,OAAO,IAAI,CAAC,UAA6B,EAAE;QACzC,OAAO,IAAI,gBAAgB,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;KAC3D;;AAZD;AACO,gCAAY,GAAG,qBAAqB,CAAC;AAe9C;MACa,mBAAoB,SAAQ,kBACW;IADpD;;QAIY,iBAAY,GAAG,oBAAoB,CAAC;KAW/C;;;;;;;IAHC,OAAO,IAAI,CAAC,UAA6B,EAAE;QACzC,OAAO,IAAI,gBAAgB,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;KAC3D;;AAZD;AACO,gCAAY,GAAG,qBAAqB;;ACnD7C;;;;;;;AAgBA;MACa,eAAgB,SAAQ,oBAIpC;IAJD;;QAOY,sBAAiB,GAAG,mBAAmB,CAAC;QACxC,gBAAW,GAAG,aAAa,CAAC;QAC5B,sBAAiB,GAAG,mBAAmB,CAAC;KAUnD;;;;;;IAHC,OAAO,IAAI,CAAC,UAA+B,EAAE;QAC3C,OAAO,IAAI,gBAAgB,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;KACvD;;AAbD;AACO,4BAAY,GAAG,gBAAgB;;ACvBxC;;;;;;;;ACAA;;;;;;;;;;"}