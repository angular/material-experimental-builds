{"version":3,"file":"mdc-menu__testing.js","sources":["../../../../../../src/material-experimental/mdc-menu/testing/menu-harness.ts","../../../../../../src/material-experimental/mdc-menu/testing/public-api.ts","../../../../../../src/material-experimental/mdc-menu/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  MenuHarnessFilters,\n  MenuItemHarnessFilters\n} from '@angular/material/menu/testing';\n\n/** Harness for interacting with a MDC-based mat-menu in tests. */\nexport class MatMenuHarness extends ComponentHarness {\n  static hostSelector = '.mat-menu-trigger';\n\n  // TODO: potentially extend MatButtonHarness\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a menu with specific attributes.\n   * @param options Options for narrowing the search:\n   *   - `selector` finds a menu whose host element matches the given selector.\n   *   - `label` finds a menu with specific label text.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: MenuHarnessFilters = {}): HarnessPredicate<MatMenuHarness> {\n    return new HarnessPredicate(MatMenuHarness, options)\n        .addOption('triggerText', options.triggerText,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getTriggerText(), text));\n  }\n\n  /** Gets a boolean promise indicating if the menu is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this.host()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  async isOpen(): Promise<boolean> {\n    throw Error('not implemented');\n  }\n\n  async getTriggerText(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Focuses the menu and returns a void promise that indicates when the action is complete. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the menu and returns a void promise that indicates when the action is complete. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Whether the menu is focused. */\n  async isFocused(): Promise<boolean> {\n    return (await this.host()).isFocused();\n  }\n\n  async open(): Promise<void> {\n    throw Error('not implemented');\n  }\n\n  async close(): Promise<void> {\n    throw Error('not implemented');\n  }\n\n  async getItems(filters: Omit<MenuItemHarnessFilters, 'ancestor'> = {}):\n      Promise<MatMenuItemHarness[]> {\n    throw Error('not implemented');\n  }\n\n  async clickItem(filter: Omit<MenuItemHarnessFilters, 'ancestor'>,\n                  ...filters: Omit<MenuItemHarnessFilters, 'ancestor'>[]): Promise<void> {\n    throw Error('not implemented');\n  }\n}\n\n\n/** Harness for interacting with a standard mat-menu in tests. */\nexport class MatMenuItemHarness extends ComponentHarness {\n  static hostSelector = '.mat-menu-item';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a menu with specific attributes.\n   * @param options Options for narrowing the search:\n   *   - `selector` finds a menu item whose host element matches the given selector.\n   *   - `label` finds a menu item with specific label text.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: MenuItemHarnessFilters = {}): HarnessPredicate<MatMenuItemHarness> {\n    return new HarnessPredicate(MatMenuItemHarness, options)\n        .addOption('text', options.text,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getText(), text))\n        .addOption('hasSubmenu', options.hasSubmenu,\n            async (harness, hasSubmenu) => (await harness.hasSubmenu()) === hasSubmenu);\n  }\n\n  /** Gets a boolean promise indicating if the menu is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this.host()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  async getText(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /**\n   * Focuses the menu item and returns a void promise that indicates when the action is complete.\n   */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the menu item and returns a void promise that indicates when the action is complete. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Whether the menu item is focused. */\n  async isFocused(): Promise<boolean> {\n    return (await this.host()).isFocused();\n  }\n\n  async click(): Promise<void> {\n    throw Error('not implemented');\n  }\n\n  async hasSubmenu(): Promise<boolean> {\n    throw Error('not implemented');\n  }\n\n  async getSubmenu(): Promise<MatMenuHarness | null> {\n    throw Error('not implemented');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './menu-harness';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}