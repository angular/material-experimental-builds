{"version":3,"file":"testing.mjs","sources":["../../../../../../../src/material-experimental/mdc-dialog/testing/dialog-harness.ts","../../../../../../../src/material-experimental/mdc-dialog/testing/dialog-opener.ts","../../../../../../../src/material-experimental/mdc-dialog/testing/public-api.ts","../../../../../../../src/material-experimental/mdc-dialog/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {DialogHarnessFilters, _MatDialogHarnessBase} from '@angular/material/dialog/testing';\n\n/** Selectors for different sections of the mat-dialog that can contain user content. */\nexport const enum MatDialogSection {\n  TITLE = '.mat-mdc-dialog-title',\n  CONTENT = '.mat-mdc-dialog-content',\n  ACTIONS = '.mat-mdc-dialog-actions',\n}\n\n/** Harness for interacting with a standard `MatDialog` in tests. */\nexport class MatDialogHarness extends _MatDialogHarnessBase {\n  /** The selector for the host element of a `MatDialog` instance. */\n  static hostSelector = '.mat-mdc-dialog-container';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatDialogHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which dialog instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: DialogHarnessFilters = {}): HarnessPredicate<MatDialogHarness> {\n    return new HarnessPredicate(MatDialogHarness, options);\n  }\n\n  protected override _title = this.locatorForOptional(MatDialogSection.TITLE);\n  protected override _content = this.locatorForOptional(MatDialogSection.CONTENT);\n  protected override _actions = this.locatorForOptional(MatDialogSection.ACTIONS);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentType} from '@angular/cdk/overlay';\nimport {ChangeDetectionStrategy, Component, NgModule, ViewEncapsulation} from '@angular/core';\nimport {_MatTestDialogOpenerBase} from '@angular/material/dialog/testing';\nimport {\n  MatDialog,\n  MatDialogContainer,\n  MatDialogModule,\n  MatDialogConfig,\n} from '@angular/material-experimental/mdc-dialog';\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\n\n/** Test component that immediately opens a dialog when bootstrapped. */\n@Component({\n  selector: 'mat-test-dialog-opener',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatTestDialogOpener<T = unknown, R = unknown> extends _MatTestDialogOpenerBase<\n  MatDialogContainer,\n  T,\n  R\n> {\n  constructor(dialog: MatDialog) {\n    super(dialog);\n  }\n\n  /** Static method that prepares this class to open the provided component. */\n  static withComponent<T = unknown, R = unknown>(\n    component: ComponentType<T>,\n    config?: MatDialogConfig,\n  ) {\n    _MatTestDialogOpenerBase.component = component;\n    _MatTestDialogOpenerBase.config = config;\n    return MatTestDialogOpener as ComponentType<MatTestDialogOpener<T, R>>;\n  }\n}\n\n@NgModule({\n  declarations: [MatTestDialogOpener],\n  imports: [MatDialogModule, NoopAnimationsModule],\n})\nexport class MatTestDialogOpenerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {DialogHarnessFilters} from '@angular/material/dialog/testing';\nexport {MatDialogHarness, MatDialogSection} from './dialog-harness';\nexport * from './dialog-opener';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;;AAAA;;;;;;AAMG;AAYH;AACM,MAAO,gBAAiB,SAAQ,qBAAqB,CAAA;AAA3D,IAAA,WAAA,GAAA;;QAcqB,IAAA,CAAA,MAAM,GAAG,IAAI,CAAC,kBAAkB,qCAAwB,CAAC;QACzD,IAAA,CAAA,QAAQ,GAAG,IAAI,CAAC,kBAAkB,yCAA0B,CAAC;QAC7D,IAAA,CAAA,QAAQ,GAAG,IAAI,CAAC,kBAAkB,yCAA0B,CAAC;KACjF;AAbC;;;;;AAKG;AACH,IAAA,OAAO,IAAI,CAAC,OAAA,GAAgC,EAAE,EAAA;AAC5C,QAAA,OAAO,IAAI,gBAAgB,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;KACxD;;AAXD;AACO,gBAAY,CAAA,YAAA,GAAG,2BAA2B;;ACrBnD;;;;;;AAMG;;AAaH;AAOA,IAAa,mBAAmB,GAAA,qBAAA,GAAhC,MAAa,4BAAsD,wBAIlE,CAAA;AACC,IAAA,WAAA,CAAY,MAAiB,EAAA;QAC3B,KAAK,CAAC,MAAM,CAAC,CAAC;KACf;;AAGD,IAAA,OAAO,aAAa,CAClB,SAA2B,EAC3B,MAAwB,EAAA;AAExB,QAAA,wBAAwB,CAAC,SAAS,GAAG,SAAS,CAAC;AAC/C,QAAA,wBAAwB,CAAC,MAAM,GAAG,MAAM,CAAC;AACzC,QAAA,OAAO,qBAA+D,CAAC;KACxE;EACF;AAlBY,mBAAmB,GAAA,qBAAA,GAAA,UAAA,CAAA;AAN/B,IAAA,SAAS,CAAC;AACT,QAAA,QAAQ,EAAE,wBAAwB;AAClC,QAAA,QAAQ,EAAE,EAAE;QACZ,eAAe,EAAE,uBAAuB,CAAC,MAAM;QAC/C,aAAa,EAAE,iBAAiB,CAAC,IAAI;KACtC,CAAC;qCAMoB,SAAS,CAAA,CAAA;CALlB,EAAA,mBAAmB,CAkB/B,CAAA;AAMY,IAAA,yBAAyB,GAAtC,MAAa,yBAAyB,CAAA;EAAG;AAA5B,yBAAyB,GAAA,UAAA,CAAA;AAJrC,IAAA,QAAQ,CAAC;QACR,YAAY,EAAE,CAAC,mBAAmB,CAAC;AACnC,QAAA,OAAO,EAAE,CAAC,eAAe,EAAE,oBAAoB,CAAC;KACjD,CAAC;CACW,EAAA,yBAAyB,CAAG;;AClDzC;;;;;;AAMG;;ACNH;;;;;;AAMG;;;;"}