{"version":3,"file":"mdc-slide-toggle__testing.js","sources":["../../../../../../src/material-experimental/mdc-slide-toggle/testing/slide-toggle-harness.ts","../../../../../../src/material-experimental/mdc-slide-toggle/testing/public-api.ts","../../../../../../src/material-experimental/mdc-slide-toggle/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {\n  _MatSlideToggleHarnessBase,\n  SlideToggleHarnessFilters\n} from '@angular/material/slide-toggle/testing';\n\n\n/** Harness for interacting with a MDC-based mat-slide-toggle in tests. */\nexport class MatSlideToggleHarness extends _MatSlideToggleHarnessBase {\n  static hostSelector = '.mat-mdc-slide-toggle';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a slide-toggle w/ specific attributes.\n   * @param options Options for narrowing the search:\n   *   - `selector` finds a slide-toggle whose host element matches the given selector.\n   *   - `label` finds a slide-toggle with specific label text.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: SlideToggleHarnessFilters = {}): HarnessPredicate<MatSlideToggleHarness> {\n    return new HarnessPredicate(MatSlideToggleHarness, options)\n        .addOption('label', options.label,\n            (harness, label) => HarnessPredicate.stringMatches(harness.getLabelText(), label))\n        // We want to provide a filter option for \"name\" because the name of the slide-toggle is\n        // only set on the underlying input. This means that it's not possible for developers\n        // to retrieve the harness of a specific checkbox with name through a CSS selector.\n        .addOption('name', options.name, async (harness, name) => await harness.getName() === name);\n  }\n\n  private _inputContainer = this.locatorFor('.mdc-switch');\n\n  async toggle(): Promise<void> {\n    const elToClick = await this.isDisabled() ? this._inputContainer() : this._input();\n    return (await elToClick).click();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './slide-toggle-harness';\nexport {SlideToggleHarnessFilters} from '@angular/material/slide-toggle/testing';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;AAAA;;;;;;;AAeA;MACa,qBAAsB,SAAQ,0BAA0B;IAArE;;QAoBU,oBAAe,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;KAM1D;;;;;;;;IAhBC,OAAO,IAAI,CAAC,UAAqC,EAAE;QACjD,OAAO,IAAI,gBAAgB,CAAC,qBAAqB,EAAE,OAAO,CAAC;aACtD,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,EAC7B,CAAC,OAAO,EAAE,KAAK,KAAK,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,KAAK,CAAC,CAAC;;;;aAIrF,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,EAAE,CAAO,OAAO,EAAE,IAAI,oDAAK,OAAA,CAAA,MAAM,OAAO,CAAC,OAAO,EAAE,MAAK,IAAI,CAAA,GAAA,CAAC,CAAC;KACjG;IAIK,MAAM;;YACV,MAAM,SAAS,GAAG,CAAA,MAAM,IAAI,CAAC,UAAU,EAAE,IAAG,IAAI,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;YACnF,OAAO,CAAC,MAAM,SAAS,EAAE,KAAK,EAAE,CAAC;SAClC;KAAA;;AAxBM,kCAAY,GAAG,uBAAuB;;ACjB/C;;;;;;;;ACAA;;;;;;;;;;"}