{"version":3,"file":"mdc-select.js","sources":["../../../../../../src/material-experimental/mdc-select/select-animations.ts","../../../../../../src/material-experimental/mdc-select/select.ts","../../../../../../src/material-experimental/mdc-select/module.ts","../../../../../../src/material-experimental/mdc-select/public-api.ts","../../../../../../src/material-experimental/mdc-select/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  /**\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 12.0.0\n   */\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /** This animation transforms the select's overlay panel on and off the page. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => showing',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  OnInit,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {MAT_SELECT_TRIGGER, _MatSelectBase} from '@angular/material/select';\nimport {\n  MatOptgroup,\n  MatOption,\n  MAT_OPTGROUP,\n  MAT_OPTION_PARENT_COMPONENT,\n  _getOptionScrollPosition,\n} from '@angular/material-experimental/mdc-core';\nimport {CdkOverlayOrigin, ConnectedPosition} from '@angular/cdk/overlay';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {takeUntil} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger',\n  providers: [{provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger}],\n})\nexport class MatSelectTrigger {}\n\n@Component({\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'combobox',\n    'aria-autocomplete': 'none',\n    'aria-haspopup': 'listbox',\n    'class': 'mat-mdc-select',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n    '[attr.aria-expanded]': 'panelOpen',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-mdc-select-disabled]': 'disabled',\n    '[class.mat-mdc-select-invalid]': 'errorState',\n    '[class.mat-mdc-select-required]': 'required',\n    '[class.mat-mdc-select-empty]': 'empty',\n    '[class.mat-mdc-select-multiple]': 'multiple',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [matSelectAnimations.transformPanel],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectBase<MatSelectChange> implements OnInit, AfterViewInit {\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n  @ContentChildren(MAT_OPTGROUP, {descendants: true}) optionGroups: QueryList<MatOptgroup>;\n  @ContentChild(MAT_SELECT_TRIGGER) customTrigger: MatSelectTrigger;\n\n  _positions: ConnectedPosition[] = [\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      panelClass: 'mat-mdc-select-panel-above'\n    },\n  ];\n\n  /** Ideal origin for the overlay panel. */\n  _preferredOverlayOrigin: CdkOverlayOrigin | undefined;\n\n  /** Width of the overlay panel. */\n  _overlayWidth: number;\n\n  get shouldLabelFloat(): boolean {\n    // Since the panel doesn't overlap the trigger, we\n    // want the label to only float when there's a value.\n    return !this.empty;\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        this._overlayWidth = this._getOverlayWidth();\n        this._changeDetectorRef.detectChanges();\n      }\n    });\n  }\n\n  ngAfterViewInit() {\n    // Note that it's important that we read this in `ngAfterViewInit`, because\n    // reading it earlier will cause the form field to return a different element.\n    if (this._parentFormField) {\n      // TODO(crisbeto): currently the MDC select is based on the standard one which uses the\n      // connected overlay directive for its panel. In order to keep the logic as similar as\n      // possible, we have to use the directive here which only accepts a `CdkOverlayOrigin` as\n      // its origin. For now we fake an origin directive by constructing an object that looks\n      // like it, although eventually we should switch to creating the OverlayRef here directly.\n      this._preferredOverlayOrigin = {\n        elementRef: this._parentFormField.getConnectedOverlayOrigin()\n      };\n    }\n  }\n\n  open() {\n    this._overlayWidth = this._getOverlayWidth();\n    super.open();\n  }\n\n  close() {\n    super.close();\n\n    // Required for the MDC form field to pick up when the overlay has been closed.\n    this.stateChanges.next();\n  }\n\n  /** Scrolls the active option into view. */\n  protected _scrollOptionIntoView(index: number): void {\n    const option = this.options.toArray()[index];\n\n    if (option) {\n      const panel: HTMLElement = this.panel.nativeElement;\n      const element = option._getHostElement();\n\n      panel.scrollTop = _getOptionScrollPosition(\n        element.offsetTop,\n        element.offsetHeight,\n        panel.scrollTop,\n        panel.offsetHeight\n      );\n    }\n  }\n\n  protected _positioningSettled() {\n    this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n  }\n\n  protected _getChangeEvent(value: any) {\n    return new MatSelectChange(this, value);\n  }\n\n  /** Gets how wide the overlay panel should be. */\n  private _getOverlayWidth() {\n    const refToMeasure = (this._preferredOverlayOrigin?.elementRef || this._elementRef);\n    return refToMeasure.nativeElement.getBoundingClientRect().width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material-experimental/mdc-core';\nimport {MatFormFieldModule} from '@angular/material-experimental/mdc-form-field';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from '@angular/material/select';\nimport {MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [\n    CdkScrollableModule,\n    MatFormFieldModule,\n    MatSelect,\n    MatSelectTrigger,\n    MatOptionModule,\n    MatCommonModule\n  ],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './module';\nexport * from './select';\nexport * from './select-animations';\nexport {\n  MAT_SELECT_CONFIG,\n  MAT_SELECT_SCROLL_STRATEGY,\n  MAT_SELECT_SCROLL_STRATEGY_PROVIDER,\n  MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n  MAT_SELECT_TRIGGER,\n  MatSelectConfig,\n  SELECT_ITEM_HEIGHT_EM,\n  SELECT_MULTIPLE_PANEL_PADDING_X,\n  SELECT_PANEL_INDENT_PADDING_X,\n  SELECT_PANEL_MAX_HEIGHT,\n  SELECT_PANEL_PADDING_X,\n  SELECT_PANEL_VIEWPORT_PADDING,\n} from '@angular/material/select';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}