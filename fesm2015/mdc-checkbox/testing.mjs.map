{"version":3,"file":"testing.mjs","sources":["../../../../../../../src/material-experimental/mdc-checkbox/testing/checkbox-harness.ts","../../../../../../../src/material-experimental/mdc-checkbox/testing/public-api.ts","../../../../../../../src/material-experimental/mdc-checkbox/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {CheckboxHarnessFilters, _MatCheckboxHarnessBase} from '@angular/material/checkbox/testing';\n\n/** Harness for interacting with a MDC-based mat-checkbox in tests. */\nexport class MatCheckboxHarness extends _MatCheckboxHarnessBase {\n  static hostSelector = '.mat-mdc-checkbox';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a checkbox with specific attributes.\n   * @param options Options for narrowing the search:\n   *   - `selector` finds a checkbox whose host element matches the given selector.\n   *   - `label` finds a checkbox with specific label text.\n   *   - `name` finds a checkbox with specific name.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: CheckboxHarnessFilters = {}): HarnessPredicate<MatCheckboxHarness> {\n    return (\n      new HarnessPredicate(MatCheckboxHarness, options)\n        .addOption('label', options.label, (harness, label) =>\n          HarnessPredicate.stringMatches(harness.getLabelText(), label),\n        )\n        // We want to provide a filter option for \"name\" because the name of the checkbox is\n        // only set on the underlying input. This means that it's not possible for developers\n        // to retrieve the harness of a specific checkbox with name through a CSS selector.\n        .addOption(\n          'name',\n          options.name,\n          async (harness, name) => (await harness.getName()) === name,\n        )\n        .addOption(\n          'checked',\n          options.checked,\n          async (harness, checked) => (await harness.isChecked()) == checked,\n        )\n    );\n  }\n\n  protected _input = this.locatorFor('input');\n  protected _label = this.locatorFor('label');\n  private _inputContainer = this.locatorFor('.mdc-checkbox');\n\n  async toggle(): Promise<void> {\n    const elToClick = (await this.isDisabled()) ? this._inputContainer() : this._input();\n    return (await elToClick).click();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './checkbox-harness';\nexport {CheckboxHarnessFilters} from '@angular/material/checkbox/testing';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;AAWA;AACM,MAAO,kBAAmB,SAAQ,uBAAuB,CAAA;AAA/D,IAAA,WAAA,GAAA;;QAiCY,IAAA,CAAA,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAClC,IAAA,CAAA,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACpC,IAAA,CAAA,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;KAM5D;AAtCC;;;;;;;AAOG;AACH,IAAA,OAAO,IAAI,CAAC,OAAA,GAAkC,EAAE,EAAA;AAC9C,QAAA,QACE,IAAI,gBAAgB,CAAC,kBAAkB,EAAE,OAAO,CAAC;aAC9C,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,KAAK,KAChD,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,KAAK,CAAC,CAC9D;;;;aAIA,SAAS,CACR,MAAM,EACN,OAAO,CAAC,IAAI,EACZ,CAAO,OAAO,EAAE,IAAI,oDAAK,OAAA,CAAC,MAAM,OAAO,CAAC,OAAO,EAAE,MAAM,IAAI,CAAA,EAAA,CAAA,CAC5D;AACA,aAAA,SAAS,CACR,SAAS,EACT,OAAO,CAAC,OAAO,EACf,CAAO,OAAO,EAAE,OAAO,KAAI,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA,EAAC,OAAA,CAAC,MAAM,OAAO,CAAC,SAAS,EAAE,KAAK,OAAO,CAAA,EAAA,CAAA,CACnE,EACH;KACH;IAMK,MAAM,GAAA;;YACV,MAAM,SAAS,GAAG,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,IAAI,IAAI,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;AACrF,YAAA,OAAO,CAAC,MAAM,SAAS,EAAE,KAAK,EAAE,CAAC;SAClC,CAAA,CAAA;AAAA,KAAA;;AAvCM,kBAAY,CAAA,YAAA,GAAG,mBAAmB;;ACb3C;;;;;;AAMG;;ACNH;;;;;;AAMG;;;;"}