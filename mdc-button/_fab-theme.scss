@use '@material/fab/fab' as mdc-fab;
@use '@material/fab/fab-theme' as mdc-fab-theme;
@use '@material/ripple/ripple-theme' as mdc-ripple-theme;
@use '@material/elevation/elevation-theme' as mdc-elevation-theme;
@use '@material/theme/theme-color' as mdc-theme-color;
@use '../mdc-helpers/mdc-helpers';
@use '../../material/core/theming/theming';
@use '../../material/core/typography/typography';
@use './button-theme-private';

@mixin color($config-or-theme) {
  $config: theming.get-color-config($config-or-theme);
  @include mdc-helpers.mat-using-mdc-theme($config) {
    .mat-mdc-fab, .mat-mdc-mini-fab {
      @include mdc-ripple-theme.states(
          $query: mdc-helpers.$mat-theme-styles-query,
          $ripple-target: button-theme-private.$fab-state-target);

      &.mat-unthemed {
        @include mdc-ripple-theme.states-base-color(mdc-theme-color.$on-surface,
          $query: mdc-helpers.$mat-theme-styles-query,
          $ripple-target: button-theme-private.$fab-state-target);
        @include mdc-fab-theme.container-color(mdc-theme-color.$on-surface,
          $query: mdc-helpers.$mat-theme-styles-query);
        @include mdc-fab-theme.ink-color(mdc-theme-color.$on-surface,
          $query: mdc-helpers.$mat-theme-styles-query);
      }

      &.mat-primary {
        @include mdc-ripple-theme.states-base-color(on-primary,
          $query: mdc-helpers.$mat-theme-styles-query,
          $ripple-target: button-theme-private.$fab-state-target);
        @include mdc-fab-theme.container-color(primary,
          $query: mdc-helpers.$mat-theme-styles-query);
        @include mdc-fab-theme.ink-color(on-primary, $query: mdc-helpers.$mat-theme-styles-query);
        @include button-theme-private.ripple-ink-color(on-primary);
      }

      &.mat-accent {
        @include mdc-ripple-theme.states-base-color(on-secondary,
          $query: mdc-helpers.$mat-theme-styles-query,
          $ripple-target: button-theme-private.$fab-state-target);
        @include mdc-fab-theme.container-color(secondary,
          $query: mdc-helpers.$mat-theme-styles-query);
        @include mdc-fab-theme.ink-color(on-secondary, $query: mdc-helpers.$mat-theme-styles-query);
        @include button-theme-private.ripple-ink-color(on-secondary);
      }

      &.mat-warn {
        @include mdc-ripple-theme.states-base-color(on-error,
          $query: mdc-helpers.$mat-theme-styles-query,
          $ripple-target: button-theme-private.$fab-state-target);
        @include mdc-fab-theme.container-color(error, $query: mdc-helpers.$mat-theme-styles-query);
        @include mdc-fab-theme.ink-color(on-error, $query: mdc-helpers.$mat-theme-styles-query);
        @include button-theme-private.ripple-ink-color(on-error);
      }

      @include button-theme-private.apply-disabled-style() {
        @include button-theme-private.apply-disabled-color();
        @include button-theme-private.apply-disabled-background();
        @include mdc-elevation-theme.elevation(0, $query: mdc-helpers.$mat-theme-styles-query);
      }
    }

    @include mdc-fab.without-ripple($query: mdc-helpers.$mat-theme-styles-query);
  }
}

@mixin typography($config-or-theme) {
  $config: typography.private-typography-to-2018-config(
      theming.get-typography-config($config-or-theme));
  @include mdc-helpers.mat-using-mdc-typography($config) {
    @include mdc-fab.without-ripple($query: mdc-helpers.$mat-typography-styles-query);
  }
}

@mixin density($config-or-theme) {}

@mixin theme($theme-or-color-config) {
  $theme: theming.private-legacy-get-theme($theme-or-color-config);
  @include theming.private-check-duplicate-theme-styles($theme, 'mat-mdc-fab') {
    $color: theming.get-color-config($theme);
    $density: theming.get-density-config($theme);
    $typography: theming.get-typography-config($theme);

    @if $color != null {
      @include color($color);
    }
    @if $density != null {
      @include density($density);
    }
    @if $typography != null {
      @include typography($typography);
    }
  }
}
