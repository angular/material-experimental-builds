{"version":3,"file":"mdc-button.mjs","sources":["../../../../../../src/material-experimental/mdc-button/button-base.ts","../../../../../../src/material-experimental/mdc-button/button.ts","../../../../../../src/material-experimental/mdc-button/button.html","../../../../../../src/material-experimental/mdc-button/fab.ts","../../../../../../src/material-experimental/mdc-button/icon-button.ts","../../../../../../src/material-experimental/mdc-button/module.ts","../../../../../../src/material-experimental/mdc-button/public-api.ts","../../../../../../src/material-experimental/mdc-button/index.ts","../../../../../../src/material-experimental/mdc-button/mdc-button_public_index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Directive, ElementRef, NgZone, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material-experimental/mdc-core';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n/** Inputs common to all buttons. */\nexport const MAT_BUTTON_INPUTS = ['disabled', 'disableRipple', 'color'];\n\n/** Shared host configuration for all buttons */\nexport const MAT_BUTTON_HOST = {\n  '[attr.disabled]': 'disabled || null',\n  '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  // MDC automatically applies the primary theme color to the button, but we want to support\n  // an unthemed version. If color is undefined, apply a CSS class that makes it easy to\n  // select and style this \"theme\".\n  '[class.mat-unthemed]': '!color',\n  // Add a class that applies to all buttons. This makes it easier to target if somebody\n  // wants to target all Material buttons.\n  '[class.mat-mdc-button-base]': 'true',\n};\n\n/** List of classes to add to buttons instances based on host attribute selector. */\nconst HOST_SELECTOR_MDC_CLASS_PAIR: {selector: string; mdcClasses: string[]}[] = [\n  {\n    selector: 'mat-button',\n    mdcClasses: ['mdc-button', 'mat-mdc-button'],\n  },\n  {\n    selector: 'mat-flat-button',\n    mdcClasses: ['mdc-button', 'mdc-button--unelevated', 'mat-mdc-unelevated-button'],\n  },\n  {\n    selector: 'mat-raised-button',\n    mdcClasses: ['mdc-button', 'mdc-button--raised', 'mat-mdc-raised-button'],\n  },\n  {\n    selector: 'mat-stroked-button',\n    mdcClasses: ['mdc-button', 'mdc-button--outlined', 'mat-mdc-outlined-button'],\n  },\n  {\n    selector: 'mat-fab',\n    mdcClasses: ['mdc-fab', 'mat-mdc-fab'],\n  },\n  {\n    selector: 'mat-mini-fab',\n    mdcClasses: ['mdc-fab', 'mdc-fab--mini', 'mat-mdc-mini-fab'],\n  },\n  {\n    selector: 'mat-icon-button',\n    mdcClasses: ['mdc-icon-button', 'mat-mdc-icon-button'],\n  },\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport const _MatButtonMixin = mixinColor(\n  mixinDisabled(\n    mixinDisableRipple(\n      class {\n        constructor(public _elementRef: ElementRef) {}\n      },\n    ),\n  ),\n);\n\n/** Base class for all buttons.  */\n@Directive()\nexport class MatButtonBase\n  extends _MatButtonMixin\n  implements CanDisable, CanColor, CanDisableRipple\n{\n  /** Whether the ripple is centered on the button. */\n  _isRippleCentered = false;\n\n  /** Whether this button is a FAB. Used to apply the correct class on the ripple. */\n  _isFab = false;\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(\n    elementRef: ElementRef,\n    public _platform: Platform,\n    public _ngZone: NgZone,\n    public _animationMode?: string,\n  ) {\n    super(elementRef);\n\n    const classList = (elementRef.nativeElement as HTMLElement).classList;\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding MDC classes.\n    for (const pair of HOST_SELECTOR_MDC_CLASS_PAIR) {\n      if (this._hasHostAttributes(pair.selector)) {\n        pair.mdcClasses.forEach((className: string) => {\n          classList.add(className);\n        });\n      }\n    }\n  }\n\n  /** Focuses the button. */\n  focus(_origin: FocusOrigin = 'program', options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  private _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._elementRef.nativeElement.hasAttribute(attribute));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n}\n\n/** Shared inputs by buttons using the `<a>` tag */\nexport const MAT_ANCHOR_INPUTS = ['disabled', 'disableRipple', 'color', 'tabIndex'];\n\n/** Shared host configuration for buttons using the `<a>` tag. */\nexport const MAT_ANCHOR_HOST = {\n  '[attr.disabled]': 'disabled || null',\n  '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n\n  // Note that we ignore the user-specified tabindex when it's disabled for\n  // consistency with the `mat-button` applied on native buttons where even\n  // though they have an index, they're not tabbable.\n  '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n  '[attr.aria-disabled]': 'disabled.toString()',\n  // MDC automatically applies the primary theme color to the button, but we want to support\n  // an unthemed version. If color is undefined, apply a CSS class that makes it easy to\n  // select and style this \"theme\".\n  '[class.mat-unthemed]': '!color',\n  // Add a class that applies to all buttons. This makes it easier to target if somebody\n  // wants to target all Material buttons.\n  '[class.mat-mdc-button-base]': 'true',\n};\n\n/**\n * Anchor button base.\n */\n@Directive()\nexport class MatAnchorBase extends MatButtonBase implements OnInit, OnDestroy {\n  tabIndex: number;\n\n  constructor(elementRef: ElementRef, platform: Platform, ngZone: NgZone, animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n\n  ngOnInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      this._elementRef.nativeElement.addEventListener('click', this._haltDisabledEvents);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._elementRef.nativeElement.removeEventListener('click', this._haltDisabledEvents);\n  }\n\n  _haltDisabledEvents = (event: Event): void => {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  NgZone,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\nimport {\n  MAT_ANCHOR_HOST,\n  MAT_ANCHOR_INPUTS,\n  MAT_BUTTON_HOST,\n  MAT_BUTTON_INPUTS,\n  MatAnchorBase,\n  MatButtonBase,\n} from './button-base';\n\n/**\n * Material Design button component. Users interact with a button to perform an action.\n * See https://material.io/components/buttons\n *\n * The `MatButton` class applies to native button elements and captures the appearances for\n * \"text button\", \"outlined button\", and \"contained button\" per the Material Design\n * specification. `MatButton` additionally captures an additional \"flat\" appearance, which matches\n * \"contained\" but without elevation.\n */\n@Component({\n  selector: `\n    button[mat-button], button[mat-raised-button], button[mat-flat-button],\n    button[mat-stroked-button]\n  `,\n  templateUrl: 'button.html',\n  styleUrls: ['button.css', 'button-high-contrast.css'],\n  inputs: MAT_BUTTON_INPUTS,\n  host: MAT_BUTTON_HOST,\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends MatButtonBase {\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n\n/**\n * Material Design button component for anchor elements. Anchor elements are used to provide\n * links for the user to navigate across different routes or pages.\n * See https://material.io/components/buttons\n *\n * The `MatAnchor` class applies to native anchor elements and captures the appearances for\n * \"text button\", \"outlined button\", and \"contained button\" per the Material Design\n * specification. `MatAnchor` additionally captures an additional \"flat\" appearance, which matches\n * \"contained\" but without elevation.\n */\n@Component({\n  selector: `a[mat-button], a[mat-raised-button], a[mat-flat-button], a[mat-stroked-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: MAT_ANCHOR_HOST,\n  inputs: MAT_ANCHOR_INPUTS,\n  templateUrl: 'button.html',\n  styleUrls: ['button.css', 'button-high-contrast.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatAnchorBase {\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n","<span\n    [class.mdc-button__ripple]=\"!_isFab\"\n    [class.mdc-fab__ripple]=\"_isFab\"></span>\n\n<ng-content select=\".material-icons:not([iconPositionEnd]), mat-icon:not([iconPositionEnd])\">\n</ng-content>\n\n<span class=\"mdc-button__label\"><ng-content></ng-content></span>\n\n<ng-content select=\".material-icons[iconPositionEnd], mat-icon[iconPositionEnd]\">\n</ng-content>\n\n<!--\n  The indicator can't be directly on the button, because MDC uses ::before for high contrast\n  indication and it can't be on the ripple, because it has a border radius and overflow: hidden.\n-->\n<span class=\"mat-mdc-focus-indicator\"></span>\n\n<span matRipple class=\"mat-mdc-button-ripple\"\n     [matRippleDisabled]=\"_isRippleDisabled()\"\n     [matRippleCentered]=\"_isRippleCentered\"\n     [matRippleTrigger]=\"_elementRef.nativeElement\"></span>\n\n<span class=\"mat-mdc-button-touch-target\"></span>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  NgZone,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\nimport {MatAnchor} from './button';\nimport {\n  MAT_ANCHOR_HOST,\n  MAT_ANCHOR_INPUTS,\n  MAT_BUTTON_HOST,\n  MAT_BUTTON_INPUTS,\n  MatButtonBase,\n} from './button-base';\nimport {ThemePalette} from '@angular/material-experimental/mdc-core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/** Default FAB options that can be overridden. */\nexport interface MatFabDefaultOptions {\n  color?: ThemePalette;\n}\n\n/** Injection token to be used to override the default options for FAB. */\nexport const MAT_FAB_DEFAULT_OPTIONS = new InjectionToken<MatFabDefaultOptions>(\n  'mat-mdc-fab-default-options',\n  {\n    providedIn: 'root',\n    factory: MAT_FAB_DEFAULT_OPTIONS_FACTORY,\n  },\n);\n\n/** @docs-private */\nexport function MAT_FAB_DEFAULT_OPTIONS_FACTORY(): MatFabDefaultOptions {\n  return {\n    // The FAB by default has its color set to accent.\n    color: 'accent',\n  };\n}\n\n// Default FAB configuration.\nconst defaults = MAT_FAB_DEFAULT_OPTIONS_FACTORY();\n\n/**\n * Material Design floating action button (FAB) component. These buttons represent the primary\n * or most common action for users to interact with.\n * See https://material.io/components/buttons-floating-action-button/\n *\n * The `MatFabButton` class has two appearances: normal and extended.\n */\n@Component({\n  selector: `button[mat-fab]`,\n  templateUrl: 'button.html',\n  styleUrls: ['fab.css'],\n  inputs: [...MAT_BUTTON_INPUTS, 'extended'],\n  host: {\n    ...MAT_BUTTON_HOST,\n    '[class.mdc-fab--extended]': 'extended',\n    '[class.mat-mdc-extended-fab]': 'extended',\n  },\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatFabButton extends MatButtonBase {\n  override _isFab = true;\n\n  get extended(): boolean {\n    return this._extended;\n  }\n  set extended(value: BooleanInput) {\n    this._extended = coerceBooleanProperty(value);\n  }\n  private _extended: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n    @Optional() @Inject(MAT_FAB_DEFAULT_OPTIONS) private _options?: MatFabDefaultOptions,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n    this._options = this._options || defaults;\n    this.color = this.defaultColor = this._options!.color || defaults.color;\n  }\n}\n\n/**\n * Material Design mini floating action button (FAB) component. These buttons represent the primary\n * or most common action for users to interact with.\n * See https://material.io/components/buttons-floating-action-button/\n */\n@Component({\n  selector: `button[mat-mini-fab]`,\n  templateUrl: 'button.html',\n  styleUrls: ['fab.css'],\n  inputs: MAT_BUTTON_INPUTS,\n  host: MAT_BUTTON_HOST,\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMiniFabButton extends MatButtonBase {\n  override _isFab = true;\n\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n    @Optional() @Inject(MAT_FAB_DEFAULT_OPTIONS) private _options?: MatFabDefaultOptions,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n    this._options = this._options || defaults;\n    this.color = this.defaultColor = this._options!.color || defaults.color;\n  }\n}\n\n/**\n * Material Design floating action button (FAB) component for anchor elements. Anchor elements\n * are used to provide links for the user to navigate across different routes or pages.\n * See https://material.io/components/buttons-floating-action-button/\n *\n * The `MatFabAnchor` class has two appearances: normal and extended.\n */\n@Component({\n  selector: `a[mat-fab]`,\n  templateUrl: 'button.html',\n  styleUrls: ['fab.css'],\n  inputs: [...MAT_ANCHOR_INPUTS, 'extended'],\n  host: {\n    ...MAT_ANCHOR_HOST,\n    '[class.mdc-fab--extended]': 'extended',\n    '[class.mat-mdc-extended-fab]': 'extended',\n  },\n  exportAs: 'matButton, matAnchor',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatFabAnchor extends MatAnchor {\n  override _isFab = true;\n\n  get extended(): boolean {\n    return this._extended;\n  }\n  set extended(value: BooleanInput) {\n    this._extended = coerceBooleanProperty(value);\n  }\n  private _extended: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n    @Optional() @Inject(MAT_FAB_DEFAULT_OPTIONS) private _options?: MatFabDefaultOptions,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n    this._options = this._options || defaults;\n    this.color = this.defaultColor = this._options!.color || defaults.color;\n  }\n}\n\n/**\n * Material Design mini floating action button (FAB) component for anchor elements. Anchor elements\n * are used to provide links for the user to navigate across different routes or pages.\n * See https://material.io/components/buttons-floating-action-button/\n */\n@Component({\n  selector: `a[mat-mini-fab]`,\n  templateUrl: 'button.html',\n  styleUrls: ['fab.css'],\n  inputs: MAT_ANCHOR_INPUTS,\n  host: MAT_ANCHOR_HOST,\n  exportAs: 'matButton, matAnchor',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMiniFabAnchor extends MatAnchor {\n  override _isFab = true;\n\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n    @Optional() @Inject(MAT_FAB_DEFAULT_OPTIONS) private _options?: MatFabDefaultOptions,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n    this._options = this._options || defaults;\n    this.color = this.defaultColor = this._options!.color || defaults.color;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  NgZone,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\nimport {\n  MAT_ANCHOR_HOST,\n  MAT_ANCHOR_INPUTS,\n  MAT_BUTTON_HOST,\n  MAT_BUTTON_INPUTS,\n  MatAnchorBase,\n  MatButtonBase,\n} from './button-base';\n\n/**\n * Material Design icon button component. This type of button displays a single interactive icon for\n * users to perform an action.\n * See https://material.io/develop/web/components/buttons/icon-buttons/\n */\n@Component({\n  selector: `button[mat-icon-button]`,\n  templateUrl: 'button.html',\n  styleUrls: ['icon-button.css', 'button-high-contrast.css'],\n  inputs: MAT_BUTTON_INPUTS,\n  host: MAT_BUTTON_HOST,\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIconButton extends MatButtonBase {\n  // Set the ripple to be centered for icon buttons\n  override _isRippleCentered = true;\n\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n\n/**\n * Material Design icon button component for anchor elements. This button displays a single\n * interaction icon that allows users to navigate across different routes or pages.\n * See https://material.io/develop/web/components/buttons/icon-buttons/\n */\n@Component({\n  selector: `a[mat-icon-button]`,\n  templateUrl: 'button.html',\n  styleUrls: ['icon-button.css', 'button-high-contrast.css'],\n  inputs: MAT_ANCHOR_INPUTS,\n  host: MAT_ANCHOR_HOST,\n  exportAs: 'matButton, matAnchor',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIconAnchor extends MatAnchorBase {\n  // Set the ripple to be centered for icon buttons\n  override _isRippleCentered = true;\n\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material-experimental/mdc-core';\nimport {MatAnchor, MatButton} from './button';\nimport {MatFabAnchor, MatFabButton, MatMiniFabAnchor, MatMiniFabButton} from './fab';\nimport {MatIconAnchor, MatIconButton} from './icon-button';\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [\n    MatAnchor,\n    MatButton,\n    MatIconAnchor,\n    MatIconButton,\n    MatMiniFabAnchor,\n    MatMiniFabButton,\n    MatFabAnchor,\n    MatFabButton,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatAnchor,\n    MatButton,\n    MatIconAnchor,\n    MatMiniFabAnchor,\n    MatMiniFabButton,\n    MatIconButton,\n    MatFabAnchor,\n    MatFabButton,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './button';\nexport * from './fab';\nexport * from './icon-button';\nexport * from './module';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}