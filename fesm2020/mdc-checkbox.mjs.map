{"version":3,"file":"mdc-checkbox.mjs","sources":["../../../../../../src/material-experimental/mdc-checkbox/checkbox.ts","../../../../../../src/material-experimental/mdc-checkbox/checkbox.html","../../../../../../src/material-experimental/mdc-checkbox/module.ts","../../../../../../src/material-experimental/mdc-checkbox/public-api.ts","../../../../../../src/material-experimental/mdc-checkbox/index.ts","../../../../../../src/material-experimental/mdc-checkbox/mdc-checkbox_public_index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  MAT_CHECKBOX_DEFAULT_OPTIONS,\n  MatCheckboxDefaultOptions,\n  MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n} from '@angular/material/checkbox';\nimport {\n  mixinColor,\n  mixinDisabled,\n  CanColor,\n  CanDisable,\n  MatRipple,\n} from '@angular/material-experimental/mdc-core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MDCCheckboxAdapter, MDCCheckboxFoundation} from '@material/checkbox';\n\nlet nextUniqueId = 0;\n\n// Default checkbox configuration.\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true,\n};\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nconst _MatCheckboxBase = mixinColor(\n  mixinDisabled(\n    class {\n      constructor(public _elementRef: ElementRef) {}\n    },\n  ),\n);\n\n@Component({\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  inputs: ['color', 'disabled'],\n  host: {\n    'class': 'mat-mdc-checkbox',\n    '[attr.tabindex]': 'null',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[class.mdc-checkbox--disabled]': 'disabled',\n    '[id]': 'id',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  exportAs: 'matCheckbox',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCheckbox\n  extends _MatCheckboxBase\n  implements AfterViewInit, OnDestroy, ControlValueAccessor, CanColor, CanDisable\n{\n  /**\n   * The `aria-label` attribute to use for the input element. In most cases, `aria-labelledby` will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** The `aria-labelledby` attribute to use for the input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** The `name` attribute to use for the input element. */\n  @Input() name: string | null = null;\n\n  /** The `tabindex` attribute to use for the input element. */\n  @Input() tabIndex: number;\n\n  /** The `value` attribute to use for the input element */\n  @Input() value: string;\n\n  private _uniqueId = `mat-mdc-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the checkbox is checked. */\n  @Input()\n  get checked(): boolean {\n    return this._checked;\n  }\n  set checked(checked: BooleanInput) {\n    this._checked = coerceBooleanProperty(checked);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _checked = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n  set indeterminate(indeterminate: BooleanInput) {\n    this._indeterminate = coerceBooleanProperty(indeterminate);\n    this._syncIndeterminate(this._indeterminate);\n  }\n  private _indeterminate = false;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n  set required(required: BooleanInput) {\n    this._required = coerceBooleanProperty(required);\n  }\n  private _required = false;\n\n  /** Whether to disable the ripple on this checkbox. */\n  @Input()\n  get disableRipple(): boolean {\n    return this._disableRipple;\n  }\n  set disableRipple(disableRipple: BooleanInput) {\n    this._disableRipple = coerceBooleanProperty(disableRipple);\n  }\n  private _disableRipple = false;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output()\n  readonly change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The root element for the `MDCCheckbox`. */\n  @ViewChild('checkbox') _checkbox: ElementRef<HTMLElement>;\n\n  /** The native input element. */\n  @ViewChild('nativeCheckbox') _nativeCheckbox: ElementRef<HTMLInputElement>;\n\n  /** The native label element. */\n  @ViewChild('label') _label: ElementRef<HTMLElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string {\n    return `${this.id || this._uniqueId}-input`;\n  }\n\n  /** The `MDCCheckboxFoundation` instance for this checkbox. */\n  _checkboxFoundation: MDCCheckboxFoundation;\n\n  /** ControlValueAccessor onChange */\n  private _cvaOnChange = (_: boolean) => {};\n\n  /** ControlValueAccessor onTouch */\n  private _cvaOnTouch = () => {};\n\n  /**\n   * A list of attributes that should not be modified by `MDCFoundation` classes.\n   *\n   * MDC uses animation events to determine when to update `aria-checked` which is unreliable.\n   * Therefore we disable it and handle it ourselves.\n   */\n  private _mdcFoundationIgnoredAttrs = new Set(['aria-checked']);\n\n  /** The `MDCCheckboxAdapter` instance for this checkbox. */\n  private _checkboxAdapter: MDCCheckboxAdapter = {\n    addClass: className => this._nativeCheckbox.nativeElement.classList.add(className),\n    removeClass: className => this._nativeCheckbox.nativeElement.classList.remove(className),\n    forceLayout: () => this._checkbox.nativeElement.offsetWidth,\n    hasNativeControl: () => !!this._nativeCheckbox,\n    isAttachedToDOM: () => !!this._checkbox.nativeElement.parentNode,\n    isChecked: () => this.checked,\n    isIndeterminate: () => this.indeterminate,\n    removeNativeControlAttr: attr => {\n      if (!this._mdcFoundationIgnoredAttrs.has(attr)) {\n        this._nativeCheckbox.nativeElement.removeAttribute(attr);\n      }\n    },\n    setNativeControlAttr: (attr, value) => {\n      if (!this._mdcFoundationIgnoredAttrs.has(attr)) {\n        this._nativeCheckbox.nativeElement.setAttribute(attr, value);\n      }\n    },\n    setNativeControlDisabled: disabled => (this.disabled = disabled),\n  };\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    elementRef: ElementRef<HTMLElement>,\n    @Attribute('tabindex') tabIndex: string,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n    @Optional()\n    @Inject(MAT_CHECKBOX_DEFAULT_OPTIONS)\n    private _options?: MatCheckboxDefaultOptions,\n  ) {\n    super(elementRef);\n    // Note: We don't need to set up the MDCFormFieldFoundation. Its only purpose is to manage the\n    // ripple, which we do ourselves instead.\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this._checkboxFoundation = new MDCCheckboxFoundation(this._checkboxAdapter);\n    this._options = this._options || defaults;\n    this.color = this.defaultColor = this._options!.color || defaults.color;\n  }\n\n  ngAfterViewInit() {\n    this._syncIndeterminate(this._indeterminate);\n    this._checkboxFoundation.init();\n  }\n\n  ngOnDestroy() {\n    this._checkboxFoundation.destroy();\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  registerOnChange(fn: (checked: boolean) => void) {\n    this._cvaOnChange = fn;\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void) {\n    this._cvaOnTouch = fn;\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Implemented as part of `ControlValueAccessor`\n   * @docs-private\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the checkbox. */\n  focus() {\n    this._nativeCheckbox.nativeElement.focus();\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle() {\n    this.checked = !this.checked;\n    this._cvaOnChange(this.checked);\n  }\n\n  /** Handles blur events on the native input. */\n  _onBlur() {\n    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n    // Angular does not expect events to be raised during change detection, so any state change\n    // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n    // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n    // telling the form control it has been touched until the next tick.\n    Promise.resolve().then(() => {\n      this._cvaOnTouch();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /**\n   * Handles click events on the native input.\n   *\n   * Note: we must listen to the `click` event rather than the `change` event because IE & Edge do\n   * not actually change the checked state when the user clicks an indeterminate checkbox. By\n   * listening to `click` instead we can override and normalize the behavior to change the checked\n   * state like other browsers do.\n   */\n  _onClick() {\n    const clickAction = this._options?.clickAction;\n    const checkbox = this._nativeCheckbox.nativeElement;\n\n    if (clickAction === 'noop') {\n      checkbox.checked = this.checked;\n      checkbox.indeterminate = this.indeterminate;\n      return;\n    }\n\n    if (this.indeterminate && clickAction !== 'check') {\n      this.indeterminate = false;\n      // tslint:disable:max-line-length\n      // We use `Promise.resolve().then` to ensure the same timing as the original `MatCheckbox`:\n      // https://github.com/angular/components/blob/309d5644aa610ee083c56a823ce7c422988730e8/src/lib/checkbox/checkbox.ts#L381\n      // tslint:enable:max-line-length\n      Promise.resolve().then(() => this.indeterminateChange.next(this.indeterminate));\n    } else {\n      checkbox.indeterminate = this.indeterminate;\n    }\n\n    this.checked = !this.checked;\n    this._checkboxFoundation.handleChange();\n\n    // Dispatch our change event\n    const newEvent = new MatCheckboxChange();\n    newEvent.source = this as any;\n    newEvent.checked = this.checked;\n    this._cvaOnChange(this.checked);\n    this.change.next(newEvent);\n\n    // Assigning the value again here is redundant, but we have to do it in case it was\n    // changed inside the `change` listener which will cause the input to be out of sync.\n    if (this._nativeCheckbox) {\n      this._nativeCheckbox.nativeElement.checked = this.checked;\n    }\n  }\n\n  /** Gets the value for the `aria-checked` attribute of the native input. */\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    if (this.checked) {\n      return 'true';\n    }\n\n    return this.indeterminate ? 'mixed' : 'false';\n  }\n\n  /**\n   * Syncs the indeterminate value with the checkbox DOM node.\n   *\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n   * server-side rendering.\n   */\n  private _syncIndeterminate(value: boolean) {\n    const nativeCheckbox = this._nativeCheckbox;\n    if (nativeCheckbox) {\n      nativeCheckbox.nativeElement.indeterminate = value;\n    }\n  }\n}\n","<div class=\"mdc-form-field\"\n     [class.mdc-form-field--align-end]=\"labelPosition == 'before'\">\n  <div #checkbox class=\"mdc-checkbox\">\n    <!-- Render this element first so the input is on top. -->\n    <div class=\"mat-mdc-checkbox-touch-target\" (click)=\"_onClick()\"></div>\n    <input #nativeCheckbox\n           type=\"checkbox\"\n           class=\"mdc-checkbox__native-control\"\n           [attr.aria-checked]=\"_getAriaChecked()\"\n           [attr.aria-label]=\"ariaLabel || null\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-describedby]=\"ariaDescribedby\"\n           [attr.name]=\"name\"\n           [attr.value]=\"value\"\n           [checked]=\"checked\"\n           [disabled]=\"disabled\"\n           [id]=\"inputId\"\n           [required]=\"required\"\n           [tabIndex]=\"tabIndex\"\n           (blur)=\"_onBlur()\"\n           (click)=\"_onClick()\"\n           (change)=\"$event.stopPropagation()\"/>\n    <div class=\"mdc-checkbox__ripple\"></div>\n    <div class=\"mdc-checkbox__background\">\n      <svg class=\"mdc-checkbox__checkmark\"\n           focusable=\"false\"\n           viewBox=\"0 0 24 24\"\n           aria-hidden=\"true\">\n        <path class=\"mdc-checkbox__checkmark-path\"\n              fill=\"none\"\n              d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"/>\n      </svg>\n      <div class=\"mdc-checkbox__mixedmark\"></div>\n    </div>\n    <div class=\"mat-mdc-checkbox-ripple mat-mdc-focus-indicator\" mat-ripple\n      [matRippleTrigger]=\"checkbox\"\n      [matRippleDisabled]=\"disableRipple || disabled\"\n      [matRippleCentered]=\"true\"></div>\n  </div>\n  <label #label\n         [for]=\"inputId\"\n         (click)=\"$event.stopPropagation()\">\n    <ng-content></ng-content>\n  </label>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {_MatCheckboxRequiredValidatorModule} from '@angular/material/checkbox';\nimport {MatCommonModule, MatRippleModule} from '@angular/material-experimental/mdc-core';\nimport {MatCheckbox} from './checkbox';\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule, _MatCheckboxRequiredValidatorModule],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './checkbox';\nexport * from './module';\n\nexport {\n  MAT_CHECKBOX_REQUIRED_VALIDATOR,\n  MatCheckboxClickAction,\n  MatCheckboxRequiredValidator,\n  _MatCheckboxRequiredValidatorModule,\n  /**\n   * @deprecated\n   * @breaking-change 9.0.0\n   */\n  TransitionCheckState,\n  MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n  MatCheckboxDefaultOptions,\n  MAT_CHECKBOX_DEFAULT_OPTIONS,\n} from '@angular/material/checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}