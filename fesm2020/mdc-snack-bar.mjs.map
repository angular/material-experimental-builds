{"version":3,"file":"mdc-snack-bar.mjs","sources":["../../../../../../src/material-experimental/mdc-snack-bar/snack-bar-content.ts","../../../../../../src/material-experimental/mdc-snack-bar/simple-snack-bar.ts","../../../../../../src/material-experimental/mdc-snack-bar/simple-snack-bar.html","../../../../../../src/material-experimental/mdc-snack-bar/snack-bar-container.ts","../../../../../../src/material-experimental/mdc-snack-bar/snack-bar-container.html","../../../../../../src/material-experimental/mdc-snack-bar/module.ts","../../../../../../src/material-experimental/mdc-snack-bar/snack-bar.ts","../../../../../../src/material-experimental/mdc-snack-bar/public-api.ts","../../../../../../src/material-experimental/mdc-snack-bar/index.ts","../../../../../../src/material-experimental/mdc-snack-bar/mdc-snack-bar_public_index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n/** Directive that should be applied to the text element to be rendered in the snack bar. */\n@Directive({\n  selector: `[matSnackBarLabel]`,\n  host: {\n    'class': 'mat-mdc-snack-bar-label mdc-snackbar__label',\n  },\n})\nexport class MatSnackBarLabel {}\n\n/** Directive that should be applied to the element containing the snack bar's action buttons. */\n@Directive({\n  selector: `[matSnackBarActions]`,\n  host: {\n    'class': 'mat-mdc-snack-bar-actions mdc-snackbar__actions',\n  },\n})\nexport class MatSnackBarActions {}\n\n/** Directive that should be applied to each of the snack bar's action buttons. */\n@Directive({\n  selector: `[matSnackBarAction]`,\n  host: {\n    'class': 'mat-mdc-snack-bar-action mdc-snackbar__action',\n  },\n})\nexport class MatSnackBarAction {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Inject, ViewEncapsulation} from '@angular/core';\nimport {\n  MAT_SNACK_BAR_DATA,\n  TextOnlySnackBar,\n  MatSnackBarRef,\n  SimpleSnackBar,\n} from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'mat-simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  exportAs: 'matSnackBar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-mdc-simple-snack-bar',\n  },\n})\nexport class MatSimpleSnackBar implements TextOnlySnackBar {\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) public data: {message: string; action: string},\n  ) {}\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","<div matSnackBarLabel>\n  {{data.message}}\n</div>\n\n<div matSnackBarActions *ngIf=\"hasAction\">\n  <button mat-button matSnackBarAction (click)=\"action()\">\n    {{data.action}}\n  </button>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  Inject,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {MatSnackBarConfig, _SnackBarContainer} from '@angular/material/snack-bar';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MDCSnackbarAdapter, MDCSnackbarFoundation} from '@material/snackbar';\nimport {Platform} from '@angular/cdk/platform';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * The MDC label class that should wrap the label content of the snack bar.\n * @docs-private\n */\nconst MDC_SNACKBAR_LABEL_CLASS = 'mdc-snackbar__label';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  selector: 'mat-snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mdc-snackbar mat-mdc-snack-bar-container',\n    '[class.mat-snack-bar-container]': 'false',\n    // Mark this element with a 'mat-exit' attribute to indicate that the snackbar has\n    // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n    // test harness.\n    '[attr.mat-exit]': `_exiting ? '' : null`,\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n})\nexport class MatSnackBarContainer\n  extends BasePortalOutlet\n  implements _SnackBarContainer, AfterViewChecked, OnDestroy\n{\n  /** The number of milliseconds to wait before announcing the snack bar's content. */\n  private readonly _announceDelay: number = 150;\n\n  /** The timeout for announcing the snack bar's content. */\n  private _announceTimeoutId: number;\n\n  /** Subject for notifying that the snack bar has announced to screen readers. */\n  readonly _onAnnounce: Subject<void> = new Subject();\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<void> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<void> = new Subject();\n\n  /** aria-live value for the live region. */\n  _live: AriaLivePoliteness;\n\n  /** Whether the snack bar is currently exiting. */\n  _exiting = false;\n\n  /**\n   * Role of the live region. This is only for Firefox as there is a known issue where Firefox +\n   * JAWS does not read out aria-live message.\n   */\n  _role?: 'status' | 'alert';\n\n  private _mdcAdapter: MDCSnackbarAdapter = {\n    addClass: (className: string) => this._setClass(className, true),\n    removeClass: (className: string) => this._setClass(className, false),\n    announce: () => {},\n    notifyClosed: () => {\n      this._onExit.next();\n      this._mdcFoundation.destroy();\n    },\n    notifyClosing: () => {},\n    notifyOpened: () => this._onEnter.next(),\n    notifyOpening: () => {},\n  };\n\n  _mdcFoundation = new MDCSnackbarFoundation(this._mdcAdapter);\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Element that acts as the MDC surface container which should contain the label and actions. */\n  @ViewChild('surface', {static: true}) _surface: ElementRef;\n\n  /**\n   * Element that will have the `mdc-snackbar__label` class applied if the attached component\n   * or template does not have it. This ensures that the appropriate structure, typography, and\n   * color is applied to the attached view.\n   */\n  @ViewChild('label', {static: true}) _label: ElementRef;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    public snackBarConfig: MatSnackBarConfig,\n    private _platform: Platform,\n    private _ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n  ) {\n    super();\n\n    // Use aria-live rather than a live role like 'alert' or 'status'\n    // because NVDA and JAWS have show inconsistent behavior with live roles.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._live = 'assertive';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._live = 'off';\n    } else {\n      this._live = 'polite';\n    }\n\n    // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n    // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n    if (this._platform.FIREFOX) {\n      if (this._live === 'polite') {\n        this._role = 'status';\n      }\n      if (this._live === 'assertive') {\n        this._role = 'alert';\n      }\n    }\n\n    // `MatSnackBar` will use the config's timeout to determine when the snack bar should be closed.\n    // Set this to `-1` to mark it as indefinitely open so that MDC does not close itself.\n    this._mdcFoundation.setTimeoutMs(-1);\n  }\n\n  ngAfterViewChecked() {\n    // Check to see if the attached component or template uses the MDC template structure,\n    // specifically the MDC label. If not, the container should apply the MDC label class to this\n    // component's label container, which will apply MDC's label styles to the attached view.\n    if (!this._label.nativeElement.querySelector(`.${MDC_SNACKBAR_LABEL_CLASS}`)) {\n      this._label.nativeElement.classList.add(MDC_SNACKBAR_LABEL_CLASS);\n    } else {\n      this._label.nativeElement.classList.remove(MDC_SNACKBAR_LABEL_CLASS);\n    }\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._mdcFoundation.close();\n  }\n\n  enter() {\n    // MDC uses some browser APIs that will throw during server-side rendering.\n    if (this._platform.isBrowser) {\n      this._mdcFoundation.open();\n      this._screenReaderAnnounce();\n    }\n  }\n\n  exit(): Observable<void> {\n    this._exiting = true;\n    this._mdcFoundation.close();\n\n    // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n    // long enough to visually read it either, so clear the timeout for announcing.\n    clearTimeout(this._announceTimeoutId);\n\n    return this._onExit;\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  private _setClass(cssClass: string, active: boolean) {\n    this._elementRef.nativeElement.classList.toggle(cssClass, active);\n  }\n\n  /** Applies the user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const panelClasses = this.snackBarConfig.panelClass;\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => this._setClass(cssClass, true));\n      } else {\n        this._setClass(panelClasses, true);\n      }\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n\n  /**\n   * Starts a timeout to move the snack bar content to the live region so screen readers will\n   * announce it.\n   */\n  private _screenReaderAnnounce() {\n    if (!this._announceTimeoutId) {\n      this._ngZone.runOutsideAngular(() => {\n        this._announceTimeoutId = setTimeout(() => {\n          const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n          const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n\n          if (inertElement && liveElement) {\n            // If an element in the snack bar content is focused before being moved\n            // track it and restore focus after moving to the live region.\n            let focusedElement: HTMLElement | null = null;\n            if (\n              document.activeElement instanceof HTMLElement &&\n              inertElement.contains(document.activeElement)\n            ) {\n              focusedElement = document.activeElement;\n            }\n\n            inertElement.removeAttribute('aria-hidden');\n            liveElement.appendChild(inertElement);\n            focusedElement?.focus();\n\n            this._onAnnounce.next();\n            this._onAnnounce.complete();\n          }\n        }, this._announceDelay);\n      });\n    }\n  }\n}\n","<div class=\"mdc-snackbar__surface\" #surface>\n  <!--\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\n    the attached template/component does not contain it.\n  -->\n  <div class=\"mat-mdc-snack-bar-label\" #label>\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\n    <div aria-hidden=\"true\">\n      <ng-template cdkPortalOutlet></ng-template>\n    </div>\n\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\n    <div [attr.aria-live]=\"_live\" [attr.role]=\"_role\"></div>\n  </div>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material-experimental/mdc-button';\nimport {MatCommonModule} from '@angular/material-experimental/mdc-core';\n\nimport {MatSimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarAction, MatSnackBarActions, MatSnackBarLabel} from './snack-bar-content';\n\n@NgModule({\n  imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n  exports: [\n    MatCommonModule,\n    MatSnackBarContainer,\n    MatSnackBarLabel,\n    MatSnackBarActions,\n    MatSnackBarAction,\n  ],\n  declarations: [\n    MatSimpleSnackBar,\n    MatSnackBarContainer,\n    MatSnackBarLabel,\n    MatSnackBarActions,\n    MatSnackBarAction,\n  ],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {MatSnackBar as BaseMatSnackBar} from '@angular/material/snack-bar';\nimport {MatSnackBarModule} from './module';\nimport {MatSimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar extends BaseMatSnackBar {\n  protected override simpleSnackBarComponent = MatSimpleSnackBar;\n  protected override snackBarContainerComponent = MatSnackBarContainer;\n  protected override handsetCssClass = 'mat-mdc-snack-bar-handset';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './simple-snack-bar';\nexport * from './snack-bar-container';\nexport * from './snack-bar-content';\nexport * from './snack-bar';\nexport * from './module';\n\nexport {\n  MatSnackBarConfig,\n  MatSnackBarDismiss,\n  MatSnackBarRef,\n  SimpleSnackBar,\n  MAT_SNACK_BAR_DATA,\n  MAT_SNACK_BAR_DEFAULT_OPTIONS,\n  MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n  MatSnackBarHorizontalPosition,\n  MatSnackBarVerticalPosition,\n  TextOnlySnackBar,\n  matSnackBarAnimations,\n} from '@angular/material/snack-bar';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["BaseMatSnackBar"],"mappings":"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"}