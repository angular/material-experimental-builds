{"version":3,"file":"testing.mjs","sources":["../../../../../../../src/material-experimental/mdc-slider/testing/slider-thumb-harness.ts","../../../../../../../src/material-experimental/mdc-slider/testing/slider-harness.ts","../../../../../../../src/material-experimental/mdc-slider/testing/public-api.ts","../../../../../../../src/material-experimental/mdc-slider/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ComponentHarness, HarnessPredicate, parallel} from '@angular/cdk/testing';\nimport {SliderThumbHarnessFilters, ThumbPosition} from './slider-harness-filters';\n\n\n/** Harness for interacting with a thumb inside of a Material slider in tests. */\nexport class MatSliderThumbHarness extends ComponentHarness {\n  static hostSelector =\n    'input[matSliderThumb], input[matSliderStartThumb], input[matSliderEndThumb]';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatSliderThumbHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which thumb instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: SliderThumbHarnessFilters = {}): HarnessPredicate<MatSliderThumbHarness> {\n    return new HarnessPredicate(MatSliderThumbHarness, options)\n        .addOption('position', options.position, async (harness, value) => {\n          return (await harness.getPosition()) === value;\n        });\n  }\n\n  /** Gets the position of the thumb inside the slider. */\n  async getPosition(): Promise<ThumbPosition> {\n    // Meant to mimic MDC's logic where `matSliderThumb` is treated as END.\n    const isStart = (await (await this.host()).getAttribute('matSliderStartThumb')) != null;\n    return isStart ? ThumbPosition.START : ThumbPosition.END;\n  }\n\n  /** Gets the value of the thumb. */\n  async getValue(): Promise<number> {\n    return (await (await this.host()).getProperty<number>('valueAsNumber'));\n  }\n\n  /** Sets the value of the thumb. */\n  async setValue(newValue: number): Promise<void> {\n    const input = await this.host();\n\n    // Since this is a range input, we can't simulate the user interacting with it so we set the\n    // value directly and dispatch a couple of fake events to ensure that everything fires.\n    await input.setInputValue(newValue + '');\n    await input.dispatchEvent('input');\n    await input.dispatchEvent('change');\n  }\n\n  /** Gets the current percentage value of the slider. */\n  async getPercentage(): Promise<number> {\n    const [value, min, max] = await parallel(() => [\n      this.getValue(),\n      this.getMinValue(),\n      this.getMaxValue()\n    ]);\n\n    return (value - min) / (max - min);\n  }\n\n  /** Gets the maximum value of the thumb. */\n  async getMaxValue(): Promise<number> {\n    return coerceNumberProperty(await (await this.host()).getProperty<number>('max'));\n  }\n\n  /** Gets the minimum value of the thumb. */\n  async getMinValue(): Promise<number> {\n    return coerceNumberProperty(await (await this.host()).getProperty<number>('min'));\n  }\n\n  /** Gets the text representation of the slider's value. */\n  async getDisplayValue(): Promise<string> {\n    return (await (await this.host()).getAttribute('aria-valuetext')) || '';\n  }\n\n  /** Whether the thumb is disabled. */\n  async isDisabled(): Promise<boolean> {\n    return (await this.host()).getProperty<boolean>('disabled');\n  }\n\n  /** Gets the name of the thumb. */\n  async getName(): Promise<string> {\n    return (await (await this.host()).getProperty<string>('name'));\n  }\n\n  /** Gets the id of the thumb. */\n  async getId(): Promise<string> {\n    return (await (await this.host()).getProperty<string>('id'));\n  }\n\n  /**\n   * Focuses the thumb and returns a promise that indicates when the\n   * action is complete.\n   */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /**\n   * Blurs the thumb and returns a promise that indicates when the\n   * action is complete.\n   */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Whether the thumb is focused. */\n  async isFocused(): Promise<boolean> {\n    return (await this.host()).isFocused();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {SliderHarnessFilters, ThumbPosition} from './slider-harness-filters';\nimport {MatSliderThumbHarness} from './slider-thumb-harness';\n\n/** Harness for interacting with a MDC mat-slider in tests. */\nexport class MatSliderHarness extends ComponentHarness {\n  static hostSelector = '.mat-mdc-slider';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatSliderHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which input instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: SliderHarnessFilters = {}): HarnessPredicate<MatSliderHarness> {\n    return new HarnessPredicate(MatSliderHarness, options)\n      .addOption('isRange', options.isRange, async (harness, value) => {\n        return (await harness.isRange()) === value;\n      });\n  }\n\n  /** Gets the start thumb of the slider (only applicable for range sliders). */\n  async getStartThumb(): Promise<MatSliderThumbHarness> {\n    if (!await this.isRange()) {\n      throw Error(\n        '`getStartThumb` is only applicable for range sliders. '\n        + 'Did you mean to use `getEndThumb`?'\n      );\n    }\n    return this.locatorFor(MatSliderThumbHarness.with({position: ThumbPosition.START}))();\n  }\n\n  /** Gets the thumb (for single point sliders), or the end thumb (for range sliders). */\n  async getEndThumb(): Promise<MatSliderThumbHarness> {\n    return this.locatorFor(MatSliderThumbHarness.with({position: ThumbPosition.END}))();\n  }\n\n  /** Gets whether the slider is a range slider. */\n  async isRange(): Promise<boolean> {\n    return (await (await this.host()).hasClass('mdc-slider--range'));\n  }\n\n  /** Gets whether the slider is disabled. */\n  async isDisabled(): Promise<boolean> {\n    return (await (await this.host()).hasClass('mdc-slider--disabled'));\n  }\n\n  /** Gets the value step increments of the slider. */\n  async getStep(): Promise<number> {\n    // The same step value is forwarded to both thumbs.\n    const startHost = await (await this.getEndThumb()).host();\n    return coerceNumberProperty(await startHost.getProperty<string>('step'));\n  }\n\n  /** Gets the maximum value of the slider. */\n  async getMaxValue(): Promise<number> {\n    return (await this.getEndThumb()).getMaxValue();\n  }\n\n  /** Gets the minimum value of the slider. */\n  async getMinValue(): Promise<number> {\n    const startThumb = await this.isRange() ? await this.getStartThumb() : await this.getEndThumb();\n    return startThumb.getMinValue();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './slider-harness';\nexport * from './slider-thumb-harness';\nexport * from './slider-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}