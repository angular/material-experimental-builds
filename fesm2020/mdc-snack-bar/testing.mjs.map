{"version":3,"file":"testing.mjs","sources":["../../../../../../../src/material-experimental/mdc-snack-bar/testing/snack-bar-harness.ts","../../../../../../../src/material-experimental/mdc-snack-bar/testing/public-api.ts","../../../../../../../src/material-experimental/mdc-snack-bar/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarnessConstructor, HarnessPredicate} from '@angular/cdk/testing';\nimport {\n  MatSnackBarHarness as BaseMatSnackBarHarness,\n  SnackBarHarnessFilters,\n} from '@angular/material/snack-bar/testing';\n\n/** Harness for interacting with an MDC-based mat-snack-bar in tests. */\nexport class MatSnackBarHarness extends BaseMatSnackBarHarness {\n  // Developers can provide a custom component or template for the snackbar. The canonical snack-bar\n  // parent is the \"MatSnackBarContainer\". We use `:not([mat-exit])` to exclude snack bars that\n  // are in the process of being dismissed, because the element only gets removed after the\n  // animation is finished and since it runs outside of Angular, we don't have a way of being\n  // notified when it's done.\n  /** The selector for the host element of a `MatSnackBar` instance. */\n  static override hostSelector = '.mat-mdc-snack-bar-container:not([mat-exit])';\n  protected override _messageSelector = '.mdc-snackbar__label';\n  protected override _actionButtonSelector = '.mat-mdc-snack-bar-action';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a snack bar with specific attributes.\n   * @param options Options for filtering which snack bar instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static override with<T extends BaseMatSnackBarHarness>(\n    this: ComponentHarnessConstructor<T>,\n    options: SnackBarHarnessFilters = {},\n  ): HarnessPredicate<T> {\n    return new HarnessPredicate(this, options);\n  }\n\n  protected override async _assertContentAnnotated() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './snack-bar-harness';\nexport {SnackBarHarnessFilters} from '@angular/material/snack-bar/testing';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":["BaseMatSnackBarHarness"],"mappings":";;;AAAA;;;;;;AAMG;AAQH;AACM,MAAO,kBAAmB,SAAQA,oBAAsB,CAAA;AAA9D,IAAA,WAAA,GAAA;;QAQqB,IAAgB,CAAA,gBAAA,GAAG,sBAAsB,CAAC;QAC1C,IAAqB,CAAA,qBAAA,GAAG,2BAA2B,CAAC;KAexE;AAbC;;;;AAIG;AACH,IAAA,OAAgB,IAAI,CAElB,OAAA,GAAkC,EAAE,EAAA;AAEpC,QAAA,OAAO,IAAI,gBAAgB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;KAC5C;IAEkB,MAAM,uBAAuB,GAAA,GAAK;;AAtBrD;AACA;AACA;AACA;AACA;AACA;AACgB,kBAAY,CAAA,YAAA,GAAG,8CAA8C;;ACtB/E;;;;;;AAMG;;ACNH;;;;;;AAMG;;;;"}