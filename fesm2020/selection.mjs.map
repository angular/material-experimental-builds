{"version":3,"file":"selection.mjs","sources":["../../../../../../src/material-experimental/selection/selection.ts","../../../../../../src/material-experimental/selection/select-all.ts","../../../../../../src/material-experimental/selection/selection-toggle.ts","../../../../../../src/material-experimental/selection/selection-column.ts","../../../../../../src/material-experimental/selection/row-selection.ts","../../../../../../src/material-experimental/selection/selection-module.ts","../../../../../../src/material-experimental/selection/public-api.ts","../../../../../../src/material-experimental/selection/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkSelection, SelectionChange} from '@angular/cdk-experimental/selection';\nimport {Directive, Input, Output, EventEmitter} from '@angular/core';\n\n/**\n * Manages the selection states of the items and provides methods to check and update the selection\n * states.\n * It must be applied to the parent element if `matSelectionToggle`, `matSelectAll`,\n * `matRowSelection` and `matSelectionColumn` are applied.\n */\n@Directive({\n  selector: '[matSelection]',\n  exportAs: 'matSelection',\n  providers: [{provide: CdkSelection, useExisting: MatSelection}],\n})\n// tslint:disable-next-line: coercion-types\nexport class MatSelection<T> extends CdkSelection<T> {\n  /** Whether to support multiple selection */\n  @Input('matSelectionMultiple')\n  override get multiple(): boolean {\n    return this._multiple;\n  }\n  override set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n\n  /** Emits when selection changes. */\n  @Output('matSelectionChange') override readonly change = new EventEmitter<SelectionChange<T>>();\n}\n\n/**\n * Represents the change in the selection set.\n */\nexport {SelectionChange} from '@angular/cdk-experimental/selection';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkSelectAll} from '@angular/cdk-experimental/selection';\nimport {Directive} from '@angular/core';\n\n/**\n * Makes the element a select-all toggle.\n *\n * Must be used within a parent `MatSelection` directive. It toggles the selection states\n * of all the selection toggles connected with the `MatSelection` directive.\n * If the element implements `ControlValueAccessor`, e.g. `MatCheckbox`, the directive\n * automatically connects it with the select-all state provided by the `MatSelection` directive. If\n * not, use `checked` to get the checked state, `indeterminate` to get the indeterminate state,\n * and `toggle()` to change the selection state.\n */\n@Directive({\n  selector: '[matSelectAll]',\n  exportAs: 'matSelectAll',\n  providers: [{provide: CdkSelectAll, useExisting: MatSelectAll}],\n})\nexport class MatSelectAll<T> extends CdkSelectAll<T> {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {CdkSelectionToggle} from '@angular/cdk-experimental/selection';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Makes the element a selection toggle.\n *\n * Must be used within a parent `MatSelection` directive.\n * Must be provided with the value. If `trackBy` is used on `MatSelection`, the index of the value\n * is required. If the element implements `ControlValueAccessor`, e.g. `MatCheckbox`, the directive\n * automatically connects it with the selection state provided by the `MatSelection` directive. If\n * not, use `checked$` to get the checked state of the value, and `toggle()` to change the selection\n * state.\n */\n@Directive({\n  selector: '[matSelectionToggle]',\n  exportAs: 'matSelectionToggle',\n  providers: [{provide: CdkSelectionToggle, useExisting: MatSelectionToggle}],\n})\n// tslint:disable-next-line: coercion-types\nexport class MatSelectionToggle<T> extends CdkSelectionToggle<T> {\n  /** The value that is associated with the toggle */\n  @Input('matSelectionToggleValue') override value: T;\n\n  /** The index of the value in the list. Required when used with `trackBy` */\n  @Input('matSelectionToggleIndex')\n  override get index(): number | undefined {\n    return this._index;\n  }\n  override set index(index: number | undefined) {\n    // TODO: when we remove support for ViewEngine, change this setter to an input\n    // alias in the decorator metadata.\n    this._index = coerceNumberProperty(index);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatCellDef, MatColumnDef, MatHeaderCellDef, MatTable} from '@angular/material/table';\nimport {\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewChild,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\n\nimport {MatSelection} from './selection';\n\n/**\n * Column that adds row selecting checkboxes and a select-all checkbox if `matSelectionMultiple` is\n * `true`.\n *\n * Must be used within a parent `MatSelection` directive.\n */\n@Component({\n  selector: 'mat-selection-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef class=\"mat-selection-column-header\">\n        <mat-checkbox *ngIf=\"selection.multiple\"\n            matSelectAll\n            #allToggler=\"matSelectAll\"\n            [indeterminate]=\"allToggler.indeterminate | async\"></mat-checkbox>\n      </th>\n      <td mat-cell *matCellDef=\"let row; let i = $index\" class=\"mat-selection-column-cell\">\n        <mat-checkbox\n            matSelectionToggle\n            [matSelectionToggleValue]=\"row\"\n            [matSelectionToggleIndex]=\"i\"></mat-checkbox>\n      </td>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['selection-column.css'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSelectionColumn<T> implements OnInit, OnDestroy {\n  /** Column name that should be used to reference this column. */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n  set name(name: string) {\n    this._name = name;\n\n    this._syncColumnDefName();\n  }\n  private _name: string;\n\n  @ViewChild(MatColumnDef, {static: true}) private readonly _columnDef: MatColumnDef;\n  @ViewChild(MatCellDef, {static: true}) private readonly _cell: MatCellDef;\n  @ViewChild(MatHeaderCellDef, {static: true}) private readonly _headerCell: MatHeaderCellDef;\n\n  constructor(\n    @Optional() @Inject(MatTable) private _table: MatTable<T>,\n    @Optional() @Inject(MatSelection) readonly selection: MatSelection<T>,\n  ) {}\n\n  ngOnInit() {\n    if (!this.selection && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('MatSelectionColumn: missing MatSelection in the parent');\n    }\n\n    this._syncColumnDefName();\n\n    if (this._table) {\n      this._columnDef.cell = this._cell;\n      this._columnDef.headerCell = this._headerCell;\n      this._table.addColumnDef(this._columnDef);\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw Error('MatSelectionColumn: missing parent table');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._table) {\n      this._table.removeColumnDef(this._columnDef);\n    }\n  }\n\n  private _syncColumnDefName() {\n    if (this._columnDef) {\n      this._columnDef.name = this._name;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {CdkRowSelection} from '@angular/cdk-experimental/selection';\nimport {Input, Directive} from '@angular/core';\n\n/**\n * Applies `mat-selected` class and `aria-selected` to an element.\n *\n * Must be used within a parent `MatSelection` directive.\n * Must be provided with the value. The index is required if `trackBy` is used on the `CdkSelection`\n * directive.\n */\n@Directive({\n  selector: '[matRowSelection]',\n  host: {\n    '[class.mat-selected]': '_selection.isSelected(this.value, this.index)',\n    '[attr.aria-selected]': '_selection.isSelected(this.value, this.index)',\n  },\n  providers: [{provide: CdkRowSelection, useExisting: MatRowSelection}],\n})\n// tslint:disable-next-line: coercion-types\nexport class MatRowSelection<T> extends CdkRowSelection<T> {\n  /** The value that is associated with the row */\n  @Input('matRowSelectionValue') override value: T;\n\n  /** The index of the value in the list. Required when used with `trackBy` */\n  @Input('matRowSelectionIndex')\n  override get index(): number | undefined {\n    return this._index;\n  }\n  override set index(index: number | undefined) {\n    // TODO: when we remove support for ViewEngine, change this setter to an input\n    // alias in the decorator metadata.\n    this._index = coerceNumberProperty(index);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(yifange): Move the table-specific code to a separate module from the other selection\n// behaviors once we move it out of experiemental.\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatSelectAll} from './select-all';\nimport {MatSelection} from './selection';\nimport {MatSelectionToggle} from './selection-toggle';\nimport {MatSelectionColumn} from './selection-column';\nimport {MatRowSelection} from './row-selection';\n\n@NgModule({\n  imports: [CommonModule, MatTableModule, MatCheckboxModule],\n  exports: [MatSelectAll, MatSelection, MatSelectionToggle, MatSelectionColumn, MatRowSelection],\n  declarations: [\n    MatSelectAll,\n    MatSelection,\n    MatSelectionToggle,\n    MatSelectionColumn,\n    MatRowSelection,\n  ],\n})\nexport class MatSelectionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './selection';\nexport * from './select-all';\nexport * from './selection-toggle';\nexport * from './selection-column';\nexport * from './row-selection';\nexport * from './selection-module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}