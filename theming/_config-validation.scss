@use 'sass:list';
@use 'sass:map';
@use '@angular/material' as mat;

/// Validates a theme config.
/// @param {Map} $config The config to test.
/// @return {List} null if no error, else the error message
@function validate-theme-config($config) {
  $err: mat.private-validate-type($config, 'map', 'null');
  @if $err {
    @return (#{'$config'} #{'should be a color configuration object. Got:'} $config);
  }
  $err: mat.private-validate-allowed-values(map.keys($config or ()), color, typography, density);
  @if $err {
    @return (#{'$config'} #{'has unexpected properties:'} $err);
  }
  $err: validate-color-config(map.get($config, color));
  @if $err {
    @return list.set-nth($err, 1, #{'#{list.nth($err, 1)}.color'});
  }
  $err: validate-typography-config(map.get($config, typography));
  @if $err {
    @return list.set-nth($err, 1, #{'#{list.nth($err, 1)}.typography'});
  }
  $err: validate-density-config(map.get($config, density));
  @if $err {
    @return list.set-nth($err, 1, #{'#{list.nth($err, 1)}.density'});
  }
  @return null;
}

/// Validates a theme color config.
/// @param {Map} $config The config to test.
/// @return {List} null if no error, else the error message
@function validate-color-config($config) {
  $err: mat.private-validate-type($config, 'map', 'null');
  @if $err {
    @return (#{'$config'} #{'should be a color configuration object. Got:'} $config);
  }
  $err: mat.private-validate-allowed-values(
      map.keys($config or ()), theme-type, primary, secondary, tertiary);
  @if $err {
    @return (#{'$config'} #{'has unexpected properties:'} $err);
  }
  @return null;
}

/// Validates a theme typography config.
/// @param {Map} $config The config to test.
/// @return {List} null if no error, else the error message
@function validate-typography-config($config) {
  $err: mat.private-validate-type($config, 'map', 'null');
  @if $err {
    @return (#{'$config'} #{'should be a typography configuration object. Got:'} $config);
  }
  $err: mat.private-validate-allowed-values(
      map.keys($config or ()), brand-family, plain-family, bold-weight, medium-weight,
      regular-weight);
  @if $err {
    @return (#{'$config'} #{'has unexpected properties:'} $err);
  }
  @return null;
}

/// Validates a theme density config.
/// @param {Map} $config The config to test.
/// @return {List} null if no error, else the error message
@function validate-density-config($config) {
  $err: mat.private-validate-type($config, 'map', 'null');
  @if $err {
    @return (#{'$config'} #{'should be a density configuration object. Got:'} $config);
  }
  $err: mat.private-validate-allowed-values(map.keys($config or ()), scale);
  @if $err {
    @return (#{'$config'} #{'has unexpected properties:'} $err);
  }
  @return null;
}
