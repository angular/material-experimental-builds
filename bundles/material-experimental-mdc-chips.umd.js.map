{"version":3,"file":"material-experimental-mdc-chips.umd.js","sources":["../../../../../external/npm/node_modules/tslib/tslib.es6.js","../../../../../src/material-experimental/mdc-chips/chip-icons.ts","../../../../../src/material-experimental/mdc-chips/chip.ts","../../../../../src/material-experimental/mdc-chips/chip-option.ts","../../../../../src/material-experimental/mdc-chips/chip-edit-input.ts","../../../../../src/material-experimental/mdc-chips/chip-row.ts","../../../../../src/material-experimental/mdc-chips/chip-set.ts","../../../../../src/material-experimental/mdc-chips/chip-listbox.ts","../../../../../src/material-experimental/mdc-chips/grid-key-manager.ts","../../../../../src/material-experimental/mdc-chips/grid-focus-key-manager.ts","../../../../../src/material-experimental/mdc-chips/chip-grid.ts","../../../../../src/material-experimental/mdc-chips/chip-default-options.ts","../../../../../src/material-experimental/mdc-chips/chip-input.ts","../../../../../src/material-experimental/mdc-chips/module.ts","../../../../../src/material-experimental/mdc-chips/public-api.ts","../../../../../src/material-experimental/mdc-chips/index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, NumberInput} from '@angular/cdk/coercion';\nimport {ChangeDetectorRef, Directive, ElementRef, InjectionToken, OnDestroy} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material-experimental/mdc-core';\nimport {MDCChipTrailingActionAdapter, MDCChipTrailingActionFoundation} from '@material/chips';\nimport {Subject} from 'rxjs';\n\n\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_CHIP_AVATAR = new InjectionToken<MatChipAvatar>('MatChipAvatar');\n\n/**\n * Directive to add CSS classes to chip leading icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {\n    'class': 'mat-mdc-chip-avatar mdc-chip__icon mdc-chip__icon--leading',\n    'role': 'img'\n  },\n  providers: [{provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar}],\n})\nexport class MatChipAvatar {\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>) {}\n\n  /** Sets whether the given CSS class should be applied to the leading icon. */\n  setClass(cssClass: string, active: boolean) {\n    this._elementRef.nativeElement.classList.toggle(cssClass, active);\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_CHIP_TRAILING_ICON =\n  new InjectionToken<MatChipTrailingIcon>('MatChipTrailingIcon');\n\n/**\n * Directive to add CSS classes to and configure attributes for chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {\n    'class':\n        'mat-mdc-chip-trailing-icon mdc-chip__icon mdc-chip__icon--trailing',\n    'tabindex': '-1',\n    'aria-hidden': 'true',\n  },\n  providers: [{provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon}],\n})\nexport class MatChipTrailingIcon implements OnDestroy {\n  private _foundation: MDCChipTrailingActionFoundation;\n  private _adapter: MDCChipTrailingActionAdapter = {\n    focus: () => this._elementRef.nativeElement.focus(),\n    getAttribute: (name: string) =>\n        this._elementRef.nativeElement.getAttribute(name),\n    setAttribute:\n        (name: string, value: string) => {\n          this._elementRef.nativeElement.setAttribute(name, value);\n        },\n    // TODO(crisbeto): there's also a `trigger` parameter that the chip isn't\n    // handling yet. Consider passing it along once MDC start using it.\n    notifyInteraction:\n        () => {\n          // TODO(crisbeto): uncomment this code once we've inverted the\n          // dependency on `MatChip`. this._chip._notifyInteraction();\n        },\n\n    // TODO(crisbeto): there's also a `key` parameter that the chip isn't\n    // handling yet. Consider passing it along once MDC start using it.\n    notifyNavigation:\n        () => {\n          // TODO(crisbeto): uncomment this code once we've inverted the\n          // dependency on `MatChip`. this._chip._notifyNavigation();\n        }\n  };\n\n  constructor(\n      public _elementRef: ElementRef,\n      // TODO(crisbeto): currently the chip needs a reference to the trailing\n      // icon for the deprecated `setTrailingActionAttr` method. Until the\n      // method is removed, we can't use the chip here, because it causes a\n      // circular import. private _chip: MatChip\n  ) {\n    this._foundation = new MDCChipTrailingActionFoundation(this._adapter);\n  }\n\n  ngOnDestroy() {\n    this._foundation.destroy();\n  }\n\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Sets an attribute on the icon. */\n  setAttribute(name: string, value: string) {\n    this._elementRef.nativeElement.setAttribute(name, value);\n  }\n\n  isNavigable() {\n    return this._foundation.isNavigable();\n  }\n}\n\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_CHIP_REMOVE = new InjectionToken<MatChipRemove>('MatChipRemove');\n\n/**\n * Boilerplate for applying mixins to MatChipRemove.\n * @docs-private\n */\nclass MatChipRemoveBase extends MatChipTrailingIcon {\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n}\n\nconst _MatChipRemoveMixinBase:\n  CanDisableCtor &\n  HasTabIndexCtor &\n  typeof MatChipRemoveBase =\n    mixinTabIndex(mixinDisabled(MatChipRemoveBase), 0);\n\n/**\n * Directive to remove the parent chip when the trailing icon is clicked or\n * when the ENTER key is pressed on it.\n *\n * Recommended for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n * ```\n * <mat-chip>\n *   <mat-icon matChipRemove>cancel</mat-icon>\n * </mat-chip>\n * ```\n */\n@Directive({\n  selector: '[matChipRemove]',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    'class': `mat-mdc-chip-remove mat-mdc-chip-trailing-icon mat-mdc-focus-indicator\n        mdc-chip__icon mdc-chip__icon--trailing`,\n    '[tabIndex]': 'tabIndex',\n    'role': 'button',\n    '(click)': 'interaction.next($event)',\n    '(keydown)': 'interaction.next($event)',\n\n    // We need to remove this explicitly, because it gets inherited from MatChipTrailingIcon.\n    '[attr.aria-hidden]': 'null',\n  },\n  providers: [{provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove}],\n})\nexport class MatChipRemove extends _MatChipRemoveMixinBase implements CanDisable, HasTabIndex {\n  /**\n   * Emits when the user interacts with the icon.\n   * @docs-private\n   */\n  interaction: Subject<MouseEvent | KeyboardEvent> = new Subject<MouseEvent | KeyboardEvent>();\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n\n    if (elementRef.nativeElement.nodeName === 'BUTTON') {\n      elementRef.nativeElement.setAttribute('type', 'button');\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_tabIndex: NumberInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty, NumberInput} from '@angular/cdk/coercion';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleAnimationConfig,\n  RippleGlobalOptions,\n} from '@angular/material-experimental/mdc-core';\nimport {MDCChipAdapter, MDCChipFoundation} from '@material/chips';\nimport {numbers} from '@material/ripple';\nimport {SPACE, ENTER, hasModifierKey} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {\n  MatChipAvatar,\n  MatChipTrailingIcon,\n  MatChipRemove,\n  MAT_CHIP_AVATAR,\n  MAT_CHIP_TRAILING_ICON, MAT_CHIP_REMOVE\n} from './chip-icons';\n\n\nlet uid = 0;\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Configuration for the ripple animation. */\nconst RIPPLE_ANIMATION_CONFIG: RippleAnimationConfig = {\n  enterDuration: numbers.DEACTIVATION_TIMEOUT_MS,\n  exitDuration: numbers.FG_DEACTIVATION_MS\n};\n\n/**\n * Directive to add MDC CSS to non-basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-chip, mat-chip-option, mat-chip-row, [mat-chip], [mat-chip-option],\n    [mat-chip-row]`,\n  host: {'class': 'mat-mdc-chip mdc-chip'}\n})\nexport class MatChipCssInternalOnly { }\n\n/**\n * Boilerplate for applying mixins to MatChip.\n * @docs-private\n */\nabstract class MatChipBase {\n  abstract disabled: boolean;\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase:\n  CanColorCtor &\n  CanDisableRippleCtor &\n  HasTabIndexCtor &\n  typeof MatChipBase =\n    mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n\n/**\n * Material design styled Chip base component. Used inside the MatChipSet component.\n *\n * Extended by MatChipOption and MatChipRow for different interaction patterns.\n */\n@Component({\n  selector: 'mat-basic-chip, mat-chip',\n  inputs: ['color', 'disableRipple'],\n  exportAs: 'matChip',\n  templateUrl: 'chip.html',\n  styleUrls: ['chips.css'],\n  host: {\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-mdc-basic-chip]': '_isBasicChip',\n    '[class.mat-mdc-standard-chip]': '!_isBasicChip',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChip extends _MatChipMixinBase implements AfterContentInit, AfterViewInit,\n  CanColor, CanDisableRipple, HasTabIndex, OnDestroy {\n  /** The ripple animation configuration to use for the chip. */\n  readonly _rippleAnimation: RippleAnimationConfig = RIPPLE_ANIMATION_CONFIG;\n\n  /** Whether the ripple is centered on the chip. */\n  readonly _isRippleCentered = false;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blurred. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  readonly REMOVE_ICON_HANDLED_KEYS: ReadonlySet<number> = new Set([SPACE, ENTER]);\n\n  /** Whether this chip is a basic (unstyled) chip. */\n  readonly _isBasicChip: boolean;\n\n  /** Whether the chip has focus. */\n  protected _hasFocusInternal = false;\n\n    /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(mmalerba): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('transitionend', ['$event'])\n  _handleTransitionEnd(event: TransitionEvent) {\n    this._chipFoundation.handleTransitionEnd(event);\n  }\n\n  _hasFocus() {\n    return this._hasFocusInternal;\n  }\n\n  /** Default unique id for the chip. */\n  private _uniqueId = `mat-mdc-chip-${uid++}`;\n\n  /** A unique id for the chip. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    if (this.removeIcon) {\n      this.removeIcon.disabled = value;\n    }\n  }\n  protected _disabled: boolean = false;\n\n  private _textElement!: HTMLElement;\n\n  /** The value of the chip. Defaults to the content inside the mdc-chip__text element. */\n  @Input()\n  get value(): any {\n    return this._value !== undefined\n      ? this._value\n      : this._textElement.textContent!.trim();\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /**\n   * Colors the chip for emphasis as if it were selected.\n   */\n  @Input()\n  get highlighted(): boolean { return this._highlighted; }\n  set highlighted(value: boolean) {\n    this._highlighted = coerceBooleanProperty(value);\n  }\n  protected _highlighted: boolean = false;\n\n  /** Emitted when the user interacts with the remove icon. */\n  @Output() removeIconInteraction = new EventEmitter<string>();\n\n  /** Emitted when the user interacts with the chip. */\n  @Output() interaction = new EventEmitter<string>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The MDC foundation containing business logic for MDC chip. */\n  _chipFoundation: MDCChipFoundation;\n\n  /** The unstyled chip selector for this component. */\n  protected basicChipAttrName = 'mat-basic-chip';\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /** The chip's leading icon. */\n  @ContentChild(MAT_CHIP_AVATAR) leadingIcon: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MAT_CHIP_TRAILING_ICON) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's trailing remove icon. */\n  @ContentChild(MAT_CHIP_REMOVE) removeIcon: MatChipRemove;\n\n  /** Reference to the MatRipple instance of the chip. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n /**\n  * Implementation of the MDC chip adapter interface.\n  * These methods are called by the chip foundation.\n  */\n  protected _chipAdapter: MDCChipAdapter = {\n    addClass: (className) => this._setMdcClass(className, true),\n    removeClass: (className) => this._setMdcClass(className, false),\n    hasClass: (className) =>\n        this._elementRef.nativeElement.classList.contains(className),\n    addClassToLeadingIcon: (className) =>\n        this.leadingIcon.setClass(className, true),\n    removeClassFromLeadingIcon: (className) =>\n        this.leadingIcon.setClass(className, false),\n    eventTargetHasClass:\n        (target: EventTarget|null, className: string) => {\n          // We need to null check the `classList`, because IE and Edge don't\n          // support it on SVG elements and Edge seems to throw for ripple\n          // elements, because they're outside the DOM.\n          return (target && (target as Element).classList) ?\n              (target as Element).classList.contains(className) :\n              false;\n        },\n    notifyInteraction: () => this._notifyInteraction(),\n    notifySelection:\n        () => {\n          // No-op. We call dispatchSelectionEvent ourselves in MatChipOption,\n          // because we want to specify whether selection occurred via user\n          // input.\n        },\n    notifyNavigation: () => this._notifyNavigation(),\n    notifyTrailingIconInteraction: () =>\n        this.removeIconInteraction.emit(this.id),\n    notifyRemoval:\n        () => {\n          this.removed.emit({chip: this});\n\n          // When MDC removes a chip it just transitions it to `width: 0px`\n          // which means that it's still in the DOM and it's still focusable.\n          // Make it `display: none` so users can't tab into it.\n          this._elementRef.nativeElement.style.display = 'none';\n        },\n    notifyEditStart:\n        () => {\n          this._onEditStart();\n          this._changeDetectorRef.markForCheck();\n        },\n    notifyEditFinish:\n        () => {\n          this._onEditFinish();\n          this._changeDetectorRef.markForCheck();\n        },\n    getComputedStyleValue:\n        propertyName => {\n          // This function is run when a chip is removed so it might be\n          // invoked during server-side rendering. Add some extra checks just in\n          // case.\n          if (typeof window !== 'undefined' && window) {\n            const getComputedStyle =\n                window.getComputedStyle(this._elementRef.nativeElement);\n            return getComputedStyle.getPropertyValue(propertyName);\n          }\n          return '';\n        },\n    setStyleProperty:\n        (propertyName: string, value: string) => {\n          this._elementRef.nativeElement.style.setProperty(propertyName, value);\n        },\n    hasLeadingIcon: () => !!this.leadingIcon,\n    isTrailingActionNavigable:\n        () => {\n          if (this.trailingIcon) {\n            return this.trailingIcon.isNavigable();\n          }\n          return false;\n        },\n    isRTL: () => !!this._dir && this._dir.value === 'rtl',\n    focusPrimaryAction:\n        () => {\n          // Angular Material MDC chips fully manage focus. TODO: Managing focus\n          // and handling keyboard events was added by MDC after our\n          // implementation; consider consolidating.\n        },\n    focusTrailingAction: () => {},\n    removeTrailingActionFocus: () => {},\n    setPrimaryActionAttr:\n        (name: string, value: string) => {\n          // MDC is currently using this method to set aria-checked on choice\n          // and filter chips, which in the MDC templates have role=\"checkbox\"\n          // and role=\"radio\" respectively. We have role=\"option\" on those chips\n          // instead, so we do not want aria-checked. Since we also manage the\n          // tabindex ourselves, we don't allow MDC to set it.\n          if (name === 'aria-checked' || name === 'tabindex') {\n            return;\n          }\n          this._elementRef.nativeElement.setAttribute(name, value);\n        },\n    // The 2 functions below are used by the MDC ripple, which we aren't using,\n    // so they will never be called\n    getRootBoundingClientRect: () =>\n        this._elementRef.nativeElement.getBoundingClientRect(),\n    getCheckmarkBoundingClientRect: () => null,\n    getAttribute: (attr) => this._elementRef.nativeElement.getAttribute(attr),\n  };\n\n  constructor(\n      public _changeDetectorRef: ChangeDetectorRef,\n      readonly _elementRef: ElementRef, protected _ngZone: NgZone,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n        private _globalRippleOptions?: RippleGlobalOptions) {\n    super(_elementRef);\n    this._chipFoundation = new MDCChipFoundation(this._chipAdapter);\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n    this._isBasicChip = _elementRef.nativeElement.hasAttribute(this.basicChipAttrName) ||\n                        _elementRef.nativeElement.tagName.toLowerCase() === this.basicChipAttrName;\n  }\n\n  ngAfterContentInit() {\n    this._initRemoveIcon();\n  }\n\n  ngAfterViewInit() {\n    this._chipFoundation.init();\n    this._textElement = this._elementRef.nativeElement.querySelector('.mdc-chip__text');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._chipFoundation.destroy();\n  }\n\n  /** Sets up the remove icon chip foundation, and subscribes to remove icon events. */\n  _initRemoveIcon() {\n    if (this.removeIcon) {\n      this._chipFoundation.setShouldRemoveOnTrailingIconClick(true);\n      this._listenToRemoveIconInteraction();\n      this.removeIcon.disabled = this.disabled;\n    }\n  }\n\n  /** Handles interaction with the remove icon. */\n  _listenToRemoveIconInteraction() {\n    this.removeIcon.interaction\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(event => {\n          // The MDC chip foundation calls stopPropagation() for any trailing icon interaction\n          // event, even ones it doesn't handle, so we want to avoid passing it keyboard events\n          // for which we have a custom handler. Note that we assert the type of the event using\n          // the `type`, because `instanceof KeyboardEvent` can throw during server-side rendering.\n          const isKeyboardEvent = event.type.startsWith('key');\n\n          if (this.disabled || (isKeyboardEvent &&\n              !this.REMOVE_ICON_HANDLED_KEYS.has((event as KeyboardEvent).keyCode))) {\n            return;\n          }\n\n          this._chipFoundation.handleTrailingActionInteraction();\n\n          if (isKeyboardEvent && !hasModifierKey(event as KeyboardEvent)) {\n            const keyCode = (event as KeyboardEvent).keyCode;\n\n            // Prevent default space and enter presses so we don't scroll the page or submit forms.\n            if (keyCode === SPACE || keyCode === ENTER) {\n              event.preventDefault();\n            }\n          }\n        });\n  }\n\n  /**\n   * Allows for programmatic removal of the chip.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this._chipFoundation.beginExit();\n    }\n  }\n\n  /** Sets whether the given CSS class should be applied to the MDC chip. */\n  private _setMdcClass(cssClass: string, active: boolean) {\n      const classes = this._elementRef.nativeElement.classList;\n      active ? classes.add(cssClass) : classes.remove(cssClass);\n      this._changeDetectorRef.markForCheck();\n  }\n\n  /** Forwards interaction events to the MDC chip foundation. */\n  _handleInteraction(event: MouseEvent | KeyboardEvent | FocusEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    if (event.type === 'click') {\n      this._chipFoundation.handleClick();\n      return;\n    }\n\n    if (event.type === 'dblclick') {\n      this._chipFoundation.handleDoubleClick();\n    }\n\n    if (event.type === 'keydown') {\n      this._chipFoundation.handleKeydown(event as KeyboardEvent);\n      return;\n    }\n\n    if (event.type === 'focusout') {\n      this._chipFoundation.handleFocusOut(event as FocusEvent);\n    }\n\n    if (event.type === 'focusin') {\n      this._chipFoundation.handleFocusIn(event as FocusEvent);\n    }\n  }\n\n  /** Whether or not the ripple should be disabled. */\n  _isRippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._animationsDisabled ||\n           this._isBasicChip || !!this._globalRippleOptions?.disabled;\n  }\n\n  _notifyInteraction() {\n    this.interaction.emit(this.id);\n  }\n\n  _notifyNavigation() {\n    // TODO: This is a new feature added by MDC. Consider exposing it to users\n    // in the future.\n  }\n\n  /** Overridden by MatChipRow. */\n  protected _onEditStart() {}\n\n  /** Overridden by MatChipRow. */\n  protected _onEditFinish() {}\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_removable: BooleanInput;\n  static ngAcceptInputType_highlighted: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_tabIndex: NumberInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  AfterContentInit\n} from '@angular/core';\nimport {chipCssClasses} from '@material/chips';\nimport {take} from 'rxjs/operators';\nimport {MatChip} from './chip';\n\n\n/** Event object emitted by MatChipOption when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChipOption,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n/**\n * An extension of the MatChip component that supports chip selection.\n * Used with MatChipListbox.\n */\n@Component({\n  selector: 'mat-basic-chip-option, mat-chip-option',\n  templateUrl: 'chip-option.html',\n  styleUrls: ['chips.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'option',\n    'class': 'mat-mdc-focus-indicator mat-mdc-chip-option',\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-mdc-chip-selected]': 'selected',\n    '[id]': 'id',\n    '[tabIndex]': 'tabIndex',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_click($event)',\n    '(keydown)': '_keydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n  providers: [{provide: MatChip, useExisting: MatChipOption}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipOption extends MatChip implements AfterContentInit {\n\n  /** Whether the chip list is selectable. */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /**\n   * Whether or not the chip is selectable.\n   *\n   * When a chip is not selectable, changes to its selected state are always\n   * ignored. By default an option chip is selectable, and it becomes\n   * non-selectable if its parent chip list is not selectable.\n   */\n  @Input()\n  get selectable(): boolean {\n    return this._selectable && this.chipListSelectable;\n  }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean {\n    return this._chipFoundation.isSelected();\n  }\n  set selected(value: boolean) {\n    if (!this.selectable) {\n      return;\n    }\n    const coercedValue = coerceBooleanProperty(value);\n    if (coercedValue != this._chipFoundation.isSelected()) {\n      this._chipFoundation.setSelected(coerceBooleanProperty(value));\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  /** The unstyled chip selector for this component. */\n  protected basicChipAttrName = 'mat-basic-chip-option';\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n\n    if (this.selected && this.leadingIcon) {\n      this.leadingIcon.setClass(chipCssClasses.HIDDEN_LEADING_ICON, true);\n    }\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this.selectable) {\n      return;\n    } else if (!this.selected) {\n      this._chipFoundation.setSelected(true);\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (!this.selectable) {\n      return;\n    } else if (this.selected) {\n      this._chipFoundation.setSelected(false);\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Selects this chip and emits userInputSelection event */\n  selectViaInteraction(): void {\n    if (!this.selectable) {\n      return;\n    } else if (!this.selected) {\n      this._chipFoundation.setSelected(true);\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    if (!this.selectable) {\n      return this.selected;\n    }\n\n    this._chipFoundation.setSelected(!this.selected);\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Emits a selection change event. */\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this.selected\n    });\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    if (!this._hasFocus()) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocusInternal = true;\n  }\n\n  /** Resets the state of the chip when it loses focus. */\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocusInternal = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n\n  /** Handles click events on the chip. */\n  _click(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      this._handleInteraction(event);\n      event.stopPropagation();\n    }\n  }\n\n  /** Handles custom key presses. */\n  _keydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case SPACE:\n        this.toggleSelected(true);\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      default:\n        this._handleInteraction(event);\n    }\n  }\n\n  static ngAcceptInputType_selectable: BooleanInput;\n  static ngAcceptInputType_selected: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * A directive that makes a span editable and exposes functions to modify and retrieve the\n * element's contents.\n */\n@Directive({\n  selector: 'span[matChipEditInput]',\n  host: {\n    'class': 'mdc-chip__primary-action mat-chip-edit-input',\n    'role': 'textbox',\n    'tabindex': '-1',\n    'contenteditable': 'true',\n  },\n})\nexport class MatChipEditInput {\n  constructor(\n    private readonly _elementRef: ElementRef,\n    @Inject(DOCUMENT) private readonly _document: any) {}\n\n  initialize(initialValue: string) {\n    this.getNativeElement().focus();\n    this.setValue(initialValue);\n  }\n\n  getNativeElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  setValue(value: string) {\n    this.getNativeElement().innerText = value;\n    this._moveCursorToEndOfInput();\n  }\n\n  getValue(): string {\n    return this.getNativeElement().textContent || '';\n  }\n\n  private _moveCursorToEndOfInput() {\n    const range = this._document.createRange();\n    range.selectNodeContents(this.getNativeElement());\n    range.collapse(false);\n    const sel = window.getSelection()!;\n    sel.removeAllRanges();\n    sel.addRange(range);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE} from '@angular/cdk/keycodes';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  RippleGlobalOptions,\n} from '@angular/material-experimental/mdc-core';\nimport {MatChip, MatChipEvent} from './chip';\nimport {MatChipEditInput} from './chip-edit-input';\nimport {GridKeyManagerRow} from './grid-key-manager';\n\n\n/** Represents an event fired on an individual `mat-chip` when it is edited. */\nexport interface MatChipEditedEvent extends MatChipEvent {\n  /** The final edit value. */\n  value: string;\n}\n\n/**\n * An extension of the MatChip component used with MatChipGrid and\n * the matChipInputFor directive.\n */\n@Component({\n  selector: 'mat-chip-row, mat-basic-chip-row',\n  templateUrl: 'chip-row.html',\n  styleUrls: ['chips.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'row',\n    'class': 'mat-mdc-chip-row',\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mdc-chip--editable]': 'editable',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[tabIndex]': 'tabIndex',\n    '(mousedown)': '_mousedown($event)',\n    '(dblclick)': '_dblclick($event)',\n    '(keydown)': '_keydown($event)',\n    '(focusin)': '_focusin($event)',\n    '(focusout)': '_focusout($event)'\n  },\n  providers: [{provide: MatChip, useExisting: MatChipRow}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipRow extends MatChip implements AfterContentInit, AfterViewInit,\n  GridKeyManagerRow<HTMLElement> {\n  protected basicChipAttrName = 'mat-basic-chip-row';\n\n  @Input() editable: boolean = false;\n\n  /** Emitted when the chip is edited. */\n  @Output() readonly edited: EventEmitter<MatChipEditedEvent> =\n      new EventEmitter<MatChipEditedEvent>();\n\n  /**\n   * The focusable wrapper element in the first gridcell, which contains all\n   * chip content other than the remove icon.\n   */\n  @ViewChild('chipContent') chipContent: ElementRef;\n\n  /** The default chip edit input that is used if none is projected into this chip row. */\n  @ViewChild(MatChipEditInput) defaultEditInput?: MatChipEditInput;\n\n  /** The projected chip edit input. */\n  @ContentChild(MatChipEditInput) contentEditInput?: MatChipEditInput;\n\n  /** The focusable grid cells for this row. Implemented as part of GridKeyManagerRow. */\n  cells!: HTMLElement[];\n\n  constructor(\n    @Inject(DOCUMENT) private readonly _document: any,\n    changeDetectorRef: ChangeDetectorRef,\n    elementRef: ElementRef, ngZone: NgZone,\n    @Optional() dir: Directionality,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n    @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n        globalRippleOptions?: RippleGlobalOptions) {\n    super(changeDetectorRef, elementRef, ngZone, dir, animationMode, globalRippleOptions);\n  }\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n\n    if (this.removeIcon) {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      setTimeout(() => {\n        // removeIcon has tabIndex 0 for regular chips, but should only be focusable by\n        // the GridFocusKeyManager for row chips.\n        this.removeIcon.tabIndex = -1;\n      });\n    }\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    this.cells = this.removeIcon ?\n      [this.chipContent.nativeElement, this.removeIcon._elementRef.nativeElement] :\n      [this.chipContent.nativeElement];\n  }\n\n  /**\n   * Allows for programmatic focusing of the chip.\n   * Sends focus to the first grid cell. The row chip element itself\n   * is never focused.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    if (!this._hasFocusInternal) {\n      this._onFocus.next({chip: this});\n    }\n\n    this.chipContent.nativeElement.focus();\n  }\n\n  /**\n   * Emits a blur event when one of the gridcells loses focus, unless focus moved\n   * to the other gridcell.\n   */\n  _focusout(event: FocusEvent) {\n    this._hasFocusInternal = false;\n    // Wait to see if focus moves to the other gridcell\n    setTimeout(() => {\n      if (this._hasFocus()) {\n        return;\n      }\n      this._onBlur.next({chip: this});\n      this._handleInteraction(event);\n    });\n  }\n\n  /** Records that the chip has focus when one of the gridcells is focused. */\n  _focusin(event: FocusEvent) {\n    this._hasFocusInternal = true;\n    this._handleInteraction(event);\n  }\n\n  /** Sends focus to the first gridcell when the user clicks anywhere inside the chip. */\n  _mousedown(event: MouseEvent) {\n    if (this._isEditing()) {\n      return;\n    }\n\n    if (!this.disabled) {\n      this.focus();\n    }\n\n    event.preventDefault();\n  }\n\n  _dblclick(event: MouseEvent) {\n    this._handleInteraction(event);\n  }\n\n  /** Handles custom key presses. */\n  _keydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n    if (this._isEditing()) {\n      this._handleInteraction(event);\n      return;\n    }\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // Remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      default:\n        this._handleInteraction(event);\n    }\n  }\n\n  _isEditing() {\n    return this._chipFoundation.isEditing();\n  }\n\n  protected _onEditStart() {\n    // Defer initializing the input so it has time to be added to the DOM.\n    setTimeout(() => {\n      this._getEditInput().initialize(this.value);\n    });\n  }\n\n  protected _onEditFinish() {\n    // If the edit input is still focused or focus was returned to the body after it was destroyed,\n    // return focus to the chip contents.\n    if (this._document.activeElement === this._getEditInput().getNativeElement() ||\n        this._document.activeElement === this._document.body) {\n      this.chipContent.nativeElement.focus();\n    }\n    this.edited.emit({chip: this, value: this._getEditInput().getValue()});\n  }\n\n  /**\n   * Gets the projected chip edit input, or the default input if none is projected in. One of these\n   * two values is guaranteed to be defined.\n   */\n  private _getEditInput(): MatChipEditInput {\n    return this.contentEditInput || this.defaultEditInput!;\n  }\n\n  static ngAcceptInputType_editable: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty, NumberInput} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {HasTabIndex, HasTabIndexCtor, mixinTabIndex} from '@angular/material-experimental/mdc-core';\nimport {MDCChipSetAdapter, MDCChipSetFoundation} from '@material/chips';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent} from './chip';\n\n\nlet uid = 0;\n\n\n/**\n * Boilerplate for applying mixins to MatChipSet.\n * @docs-private\n */\nabstract class MatChipSetBase {\n  abstract disabled: boolean;\n  constructor(_elementRef: ElementRef) {}\n}\nconst _MatChipSetMixinBase: HasTabIndexCtor & typeof MatChipSetBase =\n    mixinTabIndex(MatChipSetBase);\n\n/**\n * Basic container component for the MatChip component.\n *\n * Extended by MatChipListbox and MatChipGrid for different interaction patterns.\n */\n@Component({\n  selector: 'mat-chip-set',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['chips.css'],\n  host: {\n    'class': 'mat-mdc-chip-set mdc-chip-set',\n    '[attr.role]': 'role',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[id]': '_uid',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipSet extends _MatChipSetMixinBase implements AfterContentInit, AfterViewInit,\n  HasTabIndex, OnDestroy {\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** Subscription to destroyed events in chips. */\n  private _chipDestroyedSubscription: Subscription | null;\n\n  /** Subscription to chip interactions. */\n  private _chipInteractionSubscription: Subscription | null;\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  protected _lastDestroyedChipIndex: number | null = null;\n\n  /** The MDC foundation containing business logic for MDC chip-set. */\n  protected _chipSetFoundation: MDCChipSetFoundation;\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /**\n   * Implementation of the MDC chip-set adapter interface.\n   * These methods are called by the chip set foundation.\n   */\n  protected _chipSetAdapter: MDCChipSetAdapter = {\n    hasClass: (className) => this._hasMdcClass(className),\n    // No-op. We keep track of chips via ContentChildren, which will be updated when a chip is\n    // removed.\n    removeChipAtIndex: () => {},\n    // No-op for base chip set. MatChipListbox overrides the adapter to provide this method.\n    selectChipAtIndex: () => {},\n    getIndexOfChipById: (id: string) => this._chips.toArray().findIndex(chip => chip.id === id),\n    focusChipPrimaryActionAtIndex: () => {},\n    focusChipTrailingActionAtIndex: () => {},\n    removeFocusFromChipAtIndex: () => {},\n    isRTL: () => !!this._dir && this._dir.value === 'rtl',\n    getChipListCount: () => this._chips.length,\n    // TODO(mmalerba): Implement using LiveAnnouncer.\n    announceMessage: () => {},\n  };\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Uid of the chip set */\n  _uid: string = `mat-mdc-chip-set-${uid++}`;\n\n  /**\n   * Map from class to whether the class is enabled.\n   * Enabled classes are set on the MDC chip-set div.\n   */\n  _mdcClasses: {[key: string]: boolean} = {};\n\n  /** Whether the chip set is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Whether the chip list contains chips or not. */\n  get empty(): boolean { return this._chips.length === 0; }\n\n  /** The ARIA role applied to the chip set. */\n  @Input()\n  get role(): string | null {\n    if (this._role) {\n      return this._role;\n    } else {\n      return this.empty ? null : 'presentation';\n    }\n  }\n\n  set role(value: string | null) {\n    this._role = value;\n  }\n  private _role: string|null = null;\n\n  /** Whether any of the chips inside of this chip-set has focus. */\n  get focused(): boolean { return this._hasFocusedChip(); }\n\n  /** Combined stream of all of the child chips' remove events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip.removed));\n  }\n\n  /** Combined stream of all of the child chips' remove events. */\n  get chipDestroyedChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip.destroyed));\n  }\n\n  /** Combined stream of all of the child chips' interaction events. */\n  get chipInteractionChanges(): Observable<string> {\n    return merge(...this._chips.map(chip => chip.interaction));\n  }\n\n  /** The chips that are part of this chip set. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) _chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              @Optional() protected _dir: Directionality) {\n    super(_elementRef);\n    this._chipSetFoundation = new MDCChipSetFoundation(this._chipSetAdapter);\n  }\n\n  ngAfterViewInit() {\n    this._chipSetFoundation.init();\n  }\n\n  ngAfterContentInit() {\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n    });\n  }\n\n  ngOnDestroy() {\n    this._dropSubscriptions();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._chipSetFoundation.destroy();\n  }\n\n  /** Checks whether any of the chips is focused. */\n  protected _hasFocusedChip() {\n    return this._chips && this._chips.some(chip => chip._hasFocus());\n  }\n\n  /** Syncs the chip-set's state with the individual chips. */\n  protected _syncChipsState() {\n    if (this._chips) {\n      this._chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /** Sets whether the given CSS class should be applied to the MDC chip. */\n  protected _setMdcClass(cssClass: string, active: boolean) {\n      const classes = this._elementRef.nativeElement.classList;\n      active ? classes.add(cssClass) : classes.remove(cssClass);\n      this._changeDetectorRef.markForCheck();\n  }\n\n  /** Adapter method that returns true if the chip set has the given MDC class. */\n  protected _hasMdcClass(className: string) {\n    return this._elementRef.nativeElement.classList.contains(className);\n  }\n\n  /** Updates subscriptions to chip events. */\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._subscribeToChipEvents();\n  }\n\n  /** Subscribes to events on the child chips. */\n  protected _subscribeToChipEvents() {\n    this._listenToChipsRemove();\n    this._listenToChipsDestroyed();\n    this._listenToChipsInteraction();\n  }\n\n  /** Subscribes to chip removal events. */\n  private _listenToChipsRemove() {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event: MatChipEvent) => {\n       this._chipSetFoundation.handleChipRemoval({\n         chipId: event.chip.id,\n         // TODO(mmalerba): Add removal message.\n         removedAnnouncement: null,\n       });\n    });\n  }\n\n  /** Subscribes to chip destroyed events. */\n  private _listenToChipsDestroyed() {\n    this._chipDestroyedSubscription = this.chipDestroyedChanges.subscribe((event: MatChipEvent) => {\n      const chip = event.chip;\n      const chipIndex: number = this._chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus()) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Subscribes to chip interaction events. */\n  private _listenToChipsInteraction() {\n    this._chipInteractionSubscription = this.chipInteractionChanges.subscribe((id: string) => {\n      this._chipSetFoundation.handleChipInteraction({chipId: id});\n    });\n  }\n\n  /** Unsubscribes from all chip events. */\n  protected _dropSubscriptions() {\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n\n    if (this._chipInteractionSubscription) {\n      this._chipInteractionSubscription.unsubscribe();\n      this._chipInteractionSubscription = null;\n    }\n\n    if (this._chipDestroyedSubscription) {\n      this._chipDestroyedSubscription.unsubscribe();\n      this._chipDestroyedSubscription = null;\n    }\n  }\n\n  /** Dummy method for subclasses to override. Base chip set cannot be focused. */\n  focus() {}\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  protected _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this._chips.length;\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  protected _originatesFromChip(event: Event): boolean {\n    return this._checkForClassInHierarchy(event, 'mdc-chip');\n  }\n\n  /**\n   * Checks whether an event comes from inside a chip element in the editing\n   * state.\n   */\n  protected _originatesFromEditingChip(event: Event): boolean {\n    return this._checkForClassInHierarchy(event, 'mdc-chip--editing');\n  }\n\n  private _checkForClassInHierarchy(event: Event, className: string) {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      // Null check the classList, because IE and Edge don't support it on all elements.\n      if (currentElement.classList && currentElement.classList.contains(className)) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_tabIndex: NumberInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MDCChipSetFoundation} from '@material/chips';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent} from './chip';\nimport {MatChipOption, MatChipSelectionChange} from './chip-option';\nimport {MatChipSet} from './chip-set';\n\n\n/** Change event object that is emitted when the chip listbox value has changed. */\nexport class MatChipListboxChange {\n  constructor(\n    /** Chip listbox that emitted the event. */\n    public source: MatChipListbox,\n    /** Value of the chip listbox when the event was emitted. */\n    public value: any) { }\n}\n\n/**\n * Provider Expression that allows mat-chip-listbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatChipListbox),\n  multi: true\n};\n\n/**\n * An extension of the MatChipSet component that supports chip selection.\n * Used with MatChipOption chips.\n */\n@Component({\n  selector: 'mat-chip-listbox',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['chips.css'],\n  inputs: ['tabIndex'],\n  host: {\n    'class': 'mat-mdc-chip-set mat-mdc-chip-listbox mdc-chip-set',\n    '[attr.role]': 'role',\n    '[tabIndex]': 'empty ? -1 : tabIndex',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'role ? required : null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    '[class.mat-mdc-chip-list-disabled]': 'disabled',\n    '[class.mat-mdc-chip-list-required]': 'required',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipListbox extends MatChipSet implements AfterContentInit, ControlValueAccessor {\n\n  /** Subscription to selection changes in the chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /**\n   * Function when touched. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onTouched = () => {};\n\n  /**\n   * Function when changed. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onChange: (value: any) => void = () => {};\n\n  /** The ARIA role applied to the chip listbox. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._updateMdcSelectionClasses();\n    this._syncListboxProperties();\n  }\n  private _multiple: boolean = false;\n\n  /** The array of selected chips inside the chip listbox. */\n  get selected(): MatChipOption[] | MatChipOption  {\n    const selectedChips = this._chips.toArray().filter(chip => chip.selected);\n    return this.multiple ? selectedChips : selectedChips[0];\n  }\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip listbox is selectable.\n   *\n   * When a chip listbox is not selectable, the selected states for all\n   * the chips inside the chip listbox are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    this._updateMdcSelectionClasses();\n    this._syncListboxProperties();\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    this._initializeSelection();\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n\n  /** Whether this chip listbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n  protected _required: boolean = false;\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this._chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onBlur));\n  }\n\n  /** The value of the listbox, which is the combined value of the selected chips. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /** Event emitted when the selected chip listbox value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListboxChange> =\n      new EventEmitter<MatChipListboxChange>();\n\n  @ContentChildren(MatChipOption, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  _chips: QueryList<MatChipOption>;\n\n  constructor(protected _elementRef: ElementRef,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() _dir: Directionality) {\n    super(_elementRef, _changeDetectorRef, _dir);\n    this._chipSetAdapter.selectChipAtIndex = (index: number, selected: boolean) => {\n      this._setSelected(index, selected);\n    };\n    // Reinitialize the foundation with our overridden adapter\n    this._chipSetFoundation = new MDCChipSetFoundation(this._chipSetAdapter);\n    this._updateMdcSelectionClasses();\n  }\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n    this._initKeyManager();\n\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      // Update listbox selectable/multiple properties on chips\n      this._syncListboxProperties();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  /**\n   * Focuses the first selected chip in this chip listbox, or the first non-disabled chip when there\n   * are no selected chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    const firstSelectedChip = this._getFirstSelectedChip();\n\n    if (firstSelectedChip) {\n      const firstSelectedChipIndex = this._chips.toArray().indexOf(firstSelectedChip);\n      this._keyManager.setActiveItem(firstSelectedChipIndex);\n    } else if (this._chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n    }\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    if (this._chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Selects all chips with value. */\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /** Selects or deselects a chip by id. */\n  _setSelected(index: number, selected: boolean) {\n    const chip = this._chips.toArray()[index];\n    if (chip && chip.selected != selected) {\n      chip.toggleSelected(true);\n    }\n  }\n\n  /** When blurred, marks the field as touched when focus moved outside the chip listbox. */\n  _blur() {\n    if (this.disabled) {\n      return;\n    }\n\n    if (!this.focused) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    // Wait to see if focus moves to an indivdual chip.\n    setTimeout(() => {\n      if (!this.focused) {\n        this._propagateChanges();\n        this._markAsTouched();\n      }\n    });\n  }\n\n  /**\n   * Removes the `tabindex` from the chip listbox and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the listbox from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    const previousTabIndex = this.tabIndex;\n\n    if (this.tabIndex !== -1) {\n      this.tabIndex = -1;\n\n      setTimeout(() => {\n        this.tabIndex = previousTabIndex;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Handles custom keyboard shortcuts, and passes other keyboard events to the keyboard manager.\n   */\n  _keydown(event: KeyboardEvent) {\n    if (this._originatesFromChip(event)) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Marks the field as touched */\n  private _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n  }\n\n /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListboxChange(this, valueToEmit));\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Initializes the chip listbox selection state to reflect any chips that were preselected.\n   */\n  private _initializeSelection() {\n    setTimeout(() => {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      this._chips.forEach(chip => {\n        if (chip.selected) {\n          this._chipSetFoundation.select(chip.id);\n        }\n      });\n    });\n  }\n\n  /**\n   * Deselects every chip in the listbox.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this._chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n    }\n\n    return correspondingChip;\n  }\n\n  /** Syncs the chip-listbox selection state with the individual chips. */\n  private _syncListboxProperties() {\n    if (this._chips) {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        this._chips.forEach(chip => {\n          chip._chipListMultiple = this.multiple;\n          chip.chipListSelectable = this._selectable;\n          chip._changeDetectorRef.markForCheck();\n        });\n      });\n    }\n  }\n\n  /** Sets the mdc classes for single vs multi selection. */\n  private _updateMdcSelectionClasses() {\n    this._setMdcClass('mdc-chip-set--filter', this.selectable && this.multiple);\n    this._setMdcClass('mdc-chip-set--choice', this.selectable && !this.multiple);\n  }\n\n  /** Initializes the key manager to manage focus. */\n  private _initKeyManager() {\n    this._keyManager = new FocusKeyManager<MatChip>(this._chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHomeAndEnd()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n  }\n\n  /** Returns the first selected chip in this listbox, or undefined if no chips are selected. */\n  private _getFirstSelectedChip(): MatChipOption | undefined {\n    if (Array.isArray(this.selected)) {\n      return this.selected.length ? this.selected[0] : undefined;\n    } else {\n      return this.selected;\n    }\n  }\n\n  /** Unsubscribes from all chip events. */\n  protected _dropSubscriptions() {\n    super._dropSubscriptions();\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n  }\n\n  /** Subscribes to events on the child chips. */\n  protected _subscribeToChipEvents() {\n    super._subscribeToChipEvents();\n    this._listenToChipsSelection();\n    this._listenToChipsFocus();\n    this._listenToChipsBlur();\n  }\n\n  /** Subscribes to chip focus events. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe((event: MatChipEvent) => {\n      let chipIndex: number = this._chips.toArray().indexOf(event.chip as MatChipOption);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItem(chipIndex);\n      }\n    });\n  }\n\n  /** Subscribes to chip blur events. */\n  private _listenToChipsBlur(): void {\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n    });\n  }\n\n  /** Subscribes to selection changes in the option chips. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(\n      (chipSelectionChange: MatChipSelectionChange) => {\n        this._chipSetFoundation.handleChipSelection({\n          chipId: chipSelectionChange.source.id,\n          selected: chipSelectionChange.selected,\n          shouldIgnore: false\n        });\n        if (chipSelectionChange.isUserInput) {\n          this._propagateChanges();\n        }\n    });\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  private _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-listbox itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this._chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this._chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  static ngAcceptInputType_multiple: BooleanInput;\n  static ngAcceptInputType_selectable: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {\n  UP_ARROW,\n  DOWN_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  HOME,\n  END,\n} from '@angular/cdk/keycodes';\n\n\n/** The keys handled by the GridKeyManager keydown method. */\nexport const NAVIGATION_KEYS = [DOWN_ARROW, UP_ARROW, RIGHT_ARROW, LEFT_ARROW];\n\n/** This interface is for rows that can be passed to a GridKeyManager. */\nexport interface GridKeyManagerRow<T> {\n  cells: T[];\n}\n\n/**\n * This class manages keyboard events for grids. If you pass it a query list\n * of GridKeyManagerRow, it will set the active cell correctly when arrow events occur.\n *\n * GridKeyManager expects that rows may change dynamically, but the cells for a given row are\n * static. It also expects that all rows have the same number of cells.\n */\nexport class GridKeyManager<T> {\n  private _activeRowIndex = -1;\n  private _activeColumnIndex = -1;\n  private _activeRow: GridKeyManagerRow<T> | null = null;\n  private _activeCell: T | null = null;\n  private _dir: 'ltr' | 'rtl' = 'ltr';\n  private _homeAndEnd = false;\n\n  constructor(private _rows: QueryList<GridKeyManagerRow<T>> | GridKeyManagerRow<T>[]) {\n    // We allow for the rows to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the rows they want to manage (e.g. when the\n    // rows aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_rows instanceof QueryList) {\n      _rows.changes.subscribe((newRows: QueryList<GridKeyManagerRow<T>>) => {\n        if (this._activeRow) {\n          const newIndex = newRows.toArray().indexOf(this._activeRow);\n\n          if (newIndex > -1 && newIndex !== this._activeRowIndex) {\n            this._activeRowIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n\n  /** Stream that emits whenever the active cell of the grid manager changes. */\n  change = new Subject<{row: number, column: number}>();\n\n  /**\n   * Configures the directionality of the key manager's horizontal movement.\n   * @param direction Direction which is considered forward movement across a row.\n   *\n   * If withDirectionality is not set, the default is 'ltr'.\n   */\n  withDirectionality(direction: 'ltr' | 'rtl'): this {\n    this._dir = direction;\n    return this;\n  }\n\n  /**\n   * Sets the active cell to the cell at the indices specified.\n   * @param cell The row and column containing the cell to be set as active.\n   */\n  setActiveCell(cell: {row: number, column: number}): void;\n\n  /**\n   * Sets the active cell to the cell.\n   * @param cell The cell to be set as active.\n   */\n  setActiveCell(cell: T): void;\n\n  setActiveCell(cell: any): void {\n    const previousRowIndex = this._activeRowIndex;\n    const previousColumnIndex = this._activeColumnIndex;\n\n    this.updateActiveCell(cell);\n\n    if (this._activeRowIndex !== previousRowIndex ||\n      this._activeColumnIndex !== previousColumnIndex) {\n      this.change.next({row: this._activeRowIndex, column: this._activeColumnIndex});\n    }\n  }\n\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n  withHomeAndEnd(enabled: boolean = true): this {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n\n  /**\n   * Sets the active cell depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case DOWN_ARROW:\n        this.setNextRowActive();\n        break;\n\n      case UP_ARROW:\n        this.setPreviousRowActive();\n        break;\n\n      case RIGHT_ARROW:\n        this._dir === 'rtl' ? this.setPreviousColumnActive() : this.setNextColumnActive();\n        break;\n\n      case LEFT_ARROW:\n        this._dir === 'rtl' ? this.setNextColumnActive() : this.setPreviousColumnActive();\n        break;\n\n      case HOME:\n        if (this._homeAndEnd) {\n          this.setFirstCellActive();\n          break;\n        } else {\n          return;\n        }\n\n      case END:\n        if (this._homeAndEnd) {\n          this.setLastCellActive();\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    event.preventDefault();\n  }\n\n  /** Index of the currently active row. */\n  get activeRowIndex(): number {\n    return this._activeRowIndex;\n  }\n\n  /** Index of the currently active column. */\n  get activeColumnIndex(): number {\n    return this._activeColumnIndex;\n  }\n\n  /** The active cell. */\n  get activeCell(): T | null {\n    return this._activeCell;\n  }\n\n  /** Sets the active cell to the first cell in the grid. */\n  setFirstCellActive(): void {\n    this._setActiveCellByIndex(0, 0);\n  }\n\n  /** Sets the active cell to the last cell in the grid. */\n  setLastCellActive(): void {\n    const lastRowIndex = this._rows.length - 1;\n    const lastRow = this._getRowsArray()[lastRowIndex];\n    this._setActiveCellByIndex(lastRowIndex, lastRow.cells.length - 1);\n  }\n\n  /** Sets the active row to the next row in the grid. Active column is unchanged. */\n  setNextRowActive(): void {\n    this._activeRowIndex < 0 ? this.setFirstCellActive() : this._setActiveCellByDelta(1, 0);\n  }\n\n  /** Sets the active row to the previous row in the grid. Active column is unchanged. */\n  setPreviousRowActive(): void {\n    this._setActiveCellByDelta(-1, 0);\n  }\n\n  /**\n   * Sets the active column to the next column in the grid.\n   * Active row is unchanged, unless we reach the end of a row.\n   */\n  setNextColumnActive(): void {\n    this._activeRowIndex < 0 ? this.setFirstCellActive() : this._setActiveCellByDelta(0, 1);\n  }\n\n  /**\n   * Sets the active column to the previous column in the grid.\n   * Active row is unchanged, unless we reach the end of a row.\n   */\n  setPreviousColumnActive(): void {\n    this._setActiveCellByDelta(0, -1);\n  }\n\n  /**\n   * Allows setting the active cell without any other effects.\n   * @param cell Row and column of the cell to be set as active.\n   */\n  updateActiveCell(cell: {row: number, column: number}): void;\n\n  /**\n   * Allows setting the active cell without any other effects.\n   * @param cell Cell to be set as active.\n   */\n  updateActiveCell(cell: T): void;\n\n  updateActiveCell(cell: any): void {\n    const rowArray = this._getRowsArray();\n\n    if (typeof cell === 'object' && typeof cell.row === 'number' &&\n      typeof cell.column === 'number') {\n      this._activeRowIndex = cell.row;\n      this._activeColumnIndex = cell.column;\n      this._activeRow = rowArray[cell.row] || null;\n      this._activeCell = this._activeRow ? this._activeRow.cells[cell.column] || null : null;\n    } else {\n      rowArray.forEach((row, rowIndex) => {\n        const columnIndex = row.cells.indexOf(cell);\n        if (columnIndex !== -1) {\n          this._activeRowIndex = rowIndex;\n          this._activeColumnIndex = columnIndex;\n          this._activeRow = row;\n          this._activeCell = row.cells[columnIndex];\n        }\n      });\n    }\n  }\n\n  /**\n   * This method sets the active cell, given the row and columns deltas\n   * between the currently active cell and the new active cell.\n   */\n  private _setActiveCellByDelta(rowDelta: -1 | 0 | 1, columnDelta: -1 | 0 | 1): void {\n    // If delta puts us past the last cell in a row, move to the first cell of the next row.\n    if (this._activeRow && this._activeColumnIndex + columnDelta >= this._activeRow.cells.length) {\n      this._setActiveCellByIndex(this._activeRowIndex + 1, 0);\n\n    // If delta puts us prior to the first cell in a row, move to the last cell of the previous row.\n    } else if (this._activeColumnIndex + columnDelta < 0) {\n      const previousRowIndex = this._activeRowIndex - 1;\n      const previousRow = this._getRowsArray()[previousRowIndex];\n      if (previousRow) {\n        this._setActiveCellByIndex(previousRowIndex, previousRow.cells.length - 1);\n      }\n    } else {\n      this._setActiveCellByIndex(this._activeRowIndex + rowDelta,\n        this._activeColumnIndex + columnDelta);\n    }\n  }\n\n  /**\n   * Sets the active cell to the cell at the indices specified, if they are valid.\n   */\n  private _setActiveCellByIndex(rowIndex: number, columnIndex: number): void {\n    const rows = this._getRowsArray();\n\n    const targetRow = rows[rowIndex];\n\n    if (!targetRow || !targetRow.cells[columnIndex]) {\n      return;\n    }\n\n    this.setActiveCell({row: rowIndex, column: columnIndex});\n  }\n\n  /** Returns the rows as an array. */\n  private _getRowsArray(): GridKeyManagerRow<T>[] {\n    return this._rows instanceof QueryList ? this._rows.toArray() : this._rows;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GridKeyManager} from './grid-key-manager';\n\n/**\n * A version of GridKeyManager where the cells are HTMLElements, and focus()\n * is called on a cell when it becomes active.\n */\nexport class GridFocusKeyManager extends GridKeyManager<HTMLElement> {\n  /**\n   * Sets the active cell to the cell at the specified\n   * indices and focuses the newly active cell.\n   * @param cell Row and column indices of the cell to be set as active.\n   */\n  setActiveCell(cell: {row: number, column: number}): void;\n\n  /**\n   * Sets the active cell to the cell that is specified and focuses it.\n   * @param cell Cell to be set as active.\n   */\n  setActiveCell(cell: HTMLElement): void;\n\n  setActiveCell(cell: any): void {\n    super.setActiveCell(cell);\n\n    if (this.activeCell) {\n      this.activeCell.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, TAB} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material-experimental/mdc-core';\nimport {MatFormFieldControl} from '@angular/material-experimental/mdc-form-field';\nimport {MatChipTextControl} from './chip-text-control';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChipEvent} from './chip';\nimport {MatChipRow} from './chip-row';\nimport {MatChipSet} from './chip-set';\nimport {GridFocusKeyManager} from './grid-focus-key-manager';\n\n\n/** Change event object that is emitted when the chip grid value has changed. */\nexport class MatChipGridChange {\n  constructor(\n    /** Chip grid that emitted the event. */\n    public source: MatChipGrid,\n    /** Value of the chip grid when the event was emitted. */\n    public value: any) { }\n}\n\n/**\n * Boilerplate for applying mixins to MatChipGrid.\n * @docs-private\n */\nclass MatChipGridBase extends MatChipSet {\n  constructor(_elementRef: ElementRef,\n              _changeDetectorRef: ChangeDetectorRef,\n              _dir: Directionality,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {\n    super(_elementRef, _changeDetectorRef, _dir);\n  }\n}\nconst _MatChipGridMixinBase: CanUpdateErrorStateCtor & typeof MatChipGridBase =\n    mixinErrorState(MatChipGridBase);\n\n/**\n * An extension of the MatChipSet component used with MatChipRow chips and\n * the matChipInputFor directive.\n */\n@Component({\n  selector: 'mat-chip-grid',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['chips.css'],\n  inputs: ['tabIndex'],\n  host: {\n    'class': 'mat-mdc-chip-set mat-mdc-chip-grid mdc-chip-set',\n    '[attr.role]': 'role',\n    '[tabIndex]': '_chips && _chips.length === 0 ? -1 : tabIndex',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[class.mat-mdc-chip-list-disabled]': 'disabled',\n    '[class.mat-mdc-chip-list-invalid]': 'errorState',\n    '[class.mat-mdc-chip-list-required]': 'required',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipGrid}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipGrid extends _MatChipGridMixinBase implements AfterContentInit, AfterViewInit,\n  CanUpdateErrorState, ControlValueAccessor, DoCheck, MatFormFieldControl<any>, OnDestroy {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-grid';\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /**\n   * Function when touched. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onTouched = () => {};\n\n  /**\n   * Function when changed. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onChange: (value: any) => void = () => {};\n\n  /** The GridFocusKeyManager which handles focus. */\n  _keyManager: GridFocusKeyManager;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string { return this._chipInput.id; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) &&\n        (!this._chips || this._chips.length === 0);\n  }\n\n    /** The ARIA role applied to the chip grid. */\n  get role(): string | null { return this.empty ? null : 'grid'; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-grid has focus. */\n  get focused(): boolean { return this._chipInput.focused || this._hasFocusedChip(); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this._value = value;\n  }\n  protected _value: any[] = [];\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Combined stream of all of the child chips' blur events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' focus events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this._chips.map(chip => chip._onFocus));\n  }\n\n  /** Emits when the chip grid value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipGridChange> =\n      new EventEmitter<MatChipGridChange>();\n\n  /**\n   * Emits whenever the raw value of the chip-grid changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  @ContentChildren(MatChipRow, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  _chips: QueryList<MatChipRow>;\n\n  constructor(_elementRef: ElementRef,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_elementRef, _changeDetectorRef, _dir, _defaultErrorStateMatcher, _parentForm,\n        _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n    this._initKeyManager();\n\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    if (!this._chipInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('mat-chip-grid must be used in combination with matChipInputFor.');\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.stateChanges.complete();\n  }\n\n  /** Associates an HTML input element with this chip grid. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n    this._setMdcClass('mdc-chip-set--input', true);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event) && !this.disabled) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first chip in this chip grid, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled || this._chipInput.focused) {\n      return;\n    }\n\n    if (this._chips.length > 0) {\n      this._keyManager.setFirstCellActive();\n    } else {\n      this._focusInput();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    // The user is responsible for creating the child chips, so we just store the value.\n    this._value = value;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip grid. */\n  _blur() {\n    if (this.disabled) {\n      return;\n    }\n\n    // Check whether the focus moved to chip input.\n    // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n    // to chip input, do nothing.\n    // Timeout is needed to wait for the focus() event trigger on chip input.\n    setTimeout(() => {\n      if (!this.focused) {\n        this._keyManager.setActiveCell({row: -1, column: -1});\n        this._propagateChanges();\n        this._markAsTouched();\n      }\n    });\n  }\n\n  /**\n   * Removes the `tabindex` from the chip grid and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the grid from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._chipInput.focused) {\n      return;\n    }\n\n    const previousTabIndex = this.tabIndex;\n\n    if (this.tabIndex !== -1) {\n      this.tabIndex = -1;\n\n      setTimeout(() => {\n        this.tabIndex = previousTabIndex;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /** Handles custom keyboard events. */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    if (keyCode === TAB && target.id !== this._chipInput!.id) {\n      this._allowFocusEscape();\n    } else if (this._originatesFromEditingChip(event)) {\n      // No-op, let the editing chip handle all keyboard events except for Tab.\n    } else if (keyCode === BACKSPACE && this._isEmptyInput(target)) {\n      // If they are on an empty input and hit backspace, focus the last chip\n      if (this._chips.length) {\n        manager.setLastCellActive();\n      }\n      event.preventDefault();\n    } else if (this._originatesFromChip(event)) {\n      manager.onKeydown(event);\n    }\n    this.stateChanges.next();\n  }\n\n  /** Unsubscribes from all chip events. */\n  protected _dropSubscriptions() {\n    super._dropSubscriptions();\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n  }\n\n  /** Subscribes to events on the child chips. */\n  protected _subscribeToChipEvents() {\n    super._subscribeToChipEvents();\n    this._listenToChipsFocus();\n    this._listenToChipsBlur();\n  }\n\n  /** Initializes the key manager to manage focus. */\n  private _initKeyManager() {\n    this._keyManager = new GridFocusKeyManager(this._chips)\n      .withHomeAndEnd()\n      .withDirectionality(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withDirectionality(dir));\n    }\n  }\n\n   /** Subscribes to chip focus events. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe((event: MatChipEvent) => {\n      let chipIndex: number = this._chips.toArray().indexOf(event.chip as MatChipRow);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveCell({row: chipIndex, column: 0});\n      }\n    });\n  }\n\n  /** Subscribes to chip blur events. */\n  private _listenToChipsBlur(): void {\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n /** Emits change event to set the model value. */\n  private _propagateChanges(): void {\n    const valueToEmit = this._chips.length ? this._chips.toArray().map(\n      chip => chip.value) : [];\n    this._value = valueToEmit;\n    this.change.emit(new MatChipGridChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Mark the field as touched */\n  private _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * If the amount of chips changed, we need to focus the next closest chip.\n   */\n  private _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-grid itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this._chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this._chips.length - 1);\n        this._keyManager.setActiveCell({\n          row: newChipIndex,\n          column: this._keyManager.activeColumnIndex\n        });\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /** Focus input element. */\n  private _focusInput() {\n    this._chipInput.focus();\n  }\n\n  /** Returns true if element is an input with no value. */\n  private _isEmptyInput(element: HTMLElement): boolean {\n    if (element && element.id === this._chipInput!.id) {\n      return this._chipInput.empty;\n    }\n\n    return false;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: readonly number[] | ReadonlySet<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {MatChipsDefaultOptions, MAT_CHIPS_DEFAULT_OPTIONS} from './chip-default-options';\nimport {MatChipGrid} from './chip-grid';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of a `<mat-chip-grid>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    // TODO: eventually we should remove `mat-input-element` from here since it comes from the\n    // non-MDC version of the input. It's currently being kept for backwards compatibility, because\n    // the MDC chips were landed initially with it.\n    'class': 'mat-mdc-chip-input mat-mdc-input-element mdc-text-field__input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipGrid && _chipGrid.ngControl ? _chipGrid.ngControl.invalid : null',\n    '[attr.aria-required]': '_chipGrid && _chipGrid.required || null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipGrid: MatChipGrid;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipGrid(value: MatChipGrid) {\n    if (value) {\n      this._chipGrid = value;\n      this._chipGrid.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: readonly number[] | ReadonlySet<number> =\n      this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-mdc-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipGrid && this._chipGrid.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipGrid.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipGrid._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipGrid.focused) {\n      this._chipGrid._blur();\n    }\n    this._chipGrid.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipGrid.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipGrid._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipGrid.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n  }\n\n  static ngAcceptInputType_addOnBlur: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  ErrorStateMatcher,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material-experimental/mdc-core';\nimport {MatChip, MatChipCssInternalOnly} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipEditInput} from './chip-edit-input';\nimport {MatChipGrid} from './chip-grid';\nimport {MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip-icons';\nimport {MatChipInput} from './chip-input';\nimport {MatChipListbox} from './chip-listbox';\nimport {MatChipRow} from './chip-row';\nimport {MatChipOption} from './chip-option';\nimport {MatChipSet} from './chip-set';\n\n\nconst CHIP_DECLARATIONS = [\n  MatChip,\n  MatChipAvatar,\n  MatChipCssInternalOnly,\n  MatChipEditInput,\n  MatChipGrid,\n  MatChipInput,\n  MatChipListbox,\n  MatChipOption,\n  MatChipRemove,\n  MatChipRow,\n  MatChipSet,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule, MatRippleModule],\n  exports: [MatCommonModule, CHIP_DECLARATIONS],\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './chip';\nexport * from './chip-option';\nexport * from './chip-row';\nexport * from './chip-set';\nexport * from './chip-listbox';\nexport * from './chip-grid';\nexport * from './module';\nexport * from './chip-input';\nexport * from './chip-default-options';\nexport * from './chip-icons';\nexport * from './chip-text-control';\nexport * from './chip-edit-input';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["InjectionToken","Directive","ChangeDetectorRef","ElementRef","MDCChipTrailingActionFoundation","mixinTabIndex","mixinDisabled","Subject","numbers","mixinColor","mixinDisableRipple","SPACE","ENTER","EventEmitter","MDCChipFoundation","coerceBooleanProperty","takeUntil","hasModifierKey","Component","ViewEncapsulation","ChangeDetectionStrategy","NgZone","Directionality","Optional","Inject","ANIMATION_MODULE_TYPE","MAT_RIPPLE_GLOBAL_OPTIONS","HostListener","Input","Output","ContentChild","ViewChild","MatRipple","chipCssClasses","take","DOCUMENT","DELETE","BACKSPACE","uid","MDCChipSetFoundation","merge","startWith","ContentChildren","NG_VALUE_ACCESSOR","forwardRef","FocusKeyManager","DOWN_ARROW","UP_ARROW","RIGHT_ARROW","LEFT_ARROW","QueryList","HOME","END","mixinErrorState","TAB","MatFormFieldControl","NgForm","FormGroupDirective","ErrorStateMatcher","NgControl","Self","NgModule","MatCommonModule","CommonModule","MatRippleModule"],"mappings":"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"}