{"version":3,"sources":["src/material-experimental/material-experimental-mdc-checkbox.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","materialExperimental","mdcCheckbox","cdk","coercion","core","forms","material","checkbox","platformBrowser","animations","mdc","ripple","common","this","checkbox$1","core$1","MatCheckboxModule","nextUniqueId","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatCheckbox","multi","MatCheckboxChange","RIPPLE_ANIMATION_CONFIG","enterDuration","numbers","DEACTIVATION_TIMEOUT_MS","exitDuration","FG_DEACTIVATION_MS","_changeDetectorRef","tabIndex","_clickAction","_animationMode","_options","_this","ariaLabel","ariaLabelledby","color","labelPosition","name","_uniqueId","id","_checked","_indeterminate","_disabled","_required","_disableRipple","change","EventEmitter","indeterminateChange","_classes","mdc-checkbox__native-control","_rippleAnimation","_cvaOnChange","_","_cvaOnTouch","_attrBlacklist","Set","_checkboxAdapter","addClass","className","_setClass","removeClass","forceLayout","_checkbox","nativeElement","offsetWidth","hasNativeControl","_nativeCheckbox","isAttachedToDOM","parentNode","isChecked","checked","isIndeterminate","indeterminate","removeNativeControlAttr","attr","has","removeAttribute","setNativeControlAttr","value","setAttribute","setNativeControlDisabled","disabled","parseInt","_checkboxFoundation","MDCCheckboxFoundation","clickAction","Object","defineProperty","prototype","get","set","coerceBooleanProperty","enumerable","configurable","_syncIndeterminate","required","disableRipple","ngAfterViewInit","init","ngOnDestroy","destroy","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","markForCheck","writeValue","focus","toggle","_onBlur","Promise","resolve","then","_onClick","next","handleChange","newEvent","source","_getAriaChecked","cssClass","active","nativeCheckbox","decorators","type","Component","args","selector","template","host","class","[attr.tabindex]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","[class._mat-animation-noopable]","[class.mdc-checkbox--disabled]","[id]","providers","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","styles","ctorParameters","ChangeDetectorRef","String","Attribute","undefined","Optional","Inject","MAT_CHECKBOX_CLICK_ACTION","ANIMATION_MODULE_TYPE","MAT_CHECKBOX_DEFAULT_OPTIONS","propDecorators","Input","ariaDescribedby","Output","ViewChild","_label","NgModule","imports","MatCommonModule","MatRippleModule","CommonModule","_MatCheckboxRequiredValidatorModule","declarations","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/coercion'), require('@angular/core'), require('@angular/forms'), require('@angular/material/checkbox'), require('@angular/platform-browser/animations'), require('@material/checkbox'), require('@material/ripple'), require('@angular/common'), require('@angular/material/core')) :\n    typeof define === 'function' && define.amd ? define('@angular/material-experimental/mdc-checkbox', ['exports', '@angular/cdk/coercion', '@angular/core', '@angular/forms', '@angular/material/checkbox', '@angular/platform-browser/animations', '@material/checkbox', '@material/ripple', '@angular/common', '@angular/material/core'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.materialExperimental = global.ng.materialExperimental || {}, global.ng.materialExperimental.mdcCheckbox = {}), global.ng.cdk.coercion, global.ng.core, global.ng.forms, global.ng.material.checkbox, global.ng.platformBrowser.animations, global.mdc.checkbox, global.mdc.ripple, global.ng.common, global.ng.material.core));\n}(this, (function (exports, coercion, core, forms, checkbox, animations, checkbox$1, ripple, common, core$1) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var nextUniqueId = 0;\n    var MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n        provide: forms.NG_VALUE_ACCESSOR,\n        useExisting: core.forwardRef(function () { return MatCheckbox; }),\n        multi: true\n    };\n    /** Change event object emitted by MatCheckbox. */\n    var MatCheckboxChange = /** @class */ (function () {\n        function MatCheckboxChange() {\n        }\n        return MatCheckboxChange;\n    }());\n    /** Configuration for the ripple animation. */\n    var RIPPLE_ANIMATION_CONFIG = {\n        enterDuration: ripple.numbers.DEACTIVATION_TIMEOUT_MS,\n        exitDuration: ripple.numbers.FG_DEACTIVATION_MS,\n    };\n    var MatCheckbox = /** @class */ (function () {\n        function MatCheckbox(_changeDetectorRef, tabIndex, \n        /**\n         * @deprecated `_clickAction` parameter to be removed, use\n         * `MAT_CHECKBOX_DEFAULT_OPTIONS`\n         * @breaking-change 10.0.0\n         */\n        _clickAction, _animationMode, _options) {\n            var _this = this;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._clickAction = _clickAction;\n            this._animationMode = _animationMode;\n            this._options = _options;\n            /**\n             * The `aria-label` attribute to use for the input element. In most cases, `aria-labelledby` will\n             * take precedence so this may be omitted.\n             */\n            this.ariaLabel = '';\n            /** The `aria-labelledby` attribute to use for the input element. */\n            this.ariaLabelledby = null;\n            /** The color palette  for this checkbox ('primary', 'accent', or 'warn'). */\n            this.color = 'accent';\n            /** Whether the label should appear after or before the checkbox. Defaults to 'after'. */\n            this.labelPosition = 'after';\n            /** The `name` attribute to use for the input element. */\n            this.name = null;\n            this._uniqueId = \"mat-mdc-checkbox-\" + ++nextUniqueId;\n            /** A unique id for the checkbox. If none is supplied, it will be auto-generated. */\n            this.id = this._uniqueId;\n            this._checked = false;\n            this._indeterminate = false;\n            this._disabled = false;\n            this._required = false;\n            this._disableRipple = false;\n            /** Event emitted when the checkbox's `checked` value changes. */\n            this.change = new core.EventEmitter();\n            /** Event emitted when the checkbox's `indeterminate` value changes. */\n            this.indeterminateChange = new core.EventEmitter();\n            /** The set of classes that should be applied to the native input. */\n            this._classes = { 'mdc-checkbox__native-control': true };\n            /** Animation config for the ripple. */\n            this._rippleAnimation = RIPPLE_ANIMATION_CONFIG;\n            /** ControlValueAccessor onChange */\n            this._cvaOnChange = function (_) { };\n            /** ControlValueAccessor onTouch */\n            this._cvaOnTouch = function () { };\n            /**\n             * A list of attributes that should not be modified by `MDCFoundation` classes.\n             *\n             * MDC uses animation events to determine when to update `aria-checked` which is unreliable.\n             * Therefore we disable it and handle it ourselves.\n             */\n            this._attrBlacklist = new Set(['aria-checked']);\n            /** The `MDCCheckboxAdapter` instance for this checkbox. */\n            this._checkboxAdapter = {\n                addClass: function (className) { return _this._setClass(className, true); },\n                removeClass: function (className) { return _this._setClass(className, false); },\n                forceLayout: function () { return _this._checkbox.nativeElement.offsetWidth; },\n                hasNativeControl: function () { return !!_this._nativeCheckbox; },\n                isAttachedToDOM: function () { return !!_this._checkbox.nativeElement.parentNode; },\n                isChecked: function () { return _this.checked; },\n                isIndeterminate: function () { return _this.indeterminate; },\n                removeNativeControlAttr: function (attr) {\n                    if (!_this._attrBlacklist.has(attr)) {\n                        _this._nativeCheckbox.nativeElement.removeAttribute(attr);\n                    }\n                },\n                setNativeControlAttr: function (attr, value) {\n                    if (!_this._attrBlacklist.has(attr)) {\n                        _this._nativeCheckbox.nativeElement.setAttribute(attr, value);\n                    }\n                },\n                setNativeControlDisabled: function (disabled) { return _this.disabled = disabled; },\n            };\n            // Note: We don't need to set up the MDCFormFieldFoundation. Its only purpose is to manage the\n            // ripple, which we do ourselves instead.\n            this.tabIndex = parseInt(tabIndex) || 0;\n            this._checkboxFoundation = new checkbox$1.MDCCheckboxFoundation(this._checkboxAdapter);\n            this._options = this._options || {};\n            if (this._options.color) {\n                this.color = this._options.color;\n            }\n            // @breaking-change 10.0.0: Remove this after the `_clickAction` parameter is removed as an\n            // injection parameter.\n            this._clickAction = this._clickAction || this._options.clickAction;\n        }\n        Object.defineProperty(MatCheckbox.prototype, \"checked\", {\n            /** Whether the checkbox is checked. */\n            get: function () {\n                return this._checked;\n            },\n            set: function (checked) {\n                this._checked = coercion.coerceBooleanProperty(checked);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(MatCheckbox.prototype, \"indeterminate\", {\n            /**\n             * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n             * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n             * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n             * set to false.\n             */\n            get: function () {\n                return this._indeterminate;\n            },\n            set: function (indeterminate) {\n                this._indeterminate = coercion.coerceBooleanProperty(indeterminate);\n                this._syncIndeterminate(this._indeterminate);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(MatCheckbox.prototype, \"disabled\", {\n            /** Whether the checkbox is disabled. */\n            get: function () {\n                return this._disabled;\n            },\n            set: function (disabled) {\n                this._disabled = coercion.coerceBooleanProperty(disabled);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(MatCheckbox.prototype, \"required\", {\n            /** Whether the checkbox is required. */\n            get: function () {\n                return this._required;\n            },\n            set: function (required) {\n                this._required = coercion.coerceBooleanProperty(required);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(MatCheckbox.prototype, \"disableRipple\", {\n            /** Whether to disable the ripple on this checkbox. */\n            get: function () {\n                return this._disableRipple;\n            },\n            set: function (disableRipple) {\n                this._disableRipple = coercion.coerceBooleanProperty(disableRipple);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(MatCheckbox.prototype, \"inputId\", {\n            /** Returns the unique id for the visual hidden input. */\n            get: function () {\n                return (this.id || this._uniqueId) + \"-input\";\n            },\n            enumerable: false,\n            configurable: true\n        });\n        MatCheckbox.prototype.ngAfterViewInit = function () {\n            this._syncIndeterminate(this._indeterminate);\n            this._checkboxFoundation.init();\n        };\n        MatCheckbox.prototype.ngOnDestroy = function () {\n            this._checkboxFoundation.destroy();\n        };\n        /**\n         * Implemented as part of `ControlValueAccessor`\n         * @docs-private\n         */\n        MatCheckbox.prototype.registerOnChange = function (fn) {\n            this._cvaOnChange = fn;\n        };\n        /**\n         * Implemented as part of `ControlValueAccessor`\n         * @docs-private\n         */\n        MatCheckbox.prototype.registerOnTouched = function (fn) {\n            this._cvaOnTouch = fn;\n        };\n        /**\n         * Implemented as part of `ControlValueAccessor`\n         * @docs-private\n         */\n        MatCheckbox.prototype.setDisabledState = function (isDisabled) {\n            this.disabled = isDisabled;\n            this._changeDetectorRef.markForCheck();\n        };\n        /**\n         * Implemented as part of `ControlValueAccessor`\n         * @docs-private\n         */\n        MatCheckbox.prototype.writeValue = function (value) {\n            this.checked = !!value;\n            this._changeDetectorRef.markForCheck();\n        };\n        /** Focuses the checkbox. */\n        MatCheckbox.prototype.focus = function () {\n            this._nativeCheckbox.nativeElement.focus();\n        };\n        /** Toggles the `checked` state of the checkbox. */\n        MatCheckbox.prototype.toggle = function () {\n            this.checked = !this.checked;\n            this._cvaOnChange(this.checked);\n        };\n        /** Handles blur events on the native input. */\n        MatCheckbox.prototype._onBlur = function () {\n            var _this = this;\n            // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n            // Angular does not expect events to be raised during change detection, so any state change\n            // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n            // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n            // telling the form control it has been touched until the next tick.\n            Promise.resolve().then(function () {\n                _this._cvaOnTouch();\n                _this._changeDetectorRef.markForCheck();\n            });\n        };\n        /**\n         * Handles click events on the native input.\n         *\n         * Note: we must listen to the `click` event rather than the `change` event because IE & Edge do\n         * not actually change the checked state when the user clicks an indeterminate checkbox. By\n         * listening to `click` instead we can override and normalize the behavior to change the checked\n         * state like other browsers do.\n         */\n        MatCheckbox.prototype._onClick = function () {\n            var _this = this;\n            if (this._clickAction === 'noop') {\n                this._nativeCheckbox.nativeElement.checked = this.checked;\n                this._nativeCheckbox.nativeElement.indeterminate = this.indeterminate;\n                return;\n            }\n            if (this.indeterminate && this._clickAction !== 'check') {\n                this.indeterminate = false;\n                // tslint:disable:max-line-length\n                // We use `Promise.resolve().then` to ensure the same timing as the original `MatCheckbox`:\n                // https://github.com/angular/components/blob/309d5644aa610ee083c56a823ce7c422988730e8/src/lib/checkbox/checkbox.ts#L381\n                // tslint:enable:max-line-length\n                Promise.resolve().then(function () { return _this.indeterminateChange.next(_this.indeterminate); });\n            }\n            else {\n                this._nativeCheckbox.nativeElement.indeterminate = this.indeterminate;\n            }\n            this.checked = !this.checked;\n            this._checkboxFoundation.handleChange();\n            // Dispatch our change event\n            var newEvent = new MatCheckboxChange();\n            newEvent.source = this;\n            newEvent.checked = this.checked;\n            this._cvaOnChange(this.checked);\n            this.change.next(newEvent);\n        };\n        /** Gets the value for the `aria-checked` attribute of the native input. */\n        MatCheckbox.prototype._getAriaChecked = function () {\n            if (this.checked) {\n                return 'true';\n            }\n            return this.indeterminate ? 'mixed' : 'false';\n        };\n        /** Sets whether the given CSS class should be applied to the native input. */\n        MatCheckbox.prototype._setClass = function (cssClass, active) {\n            this._classes[cssClass] = active;\n            this._changeDetectorRef.markForCheck();\n        };\n        /**\n         * Syncs the indeterminate value with the checkbox DOM node.\n         *\n         * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n         * property is supported on an element boils down to `if (propName in element)`. Domino's\n         * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n         * server-side rendering.\n         */\n        MatCheckbox.prototype._syncIndeterminate = function (value) {\n            var nativeCheckbox = this._nativeCheckbox;\n            if (nativeCheckbox) {\n                nativeCheckbox.nativeElement.indeterminate = value;\n            }\n        };\n        return MatCheckbox;\n    }());\n    MatCheckbox.decorators = [\n        { type: core.Component, args: [{\n                    selector: 'mat-checkbox',\n                    template: \"<div class=\\\"mdc-form-field\\\"\\n     [class.mdc-form-field--align-end]=\\\"labelPosition == 'before'\\\">\\n  <div #checkbox class=\\\"mdc-checkbox\\\">\\n    <input #nativeCheckbox\\n           type=\\\"checkbox\\\"\\n           [ngClass]=\\\"_classes\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.value]=\\\"value\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           (blur)=\\\"_onBlur()\\\"\\n           (click)=\\\"_onClick()\\\"\\n           (change)=\\\"$event.stopPropagation()\\\"/>\\n    <div class=\\\"mdc-checkbox__background\\\">\\n      <svg class=\\\"mdc-checkbox__checkmark\\\"\\n           focusable=\\\"false\\\"\\n           viewBox=\\\"0 0 24 24\\\">\\n        <path class=\\\"mdc-checkbox__checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              d=\\\"M1.73,12.91 8.1,19.28 22.79,4.59\\\"/>\\n      </svg>\\n      <div class=\\\"mdc-checkbox__mixedmark\\\"></div>\\n    </div>\\n    <div class=\\\"mat-mdc-checkbox-ripple mat-mdc-focus-indicator\\\" mat-ripple\\n      [matRippleTrigger]=\\\"checkbox\\\"\\n      [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n      [matRippleCentered]=\\\"true\\\"\\n      [matRippleAnimation]=\\\"_rippleAnimation\\\"></div>\\n  </div>\\n  <label #label\\n         [for]=\\\"inputId\\\"\\n         (click)=\\\"$event.stopPropagation()\\\">\\n    <ng-content></ng-content>\\n  </label>\\n</div>\\n\",\n                    host: {\n                        'class': 'mat-mdc-checkbox',\n                        '[attr.tabindex]': 'null',\n                        '[class.mat-primary]': 'color == \"primary\"',\n                        '[class.mat-accent]': 'color == \"accent\"',\n                        '[class.mat-warn]': 'color == \"warn\"',\n                        '[class._mat-animation-noopable]': \"_animationMode === 'NoopAnimations'\",\n                        '[class.mdc-checkbox--disabled]': 'disabled',\n                        '[id]': 'id',\n                    },\n                    providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n                    exportAs: 'matCheckbox',\n                    encapsulation: core.ViewEncapsulation.None,\n                    changeDetection: core.ChangeDetectionStrategy.OnPush,\n                    styles: [\".mdc-touch-target-wrapper{display:inline}@keyframes mdc-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:29.7833385}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 1)}100%{stroke-dashoffset:0}}@keyframes mdc-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mdc-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);opacity:1;stroke-dashoffset:0}to{opacity:0;stroke-dashoffset:-29.7833385}}@keyframes mdc-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 1);transform:rotate(0deg);opacity:1}to{transform:rotate(45deg);opacity:0}}@keyframes mdc-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);transform:rotate(45deg);opacity:0}to{transform:rotate(360deg);opacity:1}}@keyframes mdc-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:mdc-animation-deceleration-curve-timing-function;transform:rotate(-45deg);opacity:0}to{transform:rotate(0deg);opacity:1}}@keyframes mdc-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);transform:rotate(0deg);opacity:1}to{transform:rotate(315deg);opacity:0}}@keyframes mdc-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;transform:scaleX(1);opacity:1}32.8%,100%{transform:scaleX(0);opacity:0}}.mdc-checkbox{display:inline-block;position:relative;flex:0 0 18px;box-sizing:content-box;width:18px;height:18px;line-height:0;white-space:nowrap;cursor:pointer;vertical-align:bottom;padding:11px}.mdc-checkbox.mdc-checkbox--selected.mdc-ripple-upgraded--background-focused .mdc-checkbox__ripple::before,.mdc-checkbox.mdc-checkbox--selected:not(.mdc-ripple-upgraded):focus .mdc-checkbox__ripple::before{transition-duration:75ms}.mdc-checkbox.mdc-checkbox--selected:not(.mdc-ripple-upgraded) .mdc-checkbox__ripple::after{transition:opacity 150ms linear}.mdc-checkbox.mdc-checkbox--selected:not(.mdc-ripple-upgraded):active .mdc-checkbox__ripple::after{transition-duration:75ms}.mdc-checkbox .mdc-checkbox__background{top:11px;left:11px}.mdc-checkbox .mdc-checkbox__background::before{top:-13px;left:-13px;width:40px;height:40px}.mdc-checkbox .mdc-checkbox__native-control{top:0px;right:0px;left:0px;width:40px;height:40px}.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{animation-name:mdc-checkbox-fade-in-background-8A000000secondary00000000secondary}.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{animation-name:mdc-checkbox-fade-out-background-8A000000secondary00000000secondary}@media screen and (-ms-high-contrast: active){.mdc-checkbox__mixedmark{margin:0 1px}}.mdc-checkbox--disabled{cursor:default;pointer-events:none}.mdc-checkbox__background{display:inline-flex;position:absolute;align-items:center;justify-content:center;box-sizing:border-box;width:18px;height:18px;border:2px solid currentColor;border-radius:2px;background-color:transparent;pointer-events:none;will-change:background-color,border-color;transition:background-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),border-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox__checkmark{position:absolute;top:0;right:0;bottom:0;left:0;width:100%;opacity:0;transition:opacity 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox--upgraded .mdc-checkbox__checkmark{opacity:1}.mdc-checkbox__checkmark-path{transition:stroke-dashoffset 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);stroke:currentColor;stroke-width:3.12px;stroke-dashoffset:29.7833385;stroke-dasharray:29.7833385}.mdc-checkbox__mixedmark{width:100%;height:0;transform:scaleX(0) rotate(0deg);border-width:1px;border-style:solid;opacity:0;transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox--upgraded .mdc-checkbox__background,.mdc-checkbox--upgraded .mdc-checkbox__checkmark,.mdc-checkbox--upgraded .mdc-checkbox__checkmark-path,.mdc-checkbox--upgraded .mdc-checkbox__mixedmark{transition:none !important}.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__background,.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__background,.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__background,.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__background{animation-duration:180ms;animation-timing-function:linear}.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__checkmark-path{animation:mdc-checkbox-unchecked-checked-checkmark-path 180ms linear 0s;transition:none}.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__mixedmark{animation:mdc-checkbox-unchecked-indeterminate-mixedmark 90ms linear 0s;transition:none}.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__checkmark-path{animation:mdc-checkbox-checked-unchecked-checkmark-path 90ms linear 0s;transition:none}.mdc-checkbox--anim-checked-indeterminate .mdc-checkbox__checkmark{animation:mdc-checkbox-checked-indeterminate-checkmark 90ms linear 0s;transition:none}.mdc-checkbox--anim-checked-indeterminate .mdc-checkbox__mixedmark{animation:mdc-checkbox-checked-indeterminate-mixedmark 90ms linear 0s;transition:none}.mdc-checkbox--anim-indeterminate-checked .mdc-checkbox__checkmark{animation:mdc-checkbox-indeterminate-checked-checkmark 500ms linear 0s;transition:none}.mdc-checkbox--anim-indeterminate-checked .mdc-checkbox__mixedmark{animation:mdc-checkbox-indeterminate-checked-mixedmark 500ms linear 0s;transition:none}.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__mixedmark{animation:mdc-checkbox-indeterminate-unchecked-mixedmark 300ms linear 0s;transition:none}.mdc-checkbox__native-control:checked~.mdc-checkbox__background,.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background,.mdc-checkbox__native-control[data-indeterminate=true]~.mdc-checkbox__background{transition:border-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1),background-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-checkbox__native-control:checked~.mdc-checkbox__background .mdc-checkbox__checkmark-path,.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background .mdc-checkbox__checkmark-path,.mdc-checkbox__native-control[data-indeterminate=true]~.mdc-checkbox__background .mdc-checkbox__checkmark-path{stroke-dashoffset:0}.mdc-checkbox__background::before{position:absolute;transform:scale(0, 0);border-radius:50%;opacity:0;pointer-events:none;content:\\\"\\\";will-change:opacity,transform;transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox__native-control:focus~.mdc-checkbox__background::before{transform:scale(1);opacity:.12;transition:opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-checkbox__native-control{position:absolute;margin:0;padding:0;opacity:0;cursor:inherit}.mdc-checkbox__native-control:disabled{cursor:default;pointer-events:none}.mdc-checkbox--touch{margin-top:4px;margin-bottom:4px;margin-right:4px;margin-left:4px}.mdc-checkbox--touch .mdc-checkbox__native-control{top:-4px;right:-4px;left:-4px;width:48px;height:48px}.mdc-checkbox__native-control:checked~.mdc-checkbox__background .mdc-checkbox__checkmark{transition:opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);opacity:1}.mdc-checkbox__native-control:checked~.mdc-checkbox__background .mdc-checkbox__mixedmark{transform:scaleX(1) rotate(-45deg)}.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background .mdc-checkbox__checkmark,.mdc-checkbox__native-control[data-indeterminate=true]~.mdc-checkbox__background .mdc-checkbox__checkmark{transform:rotate(45deg);opacity:0;transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background .mdc-checkbox__mixedmark,.mdc-checkbox__native-control[data-indeterminate=true]~.mdc-checkbox__background .mdc-checkbox__mixedmark{transform:scaleX(1) rotate(0deg);opacity:1}.mdc-form-field{display:inline-flex;align-items:center;vertical-align:middle}.mdc-form-field>label{margin-left:0;margin-right:auto;padding-left:4px;padding-right:0;order:0}[dir=rtl] .mdc-form-field>label,.mdc-form-field>label[dir=rtl]{margin-left:auto;margin-right:0}[dir=rtl] .mdc-form-field>label,.mdc-form-field>label[dir=rtl]{padding-left:0;padding-right:4px}.mdc-form-field--nowrap>label{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.mdc-form-field--align-end>label{margin-left:auto;margin-right:0;padding-left:0;padding-right:4px;order:-1}[dir=rtl] .mdc-form-field--align-end>label,.mdc-form-field--align-end>label[dir=rtl]{margin-left:0;margin-right:auto}[dir=rtl] .mdc-form-field--align-end>label,.mdc-form-field--align-end>label[dir=rtl]{padding-left:4px;padding-right:0}.mdc-form-field--space-between{justify-content:space-between}.mdc-form-field--space-between>label{margin:0}[dir=rtl] .mdc-form-field--space-between>label,.mdc-form-field--space-between>label[dir=rtl]{margin:0}.mat-mdc-checkbox .mdc-checkbox:hover .mdc-checkbox__native-control:not([disabled])~.mdc-checkbox__background::before{opacity:.04;transform:scale(1);transition:opacity 80ms 0 cubic-bezier(0, 0, 0.2, 1),transform 80ms 0 cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-checkbox .mdc-checkbox .mdc-checkbox__native-control:not([disabled]):focus~.mdc-checkbox__background::before{opacity:.16}.mat-mdc-checkbox .mat-ripple-element{opacity:.12}.mat-mdc-checkbox._mat-animation-noopable *,.mat-mdc-checkbox._mat-animation-noopable *::before{transition:none !important;animation:none !important}.mat-mdc-checkbox label:empty{display:none}.mat-mdc-checkbox-ripple{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:50%;pointer-events:none}.mat-mdc-checkbox-ripple:not(:empty){transform:translateZ(0)}\\n\"]\n                },] }\n    ];\n    MatCheckbox.ctorParameters = function () { return [\n        { type: core.ChangeDetectorRef },\n        { type: String, decorators: [{ type: core.Attribute, args: ['tabindex',] }] },\n        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [checkbox.MAT_CHECKBOX_CLICK_ACTION,] }] },\n        { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations.ANIMATION_MODULE_TYPE,] }] },\n        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [checkbox.MAT_CHECKBOX_DEFAULT_OPTIONS,] }] }\n    ]; };\n    MatCheckbox.propDecorators = {\n        ariaLabel: [{ type: core.Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: core.Input, args: ['aria-labelledby',] }],\n        ariaDescribedby: [{ type: core.Input, args: ['aria-describedby',] }],\n        color: [{ type: core.Input }],\n        labelPosition: [{ type: core.Input }],\n        name: [{ type: core.Input }],\n        tabIndex: [{ type: core.Input }],\n        value: [{ type: core.Input }],\n        id: [{ type: core.Input }],\n        checked: [{ type: core.Input }],\n        indeterminate: [{ type: core.Input }],\n        disabled: [{ type: core.Input }],\n        required: [{ type: core.Input }],\n        disableRipple: [{ type: core.Input }],\n        change: [{ type: core.Output }],\n        indeterminateChange: [{ type: core.Output }],\n        _checkbox: [{ type: core.ViewChild, args: ['checkbox',] }],\n        _nativeCheckbox: [{ type: core.ViewChild, args: ['nativeCheckbox',] }],\n        _label: [{ type: core.ViewChild, args: ['label',] }]\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatCheckboxModule = /** @class */ (function () {\n        function MatCheckboxModule() {\n        }\n        return MatCheckboxModule;\n    }());\n    MatCheckboxModule.decorators = [\n        { type: core.NgModule, args: [{\n                    imports: [core$1.MatCommonModule, core$1.MatRippleModule, common.CommonModule, checkbox._MatCheckboxRequiredValidatorModule],\n                    exports: [MatCheckbox, core$1.MatCommonModule, checkbox._MatCheckboxRequiredValidatorModule],\n                    declarations: [MatCheckbox],\n                },] }\n    ];\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    Object.defineProperty(exports, 'MAT_CHECKBOX_CLICK_ACTION', {\n        enumerable: true,\n        get: function () {\n            return checkbox.MAT_CHECKBOX_CLICK_ACTION;\n        }\n    });\n    Object.defineProperty(exports, 'MAT_CHECKBOX_REQUIRED_VALIDATOR', {\n        enumerable: true,\n        get: function () {\n            return checkbox.MAT_CHECKBOX_REQUIRED_VALIDATOR;\n        }\n    });\n    Object.defineProperty(exports, 'MatCheckboxRequiredValidator', {\n        enumerable: true,\n        get: function () {\n            return checkbox.MatCheckboxRequiredValidator;\n        }\n    });\n    Object.defineProperty(exports, '_MatCheckboxRequiredValidatorModule', {\n        enumerable: true,\n        get: function () {\n            return checkbox._MatCheckboxRequiredValidatorModule;\n        }\n    });\n    exports.MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR;\n    exports.MatCheckbox = MatCheckbox;\n    exports.MatCheckboxChange = MatCheckboxChange;\n    exports.MatCheckboxModule = MatCheckboxModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-experimental-mdc-checkbox.umd.js.map\n"]}