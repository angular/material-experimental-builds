{"version":3,"file":"material-experimental-mdc-slider.umd.js","sources":["../../../../../src/material-experimental/mdc-slider/slider.ts","../../../../../src/material-experimental/mdc-slider/module.ts","../../../../../src/material-experimental/mdc-slider/public-api.ts","../../../../../src/material-experimental/mdc-slider/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {normalizePassiveListenerOptions, Platform} from '@angular/cdk/platform';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {ThemePalette} from '@angular/material-experimental/mdc-core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MDCSliderAdapter, MDCSliderFoundation, Thumb} from '@material/slider';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/**\n * Size of a tick marker for a slider. The size of a tick is based on the Material\n * Design guidelines and the MDC slider implementation.\n * TODO(devversion): ideally MDC would expose the tick marker size as constant\n */\nconst TICK_MARKER_SIZE = 2;\n\n// TODO: disabled until we implement the new MDC slider.\n/** Event options used to bind passive listeners. */\n// tslint:disable-next-line:no-unused-variable\nconst passiveListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO: disabled until we implement the new MDC slider.\n/** Event options used to bind active listeners. */\n// tslint:disable-next-line:no-unused-variable\nconst activeListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number;\n}\n\n@Component({\n  selector: 'mat-slider',\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  host: {\n    'class': 'mat-mdc-slider mdc-slider mat-mdc-focus-indicator',\n    'role': 'slider',\n    'aria-orientation': 'horizontal',\n    // The tabindex if the slider turns disabled is managed by the MDC foundation which\n    // dynamically updates and restores the \"tabindex\" attribute.\n    '[attr.tabindex]': 'tabIndex || 0',\n    '[class.mdc-slider--discrete]': 'thumbLabel',\n    '[class.mat-slider-has-ticks]': 'tickInterval !== 0',\n    '[class.mdc-slider--display-markers]': 'tickInterval !== 0',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if mouse coordinates need to be inverted.\n    '[class.mat-slider-invert-mouse-coords]': '_isRtl()',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(blur)': '_markAsTouched()',\n  },\n  exportAs: 'matSlider',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n})\nexport class MatSlider implements AfterViewInit, OnChanges, OnDestroy, ControlValueAccessor {\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Tabindex for the slider. */\n  @Input() tabIndex: number = 0;\n\n  /** The color palette for this slider. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number) => string | number;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number {\n    return this._min;\n  }\n  set min(value: number) {\n    this._min = coerceNumberProperty(value);\n  }\n  private _min = 0;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number {\n    return this._max;\n  }\n  set max(value: number) {\n    this._max = coerceNumberProperty(value);\n  }\n  private _max = 100;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number|null {\n    // If the value needs to be read and it is still uninitialized, initialize\n    // it to the current minimum value.\n    if (this._value === null) {\n      this.value = this.min;\n    }\n    return this._value;\n  }\n  set value(value: number|null) {\n    this._value = coerceNumberProperty(value);\n  }\n  private _value: number|null = null;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number {\n    return this._step;\n  }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n  }\n  private _step: number = 1;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() {\n    return this._tickInterval;\n  }\n  set tickInterval(value: number|'auto') {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: number|'auto' = 0;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean {\n    return this._thumbLabel;\n  }\n  set thumbLabel(value: boolean) {\n    this._thumbLabel = coerceBooleanProperty(value);\n  }\n  private _thumbLabel: boolean = false;\n\n  /** Whether the slider is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(disabled) {\n    this._disabled = coerceBooleanProperty(disabled);\n  }\n  private _disabled = false;\n\n  /** Adapter for the MDC slider foundation. */\n  private _sliderAdapter: MDCSliderAdapter = {\n    hasClass: (_className: string) => false,\n    addClass: (_className: string) => {},\n    removeClass: (_className: string) => {},\n    getAttribute: (_attribute: string) => null,\n    addThumbClass: (_className: string, _thumb: Thumb) => {},\n    removeThumbClass: (_className: string, _thumb: Thumb) => {},\n    getThumbKnobWidth: (_thumb: Thumb) => 0,\n    getThumbBoundingClientRect: (_thumb: Thumb) => null!,\n    getBoundingClientRect: () => null!,\n    isRTL: () => false,\n    setThumbStyleProperty: (_propertyName: string, _value: string, _thumb: Thumb) => {},\n    removeThumbStyleProperty: (_propertyName: string, _thumb: Thumb) => {},\n    setTrackActiveStyleProperty: (_propertyName: string, _value: string) => {},\n    setValueIndicatorText: (_value: number, _thumb: Thumb) => {},\n    updateTickMarks: () => {},\n    setPointerCapture: (_pointerId: number) => {},\n    emitChangeEvent: (_value: number, _thumb: Thumb) => {},\n    emitInputEvent: (_value: number, _thumb: Thumb) => {},\n    registerEventHandler: () => {},\n    deregisterEventHandler: () => {},\n    registerThumbEventHandler: () => {},\n    deregisterThumbEventHandler: () => {},\n    registerBodyEventHandler: () => {},\n    deregisterBodyEventHandler: () => {},\n    registerWindowEventHandler: () => {},\n    deregisterWindowEventHandler: () => {},\n    removeTrackActiveStyleProperty: (_propertyName: string) => {},\n    emitDragStartEvent: (_value: number, _thumb: Thumb) => {},\n    emitDragEndEvent: (_value: number, _thumb: Thumb) => {},\n    getValueToAriaValueTextFn: () => null,\n    getInputValue: () => '',\n    setInputValue: (_value: string, _thumb: Thumb) => {},\n    getInputAttribute: (_attribute: string, _thumb: Thumb) => null,\n    setInputAttribute: (_attribute: string, _value: string) => {},\n    removeInputAttribute: (_attribute: string) => {},\n    focusInput: () => {},\n    isInputFocused: (_thumb: Thumb) => false,\n    registerInputEventHandler: (_thumb: Thumb, _evtType: string, _handler: any) => {},\n    deregisterInputEventHandler: (_thumb: Thumb, _evtType: string, _handler: any) => {},\n  };\n\n  /** Instance of the MDC slider foundation for this slider. */\n  private _foundation = new MDCSliderFoundation(this._sliderAdapter);\n\n  /** Whether the MDC foundation has been initialized. */\n  private _isInitialized = false;\n\n  /** Function that notifies the control value accessor about a value change. */\n  private _controlValueAccessorChangeFn: (value: number) => void = () => {};\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Function that marks the slider as touched. Registered via \"registerOnTouch\". */\n  _markAsTouched: () => any = () => {};\n\n  @ViewChild('thumbContainer') _thumbContainer: ElementRef<HTMLElement>;\n  @ViewChild('track') _track: ElementRef<HTMLElement>;\n  @ViewChild('pinValueMarker') _pinValueMarker: ElementRef<HTMLElement>;\n  @ViewChild('trackMarker') _trackMarker: ElementRef<HTMLElement>;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ngZone: NgZone,\n      private _platform: Platform,\n      @Optional() private _dir: Directionality,\n      @Attribute('tabindex') tabIndex: string,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        // In case the directionality changes, we need to refresh the rendered MDC slider.\n        // Note that we need to wait until the page actually updated as otherwise the\n        // client rectangle wouldn't reflect the new directionality.\n        // TODO(devversion): ideally the MDC slider would just compute dimensions similarly\n        // to the standard Material slider on \"mouseenter\".\n        this._ngZone.runOutsideAngular(() => setTimeout(() => this._foundation.layout()));\n      });\n    }\n  }\n\n  ngAfterViewInit() {\n    this._isInitialized = true;\n\n    if (this._platform.isBrowser) {\n      // The MDC slider foundation accesses DOM globals, so we cannot initialize the\n      // foundation on the server. The foundation would be needed to move the thumb\n      // to the proper position and to render the ticks.\n      // this._foundation.init();\n\n      // The standard Angular Material slider is always using discrete values. We always\n      // want to enable discrete values and support ticks, but want to still provide\n      // non-discrete slider visual looks if thumb label is disabled.\n      // TODO(devversion): check if we can get a public API for this.\n      // Tracked with: https://github.com/material-components/material-components-web/issues/5020\n      (this._foundation as any).isDiscrete_ = true;\n\n      // These bindings cannot be synced in the foundation, as the foundation is not\n      // initialized and they cause DOM globals to be accessed (to move the thumb)\n      this._syncStep();\n      this._syncMax();\n      this._syncMin();\n\n      // Note that \"value\" needs to be synced after \"max\" and \"min\" because otherwise\n      // the value will be clamped by the MDC foundation implementation.\n      this._syncValue();\n    }\n\n    this._syncDisabled();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this._isInitialized) {\n      return;\n    }\n\n    if (changes['step']) {\n      this._syncStep();\n    }\n    if (changes['max']) {\n      this._syncMax();\n    }\n    if (changes['min']) {\n      this._syncMin();\n    }\n    if (changes['disabled']) {\n      this._syncDisabled();\n    }\n    if (changes['value']) {\n      this._syncValue();\n    }\n    if (changes['tickInterval']) {\n      this._refreshTrackMarkers();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    // The foundation cannot be destroyed on the server, as the foundation\n    // has not be initialized on the server.\n    if (this._platform.isBrowser) {\n      this._foundation.destroy();\n    }\n  }\n\n  /** Focuses the slider. */\n  focus(options?: FocusOptions) {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Blurs the slider. */\n  blur() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /** Gets the display text of the current value. */\n  get displayValue() {\n    if (this.displayWith) {\n      return this.displayWith(this.value!).toString();\n    }\n    return this.value!.toString() || '0';\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(newValue: number): MatSliderChange {\n    const event = new MatSliderChange();\n    event.source = this;\n    event.value = newValue;\n    return event;\n  }\n\n  // TODO: disabled until we implement the new MDC slider.\n  /** Emits a change event and notifies the control value accessor. */\n  // tslint:disable-next-line:no-unused-variable\n  private _emitChangeEvent(newValue: number) {\n    this._controlValueAccessorChangeFn(newValue);\n    this.valueChange.emit(newValue);\n    this.change.emit(this._createChangeEvent(newValue));\n  }\n\n  // TODO: disabled until we implement the new MDC slider.\n  /** Computes the CSS background value for the track markers (aka ticks). */\n  // tslint:disable-next-line:no-unused-variable\n  private _getTrackMarkersBackground(min: number, max: number, step: number) {\n    if (!this.tickInterval) {\n      return '';\n    }\n\n    const markerWidth = `${TICK_MARKER_SIZE}px`;\n    const markerBackground =\n        `linear-gradient(to right, currentColor ${markerWidth}, transparent 0)`;\n\n    if (this.tickInterval === 'auto') {\n      const trackSize = this._elementRef.nativeElement.getBoundingClientRect().width;\n      const pixelsPerStep = trackSize * step / (max - min);\n      const stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      const pixelsPerTick = stepsPerTick * step;\n      return `${markerBackground} 0 center / ${pixelsPerTick}px 100% repeat-x`;\n    }\n\n    // keep calculation in css for better rounding/subpixel behavior\n    const markerAmount = `(((${max} - ${min}) / ${step}) / ${this.tickInterval})`;\n    const markerBkgdLayout =\n        `0 center / calc((100% - ${markerWidth}) / ${markerAmount}) 100% repeat-x`;\n    return `${markerBackground} ${markerBkgdLayout}`;\n  }\n\n  /** Method that ensures that track markers are refreshed. */\n  private _refreshTrackMarkers() {\n    // MDC only checks whether the slider has markers once on init by looking for the\n    // `mdc-slider--display-markers` class in the DOM, whereas we support changing and hiding\n    // the markers dynamically. This is a workaround until we can get a public API for it. See:\n    // https://github.com/material-components/material-components-web/issues/5020\n    (this._foundation as any).hasTrackMarker_ = this.tickInterval !== 0;\n\n    // TODO: disabled until we implement the new MDC slider.\n    // this._foundation.setupTrackMarker();\n  }\n\n  /** Syncs the \"step\" input value with the MDC foundation. */\n  private _syncStep() {\n    // TODO: disabled until we implement the new MDC slider.\n    // this._foundation.setStep(this.step);\n  }\n\n  /** Syncs the \"max\" input value with the MDC foundation. */\n  private _syncMax() {\n    // TODO: disabled until we implement the new MDC slider.\n    // this._foundation.setMax(this.max);\n  }\n\n  /** Syncs the \"min\" input value with the MDC foundation. */\n  private _syncMin() {\n    // TODO: disabled until we implement the new MDC slider.\n    // this._foundation.setMin(this.min);\n  }\n\n  /** Syncs the \"value\" input binding with the MDC foundation. */\n  private _syncValue() {\n    // TODO: disabled until we implement the new MDC slider.\n    // this._foundation.setValue(this.value!);\n  }\n\n  /** Syncs the \"disabled\" input value with the MDC foundation. */\n  private _syncDisabled() {\n    // TODO: disabled until we implement the new MDC slider.\n    // this._foundation.setDisabled(this.disabled);\n  }\n\n  /** Whether the slider is displayed in RTL-mode. */\n  _isRtl(): boolean {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: any) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this._markAsTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._syncDisabled();\n  }\n\n  /**\n   * Sets the model value.\n   * Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._syncValue();\n  }\n\n  static ngAcceptInputType_min: NumberInput;\n  static ngAcceptInputType_max: NumberInput;\n  static ngAcceptInputType_value: NumberInput;\n  static ngAcceptInputType_step: NumberInput;\n  static ngAcceptInputType_tickInterval: NumberInput;\n  static ngAcceptInputType_thumbLabel: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material-experimental/mdc-core';\nimport {MatSlider} from './slider';\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n})\nexport class MatSliderModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './slider';\nexport * from './module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["normalizePassiveListenerOptions","NG_VALUE_ACCESSOR","forwardRef","EventEmitter","MDCSliderFoundation","Subscription","coerceNumberProperty","coerceBooleanProperty","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","NgZone","Platform","Directionality","Optional","Attribute","Inject","ANIMATION_MODULE_TYPE","Output","Input","ViewChild","NgModule","MatCommonModule","CommonModule"],"mappings":"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"}