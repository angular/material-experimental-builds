{"version":3,"file":"material-experimental-mdc-slide-toggle.umd.js","sources":["../../../../../../src/material-experimental/mdc-slide-toggle/slide-toggle-config.ts","../../../../../../src/material-experimental/mdc-slide-toggle/slide-toggle.ts","../../../../../../src/material-experimental/mdc-slide-toggle/module.ts","../../../../../../src/material-experimental/mdc-slide-toggle/public-api.ts","../../../../../../src/material-experimental/mdc-slide-toggle/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /**\n   * Whether drag action triggers value changes in slide toggle.\n   * @deprecated No longer being used.\n   * @breaking-change 9.0.0.\n   */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ViewEncapsulation,\n  AfterViewInit,\n  OnDestroy,\n  forwardRef,\n  ViewChild,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  Attribute,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {MDCSwitchAdapter, MDCSwitchFoundation} from '@material/switch';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {ThemePalette, RippleAnimationConfig} from '@angular/material/core';\nimport {numbers} from '@material/ripple';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions,\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** Configuration for the ripple animation. */\nconst RIPPLE_ANIMATION_CONFIG: RippleAnimationConfig = {\n  enterDuration: numbers.DEACTIVATION_TIMEOUT_MS,\n  exitDuration: numbers.FG_DEACTIVATION_MS,\n};\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n@Component({\n  selector: 'mat-slide-toggle',\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  host: {\n    'class': 'mat-mdc-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color !== \"primary\" && color !== \"warn\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[class.mat-mdc-slide-toggle-focused]': '_focused',\n    '[class.mat-mdc-slide-toggle-checked]': 'checked',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  exportAs: 'matSlideToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n\n})\nexport class MatSlideToggle implements ControlValueAccessor, AfterViewInit, OnDestroy {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n  private _foundation: MDCSwitchFoundation;\n  private _adapter: MDCSwitchAdapter = {\n    addClass: className => this._switchElement.nativeElement.classList.add(className),\n    removeClass: className => this._switchElement.nativeElement.classList.remove(className),\n    setNativeControlChecked: checked => this._checked = checked,\n    setNativeControlDisabled: disabled => this._disabled = disabled,\n    setNativeControlAttr: (name, value) => {\n      this._inputElement.nativeElement.setAttribute(name, value);\n    }\n  };\n\n  /** Whether the slide toggle is currently focused. */\n  _focused: boolean;\n\n  /** Configuration for the underlying ripple. */\n  _rippleAnimation: RippleAnimationConfig = RIPPLE_ANIMATION_CONFIG;\n\n  /** The color palette  for this slide toggle. */\n  @Input() color: ThemePalette = 'accent';\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Tabindex for the input element. */\n  @Input()\n  get tabIndex(): number { return this._tabIndex; }\n  set tabIndex(value: number) {\n    this._tabIndex = coerceNumberProperty(value);\n  }\n  private _tabIndex: number;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n\n    if (this._foundation) {\n      this._foundation.setChecked(this._checked);\n    }\n  }\n\n  /** Whether to disable the ripple on this checkbox. */\n  @Input()\n  get disableRipple(): boolean {\n    return this._disableRipple;\n  }\n  set disableRipple(disableRipple: boolean) {\n    this._disableRipple = coerceBooleanProperty(disableRipple);\n  }\n  private _disableRipple = false;\n\n  /** Whether the slide toggle is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(disabled) {\n    this._disabled = coerceBooleanProperty(disabled);\n\n    if (this._foundation) {\n      this._foundation.setDisabled(this._disabled);\n    }\n  }\n  private _disabled = false;\n\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Event will be dispatched each time the slide-toggle input is toggled. */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   * @deprecated No longer being used.\n   * @breaking-change 9.0.0\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the MDC switch element. */\n  @ViewChild('switch') _switchElement: ElementRef<HTMLElement>;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    const foundation = this._foundation = new MDCSwitchFoundation(this._adapter);\n    foundation.setDisabled(this.disabled);\n    foundation.setChecked(this.checked);\n  }\n\n  ngOnDestroy() {\n    if (this._foundation) {\n      this._foundation.destroy();\n    }\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n    this.toggleChange.emit();\n    this._foundation.handleChange(event);\n\n    // When the slide toggle's config disabled toggle change event by setting\n    // `disableToggleValue: true`, the slide toggle's value does not change,\n    // and the checked state of the underlying input needs to be changed back.\n    if (this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /** Handles blur events on the native input. */\n  _onBlur() {\n    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n    // Angular does not expect events to be raised during change detection, so any state change\n    // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n    // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n    // telling the form control it has been touched until the next tick.\n    Promise.resolve().then(() => {\n      this._focused = false;\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  static ngAcceptInputType_tabIndex: NumberInput;\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_checked: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {_MatSlideToggleRequiredValidatorModule} from '@angular/material/slide-toggle';\nimport {MatSlideToggle} from './slide-toggle';\n\n@NgModule({\n  imports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatCommonModule,\n    MatRippleModule,\n    CommonModule\n  ],\n  exports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatSlideToggle,\n    MatCommonModule\n  ],\n  declarations: [MatSlideToggle],\n})\nexport class MatSlideToggleModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './slide-toggle';\nexport * from './slide-toggle-config';\nexport * from './module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["InjectionToken","numbers","NG_VALUE_ACCESSOR","forwardRef","EventEmitter","coerceNumberProperty","coerceBooleanProperty","MDCSwitchFoundation","Component","ViewEncapsulation","ChangeDetectionStrategy","ChangeDetectorRef","Attribute","Inject","Optional","ANIMATION_MODULE_TYPE","Input","Output","ViewChild","NgModule","_MatSlideToggleRequiredValidatorModule","MatCommonModule","MatRippleModule","CommonModule"],"mappings":"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"}