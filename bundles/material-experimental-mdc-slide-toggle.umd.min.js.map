{"version":3,"sources":["src/material-experimental/material-experimental-mdc-slide-toggle.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","materialExperimental","mdcSlideToggle","core","mdc","switch","forms","cdk","coercion","platformBrowser","animations","ripple","common","material","slideToggle","this","_switch","core$1","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","InjectionToken","providedIn","disableToggleValue","disableDragValue","nextUniqueId","RIPPLE_ANIMATION_CONFIG","enterDuration","numbers","DEACTIVATION_TIMEOUT_MS","exitDuration","FG_DEACTIVATION_MS","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatSlideToggle","multi","MatSlideToggleChange","source","checked","_changeDetectorRef","tabIndex","defaults","_animationMode","_this","_onChange","_","_onTouched","_uniqueId","_required","_checked","_adapter","addClass","className","_switchElement","nativeElement","classList","add","removeClass","remove","setNativeControlChecked","setNativeControlDisabled","disabled","_disabled","setNativeControlAttr","name","value","_inputElement","setAttribute","_rippleAnimation","color","id","labelPosition","ariaLabel","ariaLabelledby","_disableRipple","change","EventEmitter","toggleChange","parseInt","Object","defineProperty","prototype","get","_tabIndex","set","coerceNumberProperty","enumerable","configurable","coerceBooleanProperty","_foundation","setChecked","disableRipple","setDisabled","ngAfterViewInit","foundation","MDCSwitchFoundation","ngOnDestroy","destroy","_onChangeEvent","event","stopPropagation","emit","handleChange","_onInputClick","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focus","toggle","_onBlur","Promise","resolve","then","_focused","decorators","type","Component","args","selector","template","host","class","[id]","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","[class.mat-mdc-slide-toggle-focused]","[class.mat-mdc-slide-toggle-checked]","[class._mat-animation-noopable]","(focus)","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","styles","ctorParameters","ChangeDetectorRef","String","Attribute","undefined","Inject","Optional","ANIMATION_MODULE_TYPE","propDecorators","Input","required","Output","ViewChild","MatSlideToggleModule","NgModule","imports","_MatSlideToggleRequiredValidatorModule","MatCommonModule","MatRippleModule","CommonModule","declarations"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@material/switch'), require('@angular/forms'), require('@angular/cdk/coercion'), require('@angular/platform-browser/animations'), require('@material/ripple'), require('@angular/common'), require('@angular/material/core'), require('@angular/material/slide-toggle')) :\n    typeof define === 'function' && define.amd ? define('@angular/material-experimental/mdc-slide-toggle', ['exports', '@angular/core', '@material/switch', '@angular/forms', '@angular/cdk/coercion', '@angular/platform-browser/animations', '@material/ripple', '@angular/common', '@angular/material/core', '@angular/material/slide-toggle'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.materialExperimental = global.ng.materialExperimental || {}, global.ng.materialExperimental.mdcSlideToggle = {}), global.ng.core, global.mdc.switch, global.ng.forms, global.ng.cdk.coercion, global.ng.platformBrowser.animations, global.mdc.ripple, global.ng.common, global.ng.material.core, global.ng.material.slideToggle));\n}(this, (function (exports, core, _switch, forms, coercion, animations, ripple, common, core$1, slideToggle) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Injection token to be used to override the default options for `mat-slide-toggle`. */\n    var MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new core.InjectionToken('mat-slide-toggle-default-options', {\n        providedIn: 'root',\n        factory: function () { return ({ disableToggleValue: false, disableDragValue: false }); }\n    });\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Increasing integer for generating unique ids for slide-toggle components.\n    var nextUniqueId = 0;\n    /** Configuration for the ripple animation. */\n    var RIPPLE_ANIMATION_CONFIG = {\n        enterDuration: ripple.numbers.DEACTIVATION_TIMEOUT_MS,\n        exitDuration: ripple.numbers.FG_DEACTIVATION_MS,\n    };\n    /** @docs-private */\n    var MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n        provide: forms.NG_VALUE_ACCESSOR,\n        useExisting: core.forwardRef(function () { return MatSlideToggle; }),\n        multi: true\n    };\n    /** Change event object emitted by a MatSlideToggle. */\n    var MatSlideToggleChange = /** @class */ (function () {\n        function MatSlideToggleChange(\n        /** The source MatSlideToggle of the event. */\n        source, \n        /** The new `checked` value of the MatSlideToggle. */\n        checked) {\n            this.source = source;\n            this.checked = checked;\n        }\n        return MatSlideToggleChange;\n    }());\n    var MatSlideToggle = /** @class */ (function () {\n        function MatSlideToggle(_changeDetectorRef, tabIndex, defaults, _animationMode) {\n            var _this = this;\n            this._changeDetectorRef = _changeDetectorRef;\n            this.defaults = defaults;\n            this._animationMode = _animationMode;\n            this._onChange = function (_) { };\n            this._onTouched = function () { };\n            this._uniqueId = \"mat-mdc-slide-toggle-\" + ++nextUniqueId;\n            this._required = false;\n            this._checked = false;\n            this._adapter = {\n                addClass: function (className) { return _this._switchElement.nativeElement.classList.add(className); },\n                removeClass: function (className) { return _this._switchElement.nativeElement.classList.remove(className); },\n                setNativeControlChecked: function (checked) { return _this._checked = checked; },\n                setNativeControlDisabled: function (disabled) { return _this._disabled = disabled; },\n                setNativeControlAttr: function (name, value) {\n                    _this._inputElement.nativeElement.setAttribute(name, value);\n                }\n            };\n            /** Configuration for the underlying ripple. */\n            this._rippleAnimation = RIPPLE_ANIMATION_CONFIG;\n            /** The color palette  for this slide toggle. */\n            this.color = 'accent';\n            /** Name value will be applied to the input element if present. */\n            this.name = null;\n            /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n            this.id = this._uniqueId;\n            /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n            this.labelPosition = 'after';\n            /** Used to set the aria-label attribute on the underlying input element. */\n            this.ariaLabel = null;\n            /** Used to set the aria-labelledby attribute on the underlying input element. */\n            this.ariaLabelledby = null;\n            this._disableRipple = false;\n            this._disabled = false;\n            /** An event will be dispatched each time the slide-toggle changes its value. */\n            this.change = new core.EventEmitter();\n            /** Event will be dispatched each time the slide-toggle input is toggled. */\n            this.toggleChange = new core.EventEmitter();\n            this.tabIndex = parseInt(tabIndex) || 0;\n        }\n        Object.defineProperty(MatSlideToggle.prototype, \"tabIndex\", {\n            /** Tabindex for the input element. */\n            get: function () { return this._tabIndex; },\n            set: function (value) {\n                this._tabIndex = coercion.coerceNumberProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSlideToggle.prototype, \"required\", {\n            /** Whether the slide-toggle is required. */\n            get: function () { return this._required; },\n            set: function (value) { this._required = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSlideToggle.prototype, \"checked\", {\n            /** Whether the slide-toggle element is checked or not. */\n            get: function () { return this._checked; },\n            set: function (value) {\n                this._checked = coercion.coerceBooleanProperty(value);\n                if (this._foundation) {\n                    this._foundation.setChecked(this._checked);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSlideToggle.prototype, \"disableRipple\", {\n            /** Whether to disable the ripple on this checkbox. */\n            get: function () {\n                return this._disableRipple;\n            },\n            set: function (disableRipple) {\n                this._disableRipple = coercion.coerceBooleanProperty(disableRipple);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSlideToggle.prototype, \"disabled\", {\n            /** Whether the slide toggle is disabled. */\n            get: function () {\n                return this._disabled;\n            },\n            set: function (disabled) {\n                this._disabled = coercion.coerceBooleanProperty(disabled);\n                if (this._foundation) {\n                    this._foundation.setDisabled(this._disabled);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSlideToggle.prototype, \"inputId\", {\n            /** Returns the unique id for the visual hidden input. */\n            get: function () { return (this.id || this._uniqueId) + \"-input\"; },\n            enumerable: true,\n            configurable: true\n        });\n        MatSlideToggle.prototype.ngAfterViewInit = function () {\n            var foundation = this._foundation = new _switch.MDCSwitchFoundation(this._adapter);\n            foundation.setDisabled(this.disabled);\n            foundation.setChecked(this.checked);\n        };\n        MatSlideToggle.prototype.ngOnDestroy = function () {\n            if (this._foundation) {\n                this._foundation.destroy();\n            }\n        };\n        /** Method being called whenever the underlying input emits a change event. */\n        MatSlideToggle.prototype._onChangeEvent = function (event) {\n            // We always have to stop propagation on the change event.\n            // Otherwise the change event, from the input element, will bubble up and\n            // emit its event object to the component's `change` output.\n            event.stopPropagation();\n            this.toggleChange.emit();\n            this._foundation.handleChange(event);\n            // When the slide toggle's config disabled toggle change event by setting\n            // `disableToggleValue: true`, the slide toggle's value does not change,\n            // and the checked state of the underlying input needs to be changed back.\n            if (this.defaults.disableToggleValue) {\n                this._inputElement.nativeElement.checked = this.checked;\n                return;\n            }\n            // Sync the value from the underlying input element with the component instance.\n            this.checked = this._inputElement.nativeElement.checked;\n            // Emit our custom change event only if the underlying input emitted one. This ensures that\n            // there is no change event, when the checked state changes programmatically.\n            this._onChange(this.checked);\n            this.change.emit(new MatSlideToggleChange(this, this.checked));\n        };\n        /** Method being called whenever the slide-toggle has been clicked. */\n        MatSlideToggle.prototype._onInputClick = function (event) {\n            // We have to stop propagation for click events on the visual hidden input element.\n            // By default, when a user clicks on a label element, a generated click event will be\n            // dispatched on the associated input element. Since we are using a label element as our\n            // root container, the click event on the `slide-toggle` will be executed twice.\n            // The real click event will bubble up, and the generated click event also tries to bubble up.\n            // This will lead to multiple click events.\n            // Preventing bubbling for the second event will solve that issue.\n            event.stopPropagation();\n        };\n        /** Implemented as part of ControlValueAccessor. */\n        MatSlideToggle.prototype.writeValue = function (value) {\n            this.checked = !!value;\n            this._changeDetectorRef.markForCheck();\n        };\n        /** Implemented as part of ControlValueAccessor. */\n        MatSlideToggle.prototype.registerOnChange = function (fn) {\n            this._onChange = fn;\n        };\n        /** Implemented as part of ControlValueAccessor. */\n        MatSlideToggle.prototype.registerOnTouched = function (fn) {\n            this._onTouched = fn;\n        };\n        /** Implemented as a part of ControlValueAccessor. */\n        MatSlideToggle.prototype.setDisabledState = function (isDisabled) {\n            this.disabled = isDisabled;\n            this._changeDetectorRef.markForCheck();\n        };\n        /** Focuses the slide-toggle. */\n        MatSlideToggle.prototype.focus = function () {\n            this._inputElement.nativeElement.focus();\n        };\n        /** Toggles the checked state of the slide-toggle. */\n        MatSlideToggle.prototype.toggle = function () {\n            this.checked = !this.checked;\n            this._onChange(this.checked);\n        };\n        /** Handles blur events on the native input. */\n        MatSlideToggle.prototype._onBlur = function () {\n            var _this = this;\n            // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n            // Angular does not expect events to be raised during change detection, so any state change\n            // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n            // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n            // telling the form control it has been touched until the next tick.\n            Promise.resolve().then(function () {\n                _this._focused = false;\n                _this._onTouched();\n                _this._changeDetectorRef.markForCheck();\n            });\n        };\n        MatSlideToggle.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-slide-toggle',\n                        template: \"<div class=\\\"mdc-form-field\\\"\\n     [class.mdc-form-field--align-end]=\\\"labelPosition == 'before'\\\">\\n  <div class=\\\"mdc-switch\\\" #switch>\\n    <div class=\\\"mdc-switch__track\\\"></div>\\n    <div class=\\\"mdc-switch__thumb-underlay mat-mdc-focus-indicator\\\">\\n      <div class=\\\"mat-mdc-slide-toggle-ripple\\\" mat-ripple\\n        [matRippleTrigger]=\\\"switch\\\"\\n        [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n        [matRippleCentered]=\\\"true\\\"\\n        [matRippleAnimation]=\\\"_rippleAnimation\\\"></div>\\n      <div class=\\\"mdc-switch__thumb\\\">\\n          <input #input class=\\\"mdc-switch__native-control\\\" type=\\\"checkbox\\\"\\n            role=\\\"switch\\\"\\n            [id]=\\\"inputId\\\"\\n            [required]=\\\"required\\\"\\n            [tabIndex]=\\\"tabIndex\\\"\\n            [checked]=\\\"checked\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [attr.name]=\\\"name\\\"\\n            [attr.aria-checked]=\\\"checked.toString()\\\"\\n            [attr.aria-label]=\\\"ariaLabel\\\"\\n            [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n            (change)=\\\"_onChangeEvent($event)\\\"\\n            (click)=\\\"_onInputClick($event)\\\"\\n            (blur)=\\\"_onBlur()\\\"\\n            (focus)=\\\"_focused = true\\\">\\n      </div>\\n    </div>\\n  </div>\\n\\n  <label [for]=\\\"inputId\\\" (click)=\\\"$event.stopPropagation()\\\">\\n    <ng-content></ng-content>\\n  </label>\\n</div>\\n\",\n                        host: {\n                            'class': 'mat-mdc-slide-toggle',\n                            '[id]': 'id',\n                            '[attr.tabindex]': 'null',\n                            '[attr.aria-label]': 'null',\n                            '[attr.aria-labelledby]': 'null',\n                            '[class.mat-primary]': 'color === \"primary\"',\n                            '[class.mat-accent]': 'color !== \"primary\" && color !== \"warn\"',\n                            '[class.mat-warn]': 'color === \"warn\"',\n                            '[class.mat-mdc-slide-toggle-focused]': '_focused',\n                            '[class.mat-mdc-slide-toggle-checked]': 'checked',\n                            '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                            '(focus)': '_inputElement.nativeElement.focus()',\n                        },\n                        exportAs: 'matSlideToggle',\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                        styles: [\".mdc-switch__thumb-underlay{left:-18px;right:initial;top:-17px;width:48px;height:48px}[dir=rtl] .mdc-switch__thumb-underlay,.mdc-switch__thumb-underlay[dir=rtl]{left:initial;right:-18px}.mdc-switch__native-control{width:68px;height:48px}.mdc-switch{display:inline-block;position:relative;outline:none;user-select:none}.mdc-switch__native-control{left:0;right:initial;position:absolute;top:0;margin:0;opacity:0;cursor:pointer;pointer-events:auto;transition:transform 90ms cubic-bezier(0.4, 0, 0.2, 1)}[dir=rtl] .mdc-switch__native-control,.mdc-switch__native-control[dir=rtl]{left:initial;right:0}.mdc-switch__track{box-sizing:border-box;width:32px;height:14px;border:1px solid transparent;border-radius:7px;opacity:.38;transition:opacity 90ms cubic-bezier(0.4, 0, 0.2, 1),background-color 90ms cubic-bezier(0.4, 0, 0.2, 1),border-color 90ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-switch__thumb-underlay{display:flex;position:absolute;align-items:center;justify-content:center;transform:translateX(0);transition:transform 90ms cubic-bezier(0.4, 0, 0.2, 1),background-color 90ms cubic-bezier(0.4, 0, 0.2, 1),border-color 90ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-switch__thumb{box-sizing:border-box;width:20px;height:20px;border:10px solid;border-radius:50%;pointer-events:none;z-index:1}.mdc-switch--checked .mdc-switch__track{opacity:.54}.mdc-switch--checked .mdc-switch__thumb-underlay{transform:translateX(20px)}[dir=rtl] .mdc-switch--checked .mdc-switch__thumb-underlay,.mdc-switch--checked .mdc-switch__thumb-underlay[dir=rtl]{transform:translateX(-20px)}.mdc-switch--checked .mdc-switch__native-control{transform:translateX(-20px)}[dir=rtl] .mdc-switch--checked .mdc-switch__native-control,.mdc-switch--checked .mdc-switch__native-control[dir=rtl]{transform:translateX(20px)}.mdc-switch--disabled{opacity:.38;pointer-events:none}.mdc-switch--disabled .mdc-switch__thumb{border-width:1px}.mdc-switch--disabled .mdc-switch__native-control{cursor:default;pointer-events:none}.mdc-form-field{display:inline-flex;align-items:center;vertical-align:middle}.mdc-form-field>label{margin-left:0;margin-right:auto;padding-left:4px;padding-right:0;order:0}[dir=rtl] .mdc-form-field>label,.mdc-form-field>label[dir=rtl]{margin-left:auto;margin-right:0}[dir=rtl] .mdc-form-field>label,.mdc-form-field>label[dir=rtl]{padding-left:0;padding-right:4px}.mdc-form-field--nowrap>label{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.mdc-form-field--align-end>label{margin-left:auto;margin-right:0;padding-left:0;padding-right:4px;order:-1}[dir=rtl] .mdc-form-field--align-end>label,.mdc-form-field--align-end>label[dir=rtl]{margin-left:0;margin-right:auto}[dir=rtl] .mdc-form-field--align-end>label,.mdc-form-field--align-end>label[dir=rtl]{padding-left:4px;padding-right:0}.mdc-form-field--space-between{justify-content:space-between}.mdc-form-field--space-between>label{margin:0}[dir=rtl] .mdc-form-field--space-between>label,.mdc-form-field--space-between>label[dir=rtl]{margin:0}.mat-mdc-slide-toggle{display:inline-block}.mat-mdc-slide-toggle .mat-mdc-slide-toggle-ripple,.mat-mdc-slide-toggle .mdc-switch__thumb-underlay::after{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-mdc-slide-toggle .mdc-switch__thumb-underlay::after{border-radius:50%;content:\\\"\\\";opacity:0}.mat-mdc-slide-toggle .mdc-switch:hover .mdc-switch__thumb-underlay::after{opacity:.04;transition:mdc-switch-transition-enter(opacity, 0, 75ms)}.mat-mdc-slide-toggle.mat-mdc-slide-toggle-focused .mdc-switch .mdc-switch__thumb-underlay::after{opacity:.12}.mat-mdc-slide-toggle .mat-ripple-element{opacity:.12}.mat-mdc-slide-toggle .mat-ripple{border-radius:50%}.mat-mdc-slide-toggle._mat-animation-noopable .mdc-switch__thumb-underlay,.mat-mdc-slide-toggle._mat-animation-noopable .mdc-switch__thumb-underlay::after{transition:none}.cdk-high-contrast-active .mat-mdc-slide-toggle-focused .mdc-switch__track{outline:solid 2px;outline-offset:7px}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatSlideToggle.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef },\n            { type: String, decorators: [{ type: core.Attribute, args: ['tabindex',] }] },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations.ANIMATION_MODULE_TYPE,] }] }\n        ]; };\n        MatSlideToggle.propDecorators = {\n            color: [{ type: core.Input }],\n            name: [{ type: core.Input }],\n            id: [{ type: core.Input }],\n            tabIndex: [{ type: core.Input }],\n            labelPosition: [{ type: core.Input }],\n            ariaLabel: [{ type: core.Input, args: ['aria-label',] }],\n            ariaLabelledby: [{ type: core.Input, args: ['aria-labelledby',] }],\n            required: [{ type: core.Input }],\n            checked: [{ type: core.Input }],\n            disableRipple: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            change: [{ type: core.Output }],\n            toggleChange: [{ type: core.Output }],\n            _inputElement: [{ type: core.ViewChild, args: ['input',] }],\n            _switchElement: [{ type: core.ViewChild, args: ['switch',] }]\n        };\n        return MatSlideToggle;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatSlideToggleModule = /** @class */ (function () {\n        function MatSlideToggleModule() {\n        }\n        MatSlideToggleModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            slideToggle._MatSlideToggleRequiredValidatorModule,\n                            core$1.MatCommonModule,\n                            core$1.MatRippleModule,\n                            common.CommonModule\n                        ],\n                        exports: [\n                            slideToggle._MatSlideToggleRequiredValidatorModule,\n                            MatSlideToggle,\n                            core$1.MatCommonModule\n                        ],\n                        declarations: [MatSlideToggle],\n                    },] }\n        ];\n        return MatSlideToggleModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS;\n    exports.MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = MAT_SLIDE_TOGGLE_VALUE_ACCESSOR;\n    exports.MatSlideToggle = MatSlideToggle;\n    exports.MatSlideToggleChange = MatSlideToggleChange;\n    exports.MatSlideToggleModule = MatSlideToggleModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-experimental-mdc-slide-toggle.umd.js.map\n"]}