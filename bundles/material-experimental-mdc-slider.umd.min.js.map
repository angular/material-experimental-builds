{"version":3,"sources":["src/material-experimental/material-experimental-mdc-slider.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","materialExperimental","mdcSlider","cdk","bidi","coercion","platform","core","forms","platformBrowser","animations","mdc","slider","rxjs","common","material","this","core$1","passiveListenerOptions","normalizePassiveListenerOptions","passive","activeListenerOptions","MAT_SLIDER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatSlider","multi","MatSliderChange","_elementRef","_changeDetectorRef","_ngZone","_platform","_dir","tabIndex","_animationMode","_this","change","EventEmitter","input","valueChange","color","_min","_max","_value","_step","_tickInterval","_thumbLabel","_disabled","_sliderAdapter","hasClass","className","nativeElement","classList","contains","addClass","add","removeClass","remove","getAttribute","name","setAttribute","value","removeAttribute","computeBoundingRect","getBoundingClientRect","getTabIndex","registerInteractionHandler","evtType","handler","addEventListener","deregisterInteractionHandler","removeEventListener","registerThumbContainerInteractionHandler","runOutsideAngular","_thumbContainer","deregisterThumbContainerInteractionHandler","registerBodyInteractionHandler","document","body","deregisterBodyInteractionHandler","registerResizeHandler","window","deregisterResizeHandler","notifyInput","newValue","_foundation","getValue","emit","_createChangeEvent","notifyChange","_emitChangeEvent","setThumbContainerStyleProperty","propertyName","style","setProperty","setTrackStyleProperty","_track","setMarkerValue","markForCheck","setTrackMarkers","step","max","min","_trackMarker","_getTrackMarkersBackground","isRTL","_isRtl","MDCSliderFoundation","_isInitialized","_controlValueAccessorChangeFn","_dirChangeSubscription","Subscription","EMPTY","_markAsTouched","parseInt","subscribe","setTimeout","layout","Object","defineProperty","prototype","get","set","coerceNumberProperty","enumerable","configurable","v","coerceBooleanProperty","disabled","ngAfterViewInit","isBrowser","init","isDiscrete_","_syncStep","_syncMax","_syncMin","_syncValue","_syncDisabled","ngOnChanges","changes","_refreshTrackMarkers","ngOnDestroy","unsubscribe","destroy","focus","options","blur","displayWith","toString","event","source","tickInterval","markerBackground","trackSize","width","Math","ceil","hasTrackMarker_","setupTrackMarker","setStep","setMax","setMin","setValue","setDisabled","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","writeValue","decorators","type","Component","args","selector","template","host","class","role","aria-orientation","[attr.tabindex]","[class.mdc-slider--discrete]","[class.mat-slider-has-ticks]","[class.mdc-slider--display-markers]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-invert-mouse-coords]","[class.mat-slider-disabled]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","[class._mat-animation-noopable]","(blur)","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","styles","ctorParameters","ElementRef","ChangeDetectorRef","NgZone","Platform","Directionality","Optional","String","Attribute","Inject","ANIMATION_MODULE_TYPE","propDecorators","Output","Input","thumbLabel","ViewChild","_pinValueMarker","MatSliderModule","NgModule","imports","MatCommonModule","CommonModule","declarations"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/bidi'), require('@angular/cdk/coercion'), require('@angular/cdk/platform'), require('@angular/core'), require('@angular/forms'), require('@angular/platform-browser/animations'), require('@material/slider'), require('rxjs'), require('@angular/common'), require('@angular/material/core')) :\n    typeof define === 'function' && define.amd ? define('@angular/material-experimental/mdc-slider', ['exports', '@angular/cdk/bidi', '@angular/cdk/coercion', '@angular/cdk/platform', '@angular/core', '@angular/forms', '@angular/platform-browser/animations', '@material/slider', 'rxjs', '@angular/common', '@angular/material/core'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.materialExperimental = global.ng.materialExperimental || {}, global.ng.materialExperimental.mdcSlider = {}), global.ng.cdk.bidi, global.ng.cdk.coercion, global.ng.cdk.platform, global.ng.core, global.ng.forms, global.ng.platformBrowser.animations, global.mdc.slider, global.rxjs, global.ng.common, global.ng.material.core));\n}(this, (function (exports, bidi, coercion, platform, core, forms, animations, slider, rxjs, common, core$1) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n     * the default separation we chose.\n     */\n    var MIN_AUTO_TICK_SEPARATION = 30;\n    /**\n     * Size of a tick marker for a slider. The size of a tick is based on the Material\n     * Design guidelines and the MDC slider implementation.\n     * TODO(devversion): ideally MDC would expose the tick marker size as constant\n     */\n    var TICK_MARKER_SIZE = 2;\n    /** Event options used to bind passive listeners. */\n    var passiveListenerOptions = platform.normalizePassiveListenerOptions({ passive: true });\n    /** Event options used to bind active listeners. */\n    var activeListenerOptions = platform.normalizePassiveListenerOptions({ passive: false });\n    /**\n     * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n     * This allows it to support [(ngModel)] and [formControl].\n     * @docs-private\n     */\n    var MAT_SLIDER_VALUE_ACCESSOR = {\n        provide: forms.NG_VALUE_ACCESSOR,\n        useExisting: core.forwardRef(function () { return MatSlider; }),\n        multi: true\n    };\n    /** A simple change event emitted by the MatSlider component. */\n    var MatSliderChange = /** @class */ (function () {\n        function MatSliderChange() {\n        }\n        return MatSliderChange;\n    }());\n    var MatSlider = /** @class */ (function () {\n        function MatSlider(_elementRef, _changeDetectorRef, _ngZone, _platform, _dir, tabIndex, _animationMode) {\n            var _this = this;\n            this._elementRef = _elementRef;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._ngZone = _ngZone;\n            this._platform = _platform;\n            this._dir = _dir;\n            this._animationMode = _animationMode;\n            /** Event emitted when the slider value has changed. */\n            this.change = new core.EventEmitter();\n            /** Event emitted when the slider thumb moves. */\n            this.input = new core.EventEmitter();\n            /**\n             * Emits when the raw value of the slider changes. This is here primarily\n             * to facilitate the two-way binding for the `value` input.\n             * @docs-private\n             */\n            this.valueChange = new core.EventEmitter();\n            /** Tabindex for the slider. */\n            this.tabIndex = 0;\n            /** The color palette for this slider. */\n            this.color = 'accent';\n            this._min = 0;\n            this._max = 100;\n            this._value = null;\n            this._step = 1;\n            this._tickInterval = 0;\n            this._thumbLabel = false;\n            this._disabled = false;\n            /** Adapter for the MDC slider foundation. */\n            this._sliderAdapter = {\n                hasClass: function (className) { return _this._elementRef.nativeElement.classList.contains(className); },\n                addClass: function (className) { return _this._elementRef.nativeElement.classList.add(className); },\n                removeClass: function (className) { return _this._elementRef.nativeElement.classList.remove(className); },\n                getAttribute: function (name) { return _this._elementRef.nativeElement.getAttribute(name); },\n                setAttribute: function (name, value) { return _this._elementRef.nativeElement.setAttribute(name, value); },\n                removeAttribute: function (name) { return _this._elementRef.nativeElement.removeAttribute(name); },\n                computeBoundingRect: function () { return _this._elementRef.nativeElement.getBoundingClientRect(); },\n                getTabIndex: function () { return _this._elementRef.nativeElement.tabIndex; },\n                registerInteractionHandler: function (evtType, handler) {\n                    // Interaction event handlers (which handle keyboard interaction) cannot be passive\n                    // as they will prevent the default behavior. Additionally we can't run these event\n                    // handlers outside of the Angular zone because we rely on the events to cause the\n                    // component tree to be re-checked.\n                    // TODO: take in the event listener options from the adapter once MDC supports it.\n                    return _this._elementRef.nativeElement.addEventListener(evtType, handler, activeListenerOptions);\n                },\n                deregisterInteractionHandler: function (evtType, handler) {\n                    return _this._elementRef.nativeElement.removeEventListener(evtType, handler);\n                },\n                registerThumbContainerInteractionHandler: function (evtType, handler) {\n                    // The thumb container interaction handlers are currently just used for transition\n                    // events which don't need to run in the Angular zone.\n                    _this._ngZone.runOutsideAngular(function () {\n                        _this._thumbContainer.nativeElement\n                            .addEventListener(evtType, handler, passiveListenerOptions);\n                    });\n                },\n                deregisterThumbContainerInteractionHandler: function (evtType, handler) {\n                    _this._thumbContainer.nativeElement\n                        .removeEventListener(evtType, handler, passiveListenerOptions);\n                },\n                registerBodyInteractionHandler: function (evtType, handler) {\n                    // Body event handlers (which handle thumb sliding) cannot be passive as they will\n                    // prevent the default behavior. Additionally we can't run these event handlers\n                    // outside of the Angular zone because we rely on the events to cause the component\n                    // tree to be re-checked.\n                    return document.body.addEventListener(evtType, handler);\n                },\n                deregisterBodyInteractionHandler: function (evtType, handler) {\n                    return document.body.removeEventListener(evtType, handler);\n                },\n                registerResizeHandler: function (handler) {\n                    // The resize handler is currently responsible for detecting slider dimension\n                    // changes and therefore doesn't cause a value change that needs to be propagated.\n                    _this._ngZone.runOutsideAngular(function () { return window.addEventListener('resize', handler); });\n                },\n                deregisterResizeHandler: function (handler) { return window.removeEventListener('resize', handler); },\n                notifyInput: function () {\n                    var newValue = _this._foundation.getValue();\n                    // MDC currently fires the input event multiple times.\n                    // TODO(devversion): remove this check once the input notifications are fixed.\n                    if (newValue !== _this.value) {\n                        _this.value = newValue;\n                        _this.input.emit(_this._createChangeEvent(newValue));\n                    }\n                },\n                notifyChange: function () {\n                    // TODO(devversion): bug in MDC where only the \"change\" event is emitted if a keypress\n                    // updated the value. Material and native range sliders also emit an input event.\n                    // Usually we sync the \"value\" in the \"input\" event, but as a workaround we now sync\n                    // the value in the \"change\" event.\n                    _this.value = _this._foundation.getValue();\n                    _this._emitChangeEvent(_this.value);\n                },\n                setThumbContainerStyleProperty: function (propertyName, value) {\n                    _this._thumbContainer.nativeElement.style.setProperty(propertyName, value);\n                },\n                setTrackStyleProperty: function (propertyName, value) {\n                    _this._track.nativeElement.style.setProperty(propertyName, value);\n                },\n                setMarkerValue: function () {\n                    // Mark the component for check as the thumb label needs to be re-rendered.\n                    _this._changeDetectorRef.markForCheck();\n                },\n                setTrackMarkers: function (step, max, min) {\n                    _this._trackMarker.nativeElement.style.setProperty('background', _this._getTrackMarkersBackground(min, max, step));\n                },\n                isRTL: function () { return _this._isRtl(); },\n            };\n            /** Instance of the MDC slider foundation for this slider. */\n            this._foundation = new slider.MDCSliderFoundation(this._sliderAdapter);\n            /** Whether the MDC foundation has been initialized. */\n            this._isInitialized = false;\n            /** Function that notifies the control value accessor about a value change. */\n            this._controlValueAccessorChangeFn = function () { };\n            /** Subscription to the Directionality change EventEmitter. */\n            this._dirChangeSubscription = rxjs.Subscription.EMPTY;\n            /** Function that marks the slider as touched. Registered via \"registerOnTouch\". */\n            this._markAsTouched = function () { };\n            this.tabIndex = parseInt(tabIndex) || 0;\n            if (this._dir) {\n                this._dirChangeSubscription = this._dir.change.subscribe(function () {\n                    // In case the directionality changes, we need to refresh the rendered MDC slider.\n                    // Note that we need to wait until the page actually updated as otherwise the\n                    // client rectangle wouldn't reflect the new directionality.\n                    // TODO(devversion): ideally the MDC slider would just compute dimensions similarly\n                    // to the standard Material slider on \"mouseenter\".\n                    _this._ngZone.runOutsideAngular(function () { return setTimeout(function () { return _this._foundation.layout(); }); });\n                });\n            }\n        }\n        Object.defineProperty(MatSlider.prototype, \"min\", {\n            /** The minimum value that the slider can have. */\n            get: function () {\n                return this._min;\n            },\n            set: function (value) {\n                this._min = coercion.coerceNumberProperty(value);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(MatSlider.prototype, \"max\", {\n            /** The maximum value that the slider can have. */\n            get: function () {\n                return this._max;\n            },\n            set: function (value) {\n                this._max = coercion.coerceNumberProperty(value);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(MatSlider.prototype, \"value\", {\n            /** Value of the slider. */\n            get: function () {\n                // If the value needs to be read and it is still uninitialized, initialize\n                // it to the current minimum value.\n                if (this._value === null) {\n                    this.value = this.min;\n                }\n                return this._value;\n            },\n            set: function (value) {\n                this._value = coercion.coerceNumberProperty(value);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(MatSlider.prototype, \"step\", {\n            /** The values at which the thumb will snap. */\n            get: function () {\n                return this._step;\n            },\n            set: function (v) {\n                this._step = coercion.coerceNumberProperty(v, this._step);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(MatSlider.prototype, \"tickInterval\", {\n            /**\n             * How often to show ticks. Relative to the step so that a tick always appears on a step.\n             * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n             */\n            get: function () {\n                return this._tickInterval;\n            },\n            set: function (value) {\n                if (value === 'auto') {\n                    this._tickInterval = 'auto';\n                }\n                else if (typeof value === 'number' || typeof value === 'string') {\n                    this._tickInterval = coercion.coerceNumberProperty(value, this._tickInterval);\n                }\n                else {\n                    this._tickInterval = 0;\n                }\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(MatSlider.prototype, \"thumbLabel\", {\n            /** Whether or not to show the thumb label. */\n            get: function () {\n                return this._thumbLabel;\n            },\n            set: function (value) {\n                this._thumbLabel = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(MatSlider.prototype, \"disabled\", {\n            /** Whether the slider is disabled. */\n            get: function () {\n                return this._disabled;\n            },\n            set: function (disabled) {\n                this._disabled = coercion.coerceBooleanProperty(disabled);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        MatSlider.prototype.ngAfterViewInit = function () {\n            this._isInitialized = true;\n            if (this._platform.isBrowser) {\n                // The MDC slider foundation accesses DOM globals, so we cannot initialize the\n                // foundation on the server. The foundation would be needed to move the thumb\n                // to the proper position and to render the ticks.\n                this._foundation.init();\n                // The standard Angular Material slider is always using discrete values. We always\n                // want to enable discrete values and support ticks, but want to still provide\n                // non-discrete slider visual looks if thumb label is disabled.\n                // TODO(devversion): check if we can get a public API for this.\n                // Tracked with: https://github.com/material-components/material-components-web/issues/5020\n                this._foundation.isDiscrete_ = true;\n                // These bindings cannot be synced in the foundation, as the foundation is not\n                // initialized and they cause DOM globals to be accessed (to move the thumb)\n                this._syncStep();\n                this._syncMax();\n                this._syncMin();\n                // Note that \"value\" needs to be synced after \"max\" and \"min\" because otherwise\n                // the value will be clamped by the MDC foundation implementation.\n                this._syncValue();\n            }\n            this._syncDisabled();\n        };\n        MatSlider.prototype.ngOnChanges = function (changes) {\n            if (!this._isInitialized) {\n                return;\n            }\n            if (changes['step']) {\n                this._syncStep();\n            }\n            if (changes['max']) {\n                this._syncMax();\n            }\n            if (changes['min']) {\n                this._syncMin();\n            }\n            if (changes['disabled']) {\n                this._syncDisabled();\n            }\n            if (changes['value']) {\n                this._syncValue();\n            }\n            if (changes['tickInterval']) {\n                this._refreshTrackMarkers();\n            }\n        };\n        MatSlider.prototype.ngOnDestroy = function () {\n            this._dirChangeSubscription.unsubscribe();\n            // The foundation cannot be destroyed on the server, as the foundation\n            // has not be initialized on the server.\n            if (this._platform.isBrowser) {\n                this._foundation.destroy();\n            }\n        };\n        /** Focuses the slider. */\n        MatSlider.prototype.focus = function (options) {\n            this._elementRef.nativeElement.focus(options);\n        };\n        /** Blurs the slider. */\n        MatSlider.prototype.blur = function () {\n            this._elementRef.nativeElement.blur();\n        };\n        Object.defineProperty(MatSlider.prototype, \"displayValue\", {\n            /** Gets the display text of the current value. */\n            get: function () {\n                if (this.displayWith) {\n                    return this.displayWith(this.value).toString();\n                }\n                return this.value.toString() || '0';\n            },\n            enumerable: false,\n            configurable: true\n        });\n        /** Creates a slider change object from the specified value. */\n        MatSlider.prototype._createChangeEvent = function (newValue) {\n            var event = new MatSliderChange();\n            event.source = this;\n            event.value = newValue;\n            return event;\n        };\n        /** Emits a change event and notifies the control value accessor. */\n        MatSlider.prototype._emitChangeEvent = function (newValue) {\n            this._controlValueAccessorChangeFn(newValue);\n            this.valueChange.emit(newValue);\n            this.change.emit(this._createChangeEvent(newValue));\n        };\n        /** Computes the CSS background value for the track markers (aka ticks). */\n        MatSlider.prototype._getTrackMarkersBackground = function (min, max, step) {\n            if (!this.tickInterval) {\n                return '';\n            }\n            var markerWidth = TICK_MARKER_SIZE + \"px\";\n            var markerBackground = \"linear-gradient(to right, currentColor \" + markerWidth + \", transparent 0)\";\n            if (this.tickInterval === 'auto') {\n                var trackSize = this._elementRef.nativeElement.getBoundingClientRect().width;\n                var pixelsPerStep = trackSize * step / (max - min);\n                var stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n                var pixelsPerTick = stepsPerTick * step;\n                return markerBackground + \" 0 center / \" + pixelsPerTick + \"px 100% repeat-x\";\n            }\n            // keep calculation in css for better rounding/subpixel behavior\n            var markerAmount = \"(((\" + max + \" - \" + min + \") / \" + step + \") / \" + this.tickInterval + \")\";\n            var markerBkgdLayout = \"0 center / calc((100% - \" + markerWidth + \") / \" + markerAmount + \") 100% repeat-x\";\n            return markerBackground + \" \" + markerBkgdLayout;\n        };\n        /** Method that ensures that track markers are refreshed. */\n        MatSlider.prototype._refreshTrackMarkers = function () {\n            // MDC only checks whether the slider has markers once on init by looking for the\n            // `mdc-slider--display-markers` class in the DOM, whereas we support changing and hiding\n            // the markers dynamically. This is a workaround until we can get a public API for it. See:\n            // https://github.com/material-components/material-components-web/issues/5020\n            this._foundation.hasTrackMarker_ = this.tickInterval !== 0;\n            this._foundation.setupTrackMarker();\n        };\n        /** Syncs the \"step\" input value with the MDC foundation. */\n        MatSlider.prototype._syncStep = function () {\n            this._foundation.setStep(this.step);\n        };\n        /** Syncs the \"max\" input value with the MDC foundation. */\n        MatSlider.prototype._syncMax = function () {\n            this._foundation.setMax(this.max);\n        };\n        /** Syncs the \"min\" input value with the MDC foundation. */\n        MatSlider.prototype._syncMin = function () {\n            this._foundation.setMin(this.min);\n        };\n        /** Syncs the \"value\" input binding with the MDC foundation. */\n        MatSlider.prototype._syncValue = function () {\n            this._foundation.setValue(this.value);\n        };\n        /** Syncs the \"disabled\" input value with the MDC foundation. */\n        MatSlider.prototype._syncDisabled = function () {\n            this._foundation.setDisabled(this.disabled);\n        };\n        /** Whether the slider is displayed in RTL-mode. */\n        MatSlider.prototype._isRtl = function () {\n            return this._dir && this._dir.value === 'rtl';\n        };\n        /**\n         * Registers a callback to be triggered when the value has changed.\n         * Implemented as part of ControlValueAccessor.\n         * @param fn Callback to be registered.\n         */\n        MatSlider.prototype.registerOnChange = function (fn) {\n            this._controlValueAccessorChangeFn = fn;\n        };\n        /**\n         * Registers a callback to be triggered when the component is touched.\n         * Implemented as part of ControlValueAccessor.\n         * @param fn Callback to be registered.\n         */\n        MatSlider.prototype.registerOnTouched = function (fn) {\n            this._markAsTouched = fn;\n        };\n        /**\n         * Sets whether the component should be disabled.\n         * Implemented as part of ControlValueAccessor.\n         * @param isDisabled\n         */\n        MatSlider.prototype.setDisabledState = function (isDisabled) {\n            this.disabled = isDisabled;\n            this._syncDisabled();\n        };\n        /**\n         * Sets the model value.\n         * Implemented as part of ControlValueAccessor.\n         * @param value\n         */\n        MatSlider.prototype.writeValue = function (value) {\n            this.value = value;\n            this._syncValue();\n        };\n        MatSlider.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-slider',\n                        template: \"<div class=\\\"mdc-slider__track-container\\\">\\n  <div class=\\\"mdc-slider__track\\\" #track></div>\\n  <div class=\\\"mdc-slider__track-marker-container\\\" #trackMarker></div>\\n</div>\\n<div class=\\\"mdc-slider__thumb-container\\\" #thumbContainer>\\n  <div *ngIf=\\\"thumbLabel\\\" class=\\\"mdc-slider__pin\\\">\\n    <span class=\\\"mdc-slider__pin-value-marker\\\">{{displayValue}}</span>\\n  </div>\\n  <svg class=\\\"mdc-slider__thumb\\\" focusable=\\\"false\\\" width=\\\"21\\\" height=\\\"21\\\">\\n    <circle cx=\\\"10.5\\\" cy=\\\"10.5\\\" r=\\\"7.875\\\"></circle>\\n  </svg>\\n  <div class=\\\"mdc-slider__focus-ring\\\"></div>\\n</div>\\n\",\n                        host: {\n                            'class': 'mat-mdc-slider mdc-slider mat-mdc-focus-indicator',\n                            'role': 'slider',\n                            'aria-orientation': 'horizontal',\n                            // The tabindex if the slider turns disabled is managed by the MDC foundation which\n                            // dynamically updates and restores the \"tabindex\" attribute.\n                            '[attr.tabindex]': 'tabIndex || 0',\n                            '[class.mdc-slider--discrete]': 'thumbLabel',\n                            '[class.mat-slider-has-ticks]': 'tickInterval !== 0',\n                            '[class.mdc-slider--display-markers]': 'tickInterval !== 0',\n                            '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n                            // Class binding which is only used by the test harness as there is no other\n                            // way for the harness to detect if mouse coordinates need to be inverted.\n                            '[class.mat-slider-invert-mouse-coords]': '_isRtl()',\n                            '[class.mat-slider-disabled]': 'disabled',\n                            '[class.mat-primary]': 'color == \"primary\"',\n                            '[class.mat-accent]': 'color == \"accent\"',\n                            '[class.mat-warn]': 'color == \"warn\"',\n                            '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                            '(blur)': '_markAsTouched()',\n                        },\n                        exportAs: 'matSlider',\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        providers: [MAT_SLIDER_VALUE_ACCESSOR],\n                        styles: [\".mdc-slider{position:relative;width:100%;height:48px;cursor:pointer;touch-action:pan-x;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-slider--disable-touch-action{touch-action:none}.mdc-slider--disabled{cursor:auto}.mdc-slider:focus{outline:none}.mdc-slider__track-container{position:absolute;top:50%;width:100%;height:2px;overflow:hidden}.mdc-slider__track-container::after{position:absolute;top:0;left:0;display:block;width:100%;height:100%;content:\\\"\\\"}.mdc-slider__track{position:absolute;width:100%;height:100%;transform-origin:left top}.mdc-slider[dir=rtl] .mdc-slider__track,[dir=rtl] .mdc-slider .mdc-slider__track{transform-origin:right top}.mdc-slider__track-marker-container{display:flex;margin-right:0;margin-left:-1px;visibility:hidden}.mdc-slider[dir=rtl] .mdc-slider__track-marker-container,[dir=rtl] .mdc-slider .mdc-slider__track-marker-container{margin-right:-1px;margin-left:0}.mdc-slider__track-marker-container::after{display:block;width:2px;height:2px;content:\\\"\\\"}.mdc-slider__track-marker{flex:1}.mdc-slider__track-marker::after{display:block;width:2px;height:2px;content:\\\"\\\"}.mdc-slider__track-marker:first-child::after{width:3px}.mdc-slider__thumb-container{position:absolute;top:15px;left:0;width:21px;height:100%;user-select:none}.mdc-slider__thumb{position:absolute;top:0;left:0;transform:scale(0.571);stroke-width:3.5}.mdc-slider__focus-ring{width:21px;height:21px;border-radius:50%;opacity:0}.mdc-slider__pin{display:flex;position:absolute;top:0;left:0;align-items:center;justify-content:center;width:26px;height:26px;margin-top:-2px;margin-left:-2px;transform:rotate(-45deg) scale(0) translate(0, 0);border-radius:50% 50% 50% 0%;z-index:1}.mdc-slider__pin-value-marker{transform:rotate(45deg)}.mdc-slider--active .mdc-slider__thumb{transform:scale3d(1, 1, 1)}.mdc-slider--focus .mdc-slider__focus-ring{transform:scale3d(1.55, 1.55, 1.55);opacity:.25}.mdc-slider--discrete.mdc-slider--active .mdc-slider__thumb{transform:scale(calc(12 / 21))}.mdc-slider--discrete.mdc-slider--active .mdc-slider__pin{transform:rotate(-45deg) scale(1) translate(19px, -20px)}.mdc-slider--discrete.mdc-slider--display-markers .mdc-slider__track-marker-container{visibility:visible}.mat-mdc-slider{display:inline-block;box-sizing:border-box;outline:none;vertical-align:middle;margin-left:8px;margin-right:8px;width:auto;min-width:112px}.cdk-high-contrast-active .mat-mdc-slider .mdc-slider__track-container{height:0;outline:solid 2px;margin-top:1px}.cdk-high-contrast-active .mat-mdc-slider .mdc-slider__pin-value-marker{outline:solid 1px}@keyframes mdc-slider-emphasize{0%{animation-timing-function:ease-out}50%{animation-timing-function:ease-in;transform:scale(0.85)}100%{transform:scale(0.571)}}.mat-mdc-slider:not(._mat-animation-noopable) .mdc-slider__track{will-change:transform}.mat-mdc-slider:not(._mat-animation-noopable) .mdc-slider__thumb-container{will-change:transform}.mat-mdc-slider:not(._mat-animation-noopable) .mdc-slider__thumb{transition:transform 100ms ease-out,fill 100ms ease-out,stroke 100ms ease-out}.mat-mdc-slider:not(._mat-animation-noopable) .mdc-slider__focus-ring{transition:transform 266.67ms ease-out,opacity 266.67ms ease-out,background-color 266.67ms ease-out}.mat-mdc-slider:not(._mat-animation-noopable) .mdc-slider__pin{transition:transform 100ms ease-out}.mat-mdc-slider:not(._mat-animation-noopable) .mdc-slider--focus .mdc-slider__thumb{animation:mdc-slider-emphasize 266.67ms linear}.mat-mdc-slider:not(._mat-animation-noopable) .mdc-slider--in-transit .mdc-slider__thumb{transition-delay:140ms}.mat-mdc-slider:not(._mat-animation-noopable) .mdc-slider--in-transit .mdc-slider__thumb-container,.mat-mdc-slider:not(._mat-animation-noopable) .mdc-slider--in-transit .mdc-slider__track,.mat-mdc-slider:not(._mat-animation-noopable) .mdc-slider:focus:not(.mdc-slider--active) .mdc-slider__thumb-container,.mat-mdc-slider:not(._mat-animation-noopable) .mdc-slider:focus:not(.mdc-slider--active) .mdc-slider__track{transition:transform 80ms ease}.mat-mdc-slider:not(._mat-animation-noopable) .mdc-slider--discrete.mdc-slider--focus .mdc-slider__thumb{animation:none}.mat-slider-has-ticks:not(.mat-slider-disabled) .mdc-slider__track-marker-container{visibility:visible}\\n\"]\n                    },] }\n        ];\n        MatSlider.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: core.ChangeDetectorRef },\n            { type: core.NgZone },\n            { type: platform.Platform },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },\n            { type: String, decorators: [{ type: core.Attribute, args: ['tabindex',] }] },\n            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations.ANIMATION_MODULE_TYPE,] }] }\n        ]; };\n        MatSlider.propDecorators = {\n            change: [{ type: core.Output }],\n            input: [{ type: core.Output }],\n            valueChange: [{ type: core.Output }],\n            tabIndex: [{ type: core.Input }],\n            color: [{ type: core.Input }],\n            displayWith: [{ type: core.Input }],\n            min: [{ type: core.Input }],\n            max: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            step: [{ type: core.Input }],\n            tickInterval: [{ type: core.Input }],\n            thumbLabel: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            _thumbContainer: [{ type: core.ViewChild, args: ['thumbContainer',] }],\n            _track: [{ type: core.ViewChild, args: ['track',] }],\n            _pinValueMarker: [{ type: core.ViewChild, args: ['pinValueMarker',] }],\n            _trackMarker: [{ type: core.ViewChild, args: ['trackMarker',] }]\n        };\n        return MatSlider;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatSliderModule = /** @class */ (function () {\n        function MatSliderModule() {\n        }\n        MatSliderModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [core$1.MatCommonModule, common.CommonModule],\n                        exports: [MatSlider, core$1.MatCommonModule],\n                        declarations: [MatSlider],\n                    },] }\n        ];\n        return MatSliderModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_SLIDER_VALUE_ACCESSOR = MAT_SLIDER_VALUE_ACCESSOR;\n    exports.MatSlider = MatSlider;\n    exports.MatSliderChange = MatSliderChange;\n    exports.MatSliderModule = MatSliderModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-experimental-mdc-slider.umd.js.map\n"]}