{"version":3,"sources":["src/material-experimental/material-experimental-mdc-slider.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","materialExperimental","mdcSlider","cdk","bidi","coercion","platform","core","forms","platformBrowser","animations","mdc","slider","rxjs","common","mdcCore","this","normalizePassiveListenerOptions","passive","MatSliderModule","MAT_SLIDER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatSlider","multi","MatSliderChange","_elementRef","_ngZone","_platform","_dir","tabIndex","_animationMode","_this","change","EventEmitter","input","valueChange","color","_min","_max","_value","_step","_tickInterval","_thumbLabel","_disabled","_sliderAdapter","hasClass","_className","addClass","removeClass","getAttribute","_attribute","addThumbClass","_thumb","removeThumbClass","getThumbAttribute","setThumbAttribute","getThumbKnobWidth","isThumbFocused","focusThumb","getThumbBoundingClientRect","getBoundingClientRect","isRTL","setThumbStyleProperty","_propertyName","removeThumbStyleProperty","setTrackActiveStyleProperty","setValueIndicatorText","updateTickMarks","setPointerCapture","_pointerId","emitChangeEvent","emitInputEvent","registerEventHandler","deregisterEventHandler","registerThumbEventHandler","deregisterThumbEventHandler","registerBodyEventHandler","deregisterBodyEventHandler","registerWindowEventHandler","deregisterWindowEventHandler","removeTrackActiveStyleProperty","emitDragStartEvent","emitDragEndEvent","getValueToAriaValueTextFn","_foundation","MDCSliderFoundation","_isInitialized","_controlValueAccessorChangeFn","_dirChangeSubscription","Subscription","EMPTY","_markAsTouched","parseInt","subscribe","runOutsideAngular","setTimeout","layout","Object","defineProperty","prototype","get","set","value","coerceNumberProperty","enumerable","configurable","min","v","coerceBooleanProperty","disabled","ngAfterViewInit","isBrowser","isDiscrete_","_syncStep","_syncMax","_syncMin","_syncValue","_syncDisabled","ngOnChanges","changes","_refreshTrackMarkers","ngOnDestroy","unsubscribe","destroy","focus","options","nativeElement","blur","displayWith","toString","_createChangeEvent","newValue","event","source","_emitChangeEvent","emit","_getTrackMarkersBackground","max","step","tickInterval","markerBackground","trackSize","width","Math","ceil","hasTrackMarker_","_isRtl","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","writeValue","decorators","type","Component","args","selector","template","host","class","role","aria-orientation","[attr.tabindex]","[class.mdc-slider--discrete]","[class.mat-slider-has-ticks]","[class.mdc-slider--display-markers]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-invert-mouse-coords]","[class.mat-slider-disabled]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","[class._mat-animation-noopable]","(blur)","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","styles","ctorParameters","ElementRef","NgZone","Platform","Directionality","Optional","String","Attribute","Inject","ANIMATION_MODULE_TYPE","propDecorators","Output","Input","thumbLabel","_thumbContainer","ViewChild","_track","_pinValueMarker","_trackMarker","NgModule","imports","MatCommonModule","CommonModule","declarations"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/bidi'), require('@angular/cdk/coercion'), require('@angular/cdk/platform'), require('@angular/core'), require('@angular/forms'), require('@angular/platform-browser/animations'), require('@material/slider'), require('rxjs'), require('@angular/common'), require('@angular/material-experimental/mdc-core')) :\n    typeof define === 'function' && define.amd ? define('@angular/material-experimental/mdc-slider', ['exports', '@angular/cdk/bidi', '@angular/cdk/coercion', '@angular/cdk/platform', '@angular/core', '@angular/forms', '@angular/platform-browser/animations', '@material/slider', 'rxjs', '@angular/common', '@angular/material-experimental/mdc-core'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.materialExperimental = global.ng.materialExperimental || {}, global.ng.materialExperimental.mdcSlider = {}), global.ng.cdk.bidi, global.ng.cdk.coercion, global.ng.cdk.platform, global.ng.core, global.ng.forms, global.ng.platformBrowser.animations, global.mdc.slider, global.rxjs, global.ng.common, global.ng.materialExperimental.mdcCore));\n}(this, (function (exports, bidi, coercion, platform, core, forms, animations, slider, rxjs, common, mdcCore) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n     * the default separation we chose.\n     */\n    var MIN_AUTO_TICK_SEPARATION = 30;\n    /**\n     * Size of a tick marker for a slider. The size of a tick is based on the Material\n     * Design guidelines and the MDC slider implementation.\n     * TODO(devversion): ideally MDC would expose the tick marker size as constant\n     */\n    var TICK_MARKER_SIZE = 2;\n    // TODO: disabled until we implement the new MDC slider.\n    /** Event options used to bind passive listeners. */\n    // tslint:disable-next-line:no-unused-variable\n    var passiveListenerOptions = platform.normalizePassiveListenerOptions({ passive: true });\n    // TODO: disabled until we implement the new MDC slider.\n    /** Event options used to bind active listeners. */\n    // tslint:disable-next-line:no-unused-variable\n    var activeListenerOptions = platform.normalizePassiveListenerOptions({ passive: false });\n    /**\n     * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n     * This allows it to support [(ngModel)] and [formControl].\n     * @docs-private\n     */\n    var MAT_SLIDER_VALUE_ACCESSOR = {\n        provide: forms.NG_VALUE_ACCESSOR,\n        useExisting: core.forwardRef(function () { return MatSlider; }),\n        multi: true\n    };\n    /** A simple change event emitted by the MatSlider component. */\n    var MatSliderChange = /** @class */ (function () {\n        function MatSliderChange() {\n        }\n        return MatSliderChange;\n    }());\n    var MatSlider = /** @class */ (function () {\n        function MatSlider(_elementRef, _ngZone, _platform, _dir, tabIndex, _animationMode) {\n            var _this = this;\n            this._elementRef = _elementRef;\n            this._ngZone = _ngZone;\n            this._platform = _platform;\n            this._dir = _dir;\n            this._animationMode = _animationMode;\n            /** Event emitted when the slider value has changed. */\n            this.change = new core.EventEmitter();\n            /** Event emitted when the slider thumb moves. */\n            this.input = new core.EventEmitter();\n            /**\n             * Emits when the raw value of the slider changes. This is here primarily\n             * to facilitate the two-way binding for the `value` input.\n             * @docs-private\n             */\n            this.valueChange = new core.EventEmitter();\n            /** Tabindex for the slider. */\n            this.tabIndex = 0;\n            /** The color palette for this slider. */\n            this.color = 'accent';\n            this._min = 0;\n            this._max = 100;\n            this._value = null;\n            this._step = 1;\n            this._tickInterval = 0;\n            this._thumbLabel = false;\n            this._disabled = false;\n            /** Adapter for the MDC slider foundation. */\n            this._sliderAdapter = {\n                hasClass: function (_className) { return false; },\n                addClass: function (_className) { },\n                removeClass: function (_className) { },\n                getAttribute: function (_attribute) { return null; },\n                addThumbClass: function (_className, _thumb) { },\n                removeThumbClass: function (_className, _thumb) { },\n                getThumbAttribute: function (_attribute, _thumb) { return null; },\n                setThumbAttribute: function (_attribute, _value, _thumb) { },\n                getThumbKnobWidth: function (_thumb) { return 0; },\n                isThumbFocused: function (_thumb) { return false; },\n                focusThumb: function (_thumb) { },\n                getThumbBoundingClientRect: function (_thumb) { return null; },\n                getBoundingClientRect: function () { return null; },\n                isRTL: function () { return false; },\n                setThumbStyleProperty: function (_propertyName, _value, _thumb) { },\n                removeThumbStyleProperty: function (_propertyName, _thumb) { },\n                setTrackActiveStyleProperty: function (_propertyName, _value) { },\n                setValueIndicatorText: function (_value, _thumb) { },\n                updateTickMarks: function () { },\n                setPointerCapture: function (_pointerId) { },\n                emitChangeEvent: function (_value, _thumb) { },\n                emitInputEvent: function (_value, _thumb) { },\n                registerEventHandler: function () { },\n                deregisterEventHandler: function () { },\n                registerThumbEventHandler: function () { },\n                deregisterThumbEventHandler: function () { },\n                registerBodyEventHandler: function () { },\n                deregisterBodyEventHandler: function () { },\n                registerWindowEventHandler: function () { },\n                deregisterWindowEventHandler: function () { },\n                removeTrackActiveStyleProperty: function (_propertyName) { },\n                emitDragStartEvent: function (_value, _thumb) { },\n                emitDragEndEvent: function (_value, _thumb) { },\n                getValueToAriaValueTextFn: function () { return null; }\n            };\n            /** Instance of the MDC slider foundation for this slider. */\n            this._foundation = new slider.MDCSliderFoundation(this._sliderAdapter);\n            /** Whether the MDC foundation has been initialized. */\n            this._isInitialized = false;\n            /** Function that notifies the control value accessor about a value change. */\n            this._controlValueAccessorChangeFn = function () { };\n            /** Subscription to the Directionality change EventEmitter. */\n            this._dirChangeSubscription = rxjs.Subscription.EMPTY;\n            /** Function that marks the slider as touched. Registered via \"registerOnTouch\". */\n            this._markAsTouched = function () { };\n            this.tabIndex = parseInt(tabIndex) || 0;\n            if (this._dir) {\n                this._dirChangeSubscription = this._dir.change.subscribe(function () {\n                    // In case the directionality changes, we need to refresh the rendered MDC slider.\n                    // Note that we need to wait until the page actually updated as otherwise the\n                    // client rectangle wouldn't reflect the new directionality.\n                    // TODO(devversion): ideally the MDC slider would just compute dimensions similarly\n                    // to the standard Material slider on \"mouseenter\".\n                    _this._ngZone.runOutsideAngular(function () { return setTimeout(function () { return _this._foundation.layout(); }); });\n                });\n            }\n        }\n        Object.defineProperty(MatSlider.prototype, \"min\", {\n            /** The minimum value that the slider can have. */\n            get: function () {\n                return this._min;\n            },\n            set: function (value) {\n                this._min = coercion.coerceNumberProperty(value);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(MatSlider.prototype, \"max\", {\n            /** The maximum value that the slider can have. */\n            get: function () {\n                return this._max;\n            },\n            set: function (value) {\n                this._max = coercion.coerceNumberProperty(value);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(MatSlider.prototype, \"value\", {\n            /** Value of the slider. */\n            get: function () {\n                // If the value needs to be read and it is still uninitialized, initialize\n                // it to the current minimum value.\n                if (this._value === null) {\n                    this.value = this.min;\n                }\n                return this._value;\n            },\n            set: function (value) {\n                this._value = coercion.coerceNumberProperty(value);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(MatSlider.prototype, \"step\", {\n            /** The values at which the thumb will snap. */\n            get: function () {\n                return this._step;\n            },\n            set: function (v) {\n                this._step = coercion.coerceNumberProperty(v, this._step);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(MatSlider.prototype, \"tickInterval\", {\n            /**\n             * How often to show ticks. Relative to the step so that a tick always appears on a step.\n             * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n             */\n            get: function () {\n                return this._tickInterval;\n            },\n            set: function (value) {\n                if (value === 'auto') {\n                    this._tickInterval = 'auto';\n                }\n                else if (typeof value === 'number' || typeof value === 'string') {\n                    this._tickInterval = coercion.coerceNumberProperty(value, this._tickInterval);\n                }\n                else {\n                    this._tickInterval = 0;\n                }\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(MatSlider.prototype, \"thumbLabel\", {\n            /** Whether or not to show the thumb label. */\n            get: function () {\n                return this._thumbLabel;\n            },\n            set: function (value) {\n                this._thumbLabel = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(MatSlider.prototype, \"disabled\", {\n            /** Whether the slider is disabled. */\n            get: function () {\n                return this._disabled;\n            },\n            set: function (disabled) {\n                this._disabled = coercion.coerceBooleanProperty(disabled);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        MatSlider.prototype.ngAfterViewInit = function () {\n            this._isInitialized = true;\n            if (this._platform.isBrowser) {\n                // The MDC slider foundation accesses DOM globals, so we cannot initialize the\n                // foundation on the server. The foundation would be needed to move the thumb\n                // to the proper position and to render the ticks.\n                // this._foundation.init();\n                // The standard Angular Material slider is always using discrete values. We always\n                // want to enable discrete values and support ticks, but want to still provide\n                // non-discrete slider visual looks if thumb label is disabled.\n                // TODO(devversion): check if we can get a public API for this.\n                // Tracked with: https://github.com/material-components/material-components-web/issues/5020\n                this._foundation.isDiscrete_ = true;\n                // These bindings cannot be synced in the foundation, as the foundation is not\n                // initialized and they cause DOM globals to be accessed (to move the thumb)\n                this._syncStep();\n                this._syncMax();\n                this._syncMin();\n                // Note that \"value\" needs to be synced after \"max\" and \"min\" because otherwise\n                // the value will be clamped by the MDC foundation implementation.\n                this._syncValue();\n            }\n            this._syncDisabled();\n        };\n        MatSlider.prototype.ngOnChanges = function (changes) {\n            if (!this._isInitialized) {\n                return;\n            }\n            if (changes['step']) {\n                this._syncStep();\n            }\n            if (changes['max']) {\n                this._syncMax();\n            }\n            if (changes['min']) {\n                this._syncMin();\n            }\n            if (changes['disabled']) {\n                this._syncDisabled();\n            }\n            if (changes['value']) {\n                this._syncValue();\n            }\n            if (changes['tickInterval']) {\n                this._refreshTrackMarkers();\n            }\n        };\n        MatSlider.prototype.ngOnDestroy = function () {\n            this._dirChangeSubscription.unsubscribe();\n            // The foundation cannot be destroyed on the server, as the foundation\n            // has not be initialized on the server.\n            if (this._platform.isBrowser) {\n                this._foundation.destroy();\n            }\n        };\n        /** Focuses the slider. */\n        MatSlider.prototype.focus = function (options) {\n            this._elementRef.nativeElement.focus(options);\n        };\n        /** Blurs the slider. */\n        MatSlider.prototype.blur = function () {\n            this._elementRef.nativeElement.blur();\n        };\n        Object.defineProperty(MatSlider.prototype, \"displayValue\", {\n            /** Gets the display text of the current value. */\n            get: function () {\n                if (this.displayWith) {\n                    return this.displayWith(this.value).toString();\n                }\n                return this.value.toString() || '0';\n            },\n            enumerable: false,\n            configurable: true\n        });\n        /** Creates a slider change object from the specified value. */\n        MatSlider.prototype._createChangeEvent = function (newValue) {\n            var event = new MatSliderChange();\n            event.source = this;\n            event.value = newValue;\n            return event;\n        };\n        // TODO: disabled until we implement the new MDC slider.\n        /** Emits a change event and notifies the control value accessor. */\n        // tslint:disable-next-line:no-unused-variable\n        MatSlider.prototype._emitChangeEvent = function (newValue) {\n            this._controlValueAccessorChangeFn(newValue);\n            this.valueChange.emit(newValue);\n            this.change.emit(this._createChangeEvent(newValue));\n        };\n        // TODO: disabled until we implement the new MDC slider.\n        /** Computes the CSS background value for the track markers (aka ticks). */\n        // tslint:disable-next-line:no-unused-variable\n        MatSlider.prototype._getTrackMarkersBackground = function (min, max, step) {\n            if (!this.tickInterval) {\n                return '';\n            }\n            var markerWidth = TICK_MARKER_SIZE + \"px\";\n            var markerBackground = \"linear-gradient(to right, currentColor \" + markerWidth + \", transparent 0)\";\n            if (this.tickInterval === 'auto') {\n                var trackSize = this._elementRef.nativeElement.getBoundingClientRect().width;\n                var pixelsPerStep = trackSize * step / (max - min);\n                var stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n                var pixelsPerTick = stepsPerTick * step;\n                return markerBackground + \" 0 center / \" + pixelsPerTick + \"px 100% repeat-x\";\n            }\n            // keep calculation in css for better rounding/subpixel behavior\n            var markerAmount = \"(((\" + max + \" - \" + min + \") / \" + step + \") / \" + this.tickInterval + \")\";\n            var markerBkgdLayout = \"0 center / calc((100% - \" + markerWidth + \") / \" + markerAmount + \") 100% repeat-x\";\n            return markerBackground + \" \" + markerBkgdLayout;\n        };\n        /** Method that ensures that track markers are refreshed. */\n        MatSlider.prototype._refreshTrackMarkers = function () {\n            // MDC only checks whether the slider has markers once on init by looking for the\n            // `mdc-slider--display-markers` class in the DOM, whereas we support changing and hiding\n            // the markers dynamically. This is a workaround until we can get a public API for it. See:\n            // https://github.com/material-components/material-components-web/issues/5020\n            this._foundation.hasTrackMarker_ = this.tickInterval !== 0;\n            // TODO: disabled until we implement the new MDC slider.\n            // this._foundation.setupTrackMarker();\n        };\n        /** Syncs the \"step\" input value with the MDC foundation. */\n        MatSlider.prototype._syncStep = function () {\n            // TODO: disabled until we implement the new MDC slider.\n            // this._foundation.setStep(this.step);\n        };\n        /** Syncs the \"max\" input value with the MDC foundation. */\n        MatSlider.prototype._syncMax = function () {\n            // TODO: disabled until we implement the new MDC slider.\n            // this._foundation.setMax(this.max);\n        };\n        /** Syncs the \"min\" input value with the MDC foundation. */\n        MatSlider.prototype._syncMin = function () {\n            // TODO: disabled until we implement the new MDC slider.\n            // this._foundation.setMin(this.min);\n        };\n        /** Syncs the \"value\" input binding with the MDC foundation. */\n        MatSlider.prototype._syncValue = function () {\n            // TODO: disabled until we implement the new MDC slider.\n            // this._foundation.setValue(this.value!);\n        };\n        /** Syncs the \"disabled\" input value with the MDC foundation. */\n        MatSlider.prototype._syncDisabled = function () {\n            // TODO: disabled until we implement the new MDC slider.\n            // this._foundation.setDisabled(this.disabled);\n        };\n        /** Whether the slider is displayed in RTL-mode. */\n        MatSlider.prototype._isRtl = function () {\n            return this._dir && this._dir.value === 'rtl';\n        };\n        /**\n         * Registers a callback to be triggered when the value has changed.\n         * Implemented as part of ControlValueAccessor.\n         * @param fn Callback to be registered.\n         */\n        MatSlider.prototype.registerOnChange = function (fn) {\n            this._controlValueAccessorChangeFn = fn;\n        };\n        /**\n         * Registers a callback to be triggered when the component is touched.\n         * Implemented as part of ControlValueAccessor.\n         * @param fn Callback to be registered.\n         */\n        MatSlider.prototype.registerOnTouched = function (fn) {\n            this._markAsTouched = fn;\n        };\n        /**\n         * Sets whether the component should be disabled.\n         * Implemented as part of ControlValueAccessor.\n         * @param isDisabled\n         */\n        MatSlider.prototype.setDisabledState = function (isDisabled) {\n            this.disabled = isDisabled;\n            this._syncDisabled();\n        };\n        /**\n         * Sets the model value.\n         * Implemented as part of ControlValueAccessor.\n         * @param value\n         */\n        MatSlider.prototype.writeValue = function (value) {\n            this.value = value;\n            this._syncValue();\n        };\n        return MatSlider;\n    }());\n    MatSlider.decorators = [\n        { type: core.Component, args: [{\n                    selector: 'mat-slider',\n                    template: \"<!-- TODO: to be implemented as a part of the new MDC slider -->\\n\",\n                    host: {\n                        'class': 'mat-mdc-slider mdc-slider mat-mdc-focus-indicator',\n                        'role': 'slider',\n                        'aria-orientation': 'horizontal',\n                        // The tabindex if the slider turns disabled is managed by the MDC foundation which\n                        // dynamically updates and restores the \"tabindex\" attribute.\n                        '[attr.tabindex]': 'tabIndex || 0',\n                        '[class.mdc-slider--discrete]': 'thumbLabel',\n                        '[class.mat-slider-has-ticks]': 'tickInterval !== 0',\n                        '[class.mdc-slider--display-markers]': 'tickInterval !== 0',\n                        '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n                        // Class binding which is only used by the test harness as there is no other\n                        // way for the harness to detect if mouse coordinates need to be inverted.\n                        '[class.mat-slider-invert-mouse-coords]': '_isRtl()',\n                        '[class.mat-slider-disabled]': 'disabled',\n                        '[class.mat-primary]': 'color == \"primary\"',\n                        '[class.mat-accent]': 'color == \"accent\"',\n                        '[class.mat-warn]': 'color == \"warn\"',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '(blur)': '_markAsTouched()',\n                    },\n                    exportAs: 'matSlider',\n                    encapsulation: core.ViewEncapsulation.None,\n                    changeDetection: core.ChangeDetectionStrategy.OnPush,\n                    providers: [MAT_SLIDER_VALUE_ACCESSOR],\n                    styles: [\".mat-mdc-slider{display:inline-block;box-sizing:border-box;outline:none;vertical-align:middle;margin-left:8px;margin-right:8px;width:auto;min-width:112px}.cdk-high-contrast-active .mat-mdc-slider .mdc-slider__track-container{height:0;outline:solid 2px;margin-top:1px}.cdk-high-contrast-active .mat-mdc-slider .mdc-slider__pin-value-marker{outline:solid 1px}.mat-slider-has-ticks:not(.mat-slider-disabled) .mdc-slider__track-marker-container{visibility:visible}\\n\"]\n                },] }\n    ];\n    MatSlider.ctorParameters = function () { return [\n        { type: core.ElementRef },\n        { type: core.NgZone },\n        { type: platform.Platform },\n        { type: bidi.Directionality, decorators: [{ type: core.Optional }] },\n        { type: String, decorators: [{ type: core.Attribute, args: ['tabindex',] }] },\n        { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations.ANIMATION_MODULE_TYPE,] }] }\n    ]; };\n    MatSlider.propDecorators = {\n        change: [{ type: core.Output }],\n        input: [{ type: core.Output }],\n        valueChange: [{ type: core.Output }],\n        tabIndex: [{ type: core.Input }],\n        color: [{ type: core.Input }],\n        displayWith: [{ type: core.Input }],\n        min: [{ type: core.Input }],\n        max: [{ type: core.Input }],\n        value: [{ type: core.Input }],\n        step: [{ type: core.Input }],\n        tickInterval: [{ type: core.Input }],\n        thumbLabel: [{ type: core.Input }],\n        disabled: [{ type: core.Input }],\n        _thumbContainer: [{ type: core.ViewChild, args: ['thumbContainer',] }],\n        _track: [{ type: core.ViewChild, args: ['track',] }],\n        _pinValueMarker: [{ type: core.ViewChild, args: ['pinValueMarker',] }],\n        _trackMarker: [{ type: core.ViewChild, args: ['trackMarker',] }]\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatSliderModule = /** @class */ (function () {\n        function MatSliderModule() {\n        }\n        return MatSliderModule;\n    }());\n    MatSliderModule.decorators = [\n        { type: core.NgModule, args: [{\n                    imports: [mdcCore.MatCommonModule, common.CommonModule],\n                    exports: [MatSlider, mdcCore.MatCommonModule],\n                    declarations: [MatSlider],\n                },] }\n    ];\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_SLIDER_VALUE_ACCESSOR = MAT_SLIDER_VALUE_ACCESSOR;\n    exports.MatSlider = MatSlider;\n    exports.MatSliderChange = MatSliderChange;\n    exports.MatSliderModule = MatSliderModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-experimental-mdc-slider.umd.js.map\n"]}