{"version":3,"sources":["src/material-experimental/material-experimental-mdc-chips.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","materialExperimental","mdcChips","cdk","bidi","coercion","platformBrowser","animations","core","material","mdc","chips","ripple","keycodes","rxjs","operators","a11y","forms","formField","common","this","core$1","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","MatChipAvatar","_changeDetectorRef","_elementRef","setClass","cssClass","active","nativeElement","classList","toggle","markForCheck","decorators","type","Directive","args","selector","host","class","role","ctorParameters","ChangeDetectorRef","ElementRef","MatChipTrailingIcon","_this","_adapter","focus","getAttribute","name","setAttribute","notifyInteraction","notifyNavigation","_foundation","MDCChipTrailingActionFoundation","ngOnDestroy","destroy","isNavigable","tabindex","aria-hidden","MatChipRemoveBase","_super","elementRef","MatChipRemove","interaction","Subject","nodeName","inputs","[tabIndex]","(click)","(keydown)","[attr.aria-hidden]","mixinTabIndex","mixinDisabled","uid","RIPPLE_ANIMATION_CONFIG","enterDuration","numbers","DEACTIVATION_TIMEOUT_MS","exitDuration","FG_DEACTIVATION_MS","MatChipCssInternalOnly","MatChip","_ngZone","_dir","animationMode","_rippleAnimation","_isRippleCentered","_onFocus","_onBlur","HANDLED_KEYS","Set","SPACE","ENTER","_hasFocusInternal","_uniqueId","id","_disabled","_removable","_highlighted","removeIconInteraction","EventEmitter","destroyed","removed","basicChipAttrName","_destroyed","_chipAdapter","addClass","className","_setMdcClass","removeClass","hasClass","contains","addClassToLeadingIcon","leadingIcon","removeClassFromLeadingIcon","eventTargetHasClass","target","_notifyInteraction","notifySelection","_notifyNavigation","notifyTrailingIconInteraction","emit","notifyRemoval","chip","style","display","getComputedStyleValue","propertyName","window","getComputedStyle","getPropertyValue","setStyleProperty","setProperty","hasLeadingIcon","isTrailingActionNavigable","trailingIcon","isRTL","focusPrimaryAction","focusTrailingAction","removeTrailingActionFocus","setPrimaryActionAttr","getRootBoundingClientRect","getBoundingClientRect","getCheckmarkBoundingClientRect","attr","_chipFoundation","MDCChipFoundation","_animationsDisabled","_isBasicChip","hasAttribute","tagName","toLowerCase","_handleTransitionEnd","event","handleTransitionEnd","defineProperty","get","enumerable","configurable","set","coerceBooleanProperty","removeIcon","disabled","undefined","_value","_textElement","textContent","trim","ngAfterContentInit","_initRemoveIcon","ngAfterViewInit","init","querySelector","complete","setShouldRemoveOnTrailingIconClick","_listenToRemoveIconInteraction","pipe","takeUntil","subscribe","isKeyboardEvent","startsWith","has","keyCode","handleTrailingActionInteraction","hasModifierKey","preventDefault","remove","removable","beginExit","classes","add","_handleInteraction","handleKeydown","handleClick","_isRippleDisabled","disableRipple","Component","exportAs","template","[class.mat-mdc-chip-disabled]","[class.mat-mdc-chip-highlighted]","[class.mat-mdc-chip-with-avatar]","[class.mat-mdc-chip-with-trailing-icon]","[class.mat-mdc-basic-chip]","[class.mat-mdc-standard-chip]","[class._mat-animation-noopable]","[id]","[attr.disabled]","[attr.aria-disabled]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","styles","NgZone","Directionality","Optional","String","Inject","ANIMATION_MODULE_TYPE","propDecorators","HostListener","Input","highlighted","Output","ContentChild","ViewChild","MatRipple","mixinColor","mixinDisableRipple","MatChipBase","MatChipSelectionChange","source","selected","isUserInput","MatChipOption","apply","chipListSelectable","_chipListMultiple","_selectable","selectionChange","isSelected","selectable","setSelected","_dispatchSelectionChange","toString","chipCssClasses","HIDDEN_LEADING_ICON","select","deselect","selectViaInteraction","toggleSelected","_hasFocus","_blur","onStable","asObservable","take","run","_click","stopPropagation","_keydown","[class.mat-mdc-chip-selected]","[attr.aria-selected]","(focus)","(blur)","providers","provide","useExisting","NAVIGATION_KEYS","DOWN_ARROW","UP_ARROW","RIGHT_ARROW","LEFT_ARROW","GridKeyManager","_rows","_activeRowIndex","_activeColumnIndex","_activeRow","_activeCell","change","QueryList","changes","newRows","newIndex","toArray","indexOf","withDirectionality","direction","setActiveCell","cell","previousRowIndex","previousColumnIndex","updateActiveCell","row","column","onKeydown","setNextRowActive","setPreviousRowActive","setPreviousColumnActive","setNextColumnActive","setFirstCellActive","_setActiveCellByIndex","setLastCellActive","lastRowIndex","lastRow","_getRowsArray","cells","_setActiveCellByDelta","rowArray","forEach","rowIndex","columnIndex","rowDelta","columnDelta","previousRow","targetRow","MatChipRow","BACKSPACE","DELETE","setTimeout","tabIndex","chipContent","_focusout","_focusin","_mousedown","(mousedown)","(focusin)","(focusout)","uid$1","MatChipSet","_lastDestroyedChipIndex","_chipSetAdapter","_hasMdcClass","removeChipAtIndex","selectChipAtIndex","getIndexOfChipById","_chips","findIndex","focusChipPrimaryActionAtIndex","focusChipTrailingActionAtIndex","removeFocusFromChipAtIndex","getChipListCount","announceMessage","_uid","_mdcClasses","_chipSetFoundation","MDCChipSetFoundation","_syncChipsState","empty","_hasFocusedChip","merge","map","startWith","Promise","resolve","then","_resetChips","_dropSubscriptions","some","_subscribeToChipEvents","_listenToChipsRemove","_listenToChipsDestroyed","_listenToChipsInteraction","_chipRemoveSubscription","chipRemoveChanges","handleChipRemoval","chipId","removedAnnouncement","_chipDestroyedSubscription","chipDestroyedChanges","chipIndex","_isValidIndex","_chipInteractionSubscription","chipInteractionChanges","handleChipInteraction","unsubscribe","index","_originatesFromChip","currentElement","parentElement","[attr.role]","[attr.aria-describedby]","ContentChildren","descendants","MatChipSetBase","MatChipListboxChange","MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatChipListbox","multi","_onTouched","_onChange","_multiple","ariaOrientation","_compareWith","o1","o2","_required","_setSelected","_updateMdcSelectionClasses","_syncListboxProperties","selectedChips","filter","multiple","fn","_initializeSelection","writeValue","_initKeyManager","_updateFocusForDestroyedChips","firstSelectedChip","_getFirstSelectedChip","firstSelectedChipIndex","_keyManager","setActiveItem","setFirstItemActive","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_clearSelection","isArray","currentValue","_selectValue","correspondingChip","focused","_propagateChanges","_markAsTouched","_allowFocusEscape","previousTabIndex","HOME","END","setLastItemActive","fallbackValue","valueToEmit","skip","find","FocusKeyManager","withWrap","withVerticalOrientation","withHorizontalOrientation","dir","tabOut","_chipSelectionSubscription","_chipBlurSubscription","_chipFocusSubscription","_listenToChipsSelection","_listenToChipsFocus","_listenToChipsBlur","chipFocusChanges","updateActiveItem","chipBlurChanges","chipSelectionChanges","chipSelectionChange","handleChipSelection","shouldIgnore","newChipIndex","Math","min","[attr.aria-required]","[attr.aria-multiselectable]","[attr.aria-orientation]","[class.mat-mdc-chip-list-disabled]","[class.mat-mdc-chip-list-required]","compareWith","required","GridFocusKeyManager","activeCell","MatChipGridChange","MatChipGridBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MatChipGrid","controlType","valueChange","valueAccessor","_chipInput","placeholder","_placeholder","stateChanges","Error","ngDoCheck","updateErrorState","registerInput","inputElement","onContainerClick","_focusInput","setDescribedByIds","ids","_ariaDescribedby","join","manager","_isEmptyInput","TAB","activeColumnIndex","element","[attr.aria-invalid]","[class.mat-mdc-chip-list-invalid]","MatFormFieldControl","NgForm","FormGroupDirective","ErrorStateMatcher","NgControl","Self","errorStateMatcher","mixinErrorState","MAT_CHIPS_DEFAULT_OPTIONS","InjectionToken","nextUniqueId","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_inputElement","_chipGrid","ngOnChanges","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","input","_onInput","separators","(input)","[attr.placeholder]","chipGrid","CHIP_DECLARATIONS","Éµ0","MatChipsModule","NgModule","imports","MatCommonModule","CommonModule","MatRippleModule","declarations","useValue"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/bidi'), require('@angular/cdk/coercion'), require('@angular/platform-browser/animations'), require('@angular/core'), require('@angular/material/core'), require('@material/chips'), require('@material/ripple'), require('@angular/cdk/keycodes'), require('rxjs'), require('rxjs/operators'), require('@angular/cdk/a11y'), require('@angular/forms'), require('@angular/material/form-field'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('@angular/material-experimental/mdc-chips', ['exports', '@angular/cdk/bidi', '@angular/cdk/coercion', '@angular/platform-browser/animations', '@angular/core', '@angular/material/core', '@material/chips', '@material/ripple', '@angular/cdk/keycodes', 'rxjs', 'rxjs/operators', '@angular/cdk/a11y', '@angular/forms', '@angular/material/form-field', '@angular/common'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.materialExperimental = global.ng.materialExperimental || {}, global.ng.materialExperimental.mdcChips = {}), global.ng.cdk.bidi, global.ng.cdk.coercion, global.ng.platformBrowser.animations, global.ng.core, global.ng.material.core, global.mdc.chips, global.mdc.ripple, global.ng.cdk.keycodes, global.rxjs, global.rxjs.operators, global.ng.cdk.a11y, global.ng.forms, global.ng.material.formField, global.ng.common));\n}(this, (function (exports, bidi, coercion, animations, core, core$1, chips, ripple, keycodes, rxjs, operators, a11y, forms, formField, common) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Directive to add CSS classes to chip leading icon.\n     * @docs-private\n     */\n    var MatChipAvatar = /** @class */ (function () {\n        function MatChipAvatar(_changeDetectorRef, _elementRef) {\n            this._changeDetectorRef = _changeDetectorRef;\n            this._elementRef = _elementRef;\n        }\n        /** Sets whether the given CSS class should be applied to the leading icon. */\n        MatChipAvatar.prototype.setClass = function (cssClass, active) {\n            this._elementRef.nativeElement.classList.toggle(cssClass, active);\n            this._changeDetectorRef.markForCheck();\n        };\n        MatChipAvatar.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-chip-avatar, [matChipAvatar]',\n                        host: {\n                            'class': 'mat-mdc-chip-avatar mdc-chip__icon mdc-chip__icon--leading',\n                            'role': 'img'\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        MatChipAvatar.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef },\n            { type: core.ElementRef }\n        ]; };\n        return MatChipAvatar;\n    }());\n    /**\n     * Directive to add CSS classes to and configure attributes for chip trailing icon.\n     * @docs-private\n     */\n    var MatChipTrailingIcon = /** @class */ (function () {\n        function MatChipTrailingIcon(_elementRef) {\n            var _this = this;\n            this._elementRef = _elementRef;\n            this._adapter = {\n                focus: function () { return _this._elementRef.nativeElement.focus(); },\n                getAttribute: function (name) {\n                    return _this._elementRef.nativeElement.getAttribute(name);\n                },\n                setAttribute: function (name, value) {\n                    _this._elementRef.nativeElement.setAttribute(name, value);\n                },\n                // TODO(crisbeto): there's also a `trigger` parameter that the chip isn't\n                // handling yet. Consider passing it along once MDC start using it.\n                notifyInteraction: function () {\n                    // TODO(crisbeto): uncomment this code once we've inverted the\n                    // dependency on `MatChip`. this._chip._notifyInteraction();\n                },\n                // TODO(crisbeto): there's also a `key` parameter that the chip isn't\n                // handling yet. Consider passing it along once MDC start using it.\n                notifyNavigation: function () {\n                    // TODO(crisbeto): uncomment this code once we've inverted the\n                    // dependency on `MatChip`. this._chip._notifyNavigation();\n                }\n            };\n            this._foundation = new chips.MDCChipTrailingActionFoundation(this._adapter);\n        }\n        MatChipTrailingIcon.prototype.ngOnDestroy = function () {\n            this._foundation.destroy();\n        };\n        MatChipTrailingIcon.prototype.focus = function () {\n            this._elementRef.nativeElement.focus();\n        };\n        /** Sets an attribute on the icon. */\n        MatChipTrailingIcon.prototype.setAttribute = function (name, value) {\n            this._elementRef.nativeElement.setAttribute(name, value);\n        };\n        MatChipTrailingIcon.prototype.isNavigable = function () {\n            return this._foundation.isNavigable();\n        };\n        MatChipTrailingIcon.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                        host: {\n                            'class': 'mat-mdc-chip-trailing-icon mdc-chip__icon mdc-chip__icon--trailing',\n                            'tabindex': '-1',\n                            'aria-hidden': 'true',\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        MatChipTrailingIcon.ctorParameters = function () { return [\n            { type: core.ElementRef }\n        ]; };\n        return MatChipTrailingIcon;\n    }());\n    /**\n     * Boilerplate for applying mixins to MatChipRemove.\n     * @docs-private\n     */\n    var MatChipRemoveBase = /** @class */ (function (_super) {\n        __extends(MatChipRemoveBase, _super);\n        function MatChipRemoveBase(elementRef) {\n            return _super.call(this, elementRef) || this;\n        }\n        return MatChipRemoveBase;\n    }(MatChipTrailingIcon));\n    var _MatChipRemoveMixinBase = core$1.mixinTabIndex(core$1.mixinDisabled(MatChipRemoveBase), 0);\n    /**\n     * Directive to remove the parent chip when the trailing icon is clicked or\n     * when the ENTER key is pressed on it.\n     *\n     * Recommended for use with the Material Design \"cancel\" icon\n     * available at https://material.io/icons/#ic_cancel.\n     *\n     * Example:\n     *\n     * ```\n     * <mat-chip>\n     *   <mat-icon matChipRemove>cancel</mat-icon>\n     * </mat-chip>\n     * ```\n     */\n    var MatChipRemove = /** @class */ (function (_super) {\n        __extends(MatChipRemove, _super);\n        function MatChipRemove(elementRef) {\n            var _this = _super.call(this, elementRef) || this;\n            /**\n             * Emits when the user interacts with the icon.\n             * @docs-private\n             */\n            _this.interaction = new rxjs.Subject();\n            if (elementRef.nativeElement.nodeName === 'BUTTON') {\n                elementRef.nativeElement.setAttribute('type', 'button');\n            }\n            return _this;\n        }\n        MatChipRemove.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matChipRemove]',\n                        inputs: ['disabled', 'tabIndex'],\n                        host: {\n                            'class': \"mat-mdc-chip-remove mat-mdc-chip-trailing-icon mat-mdc-focus-indicator\\n        mdc-chip__icon mdc-chip__icon--trailing\",\n                            '[tabIndex]': 'tabIndex',\n                            'role': 'button',\n                            '(click)': 'interaction.next($event)',\n                            '(keydown)': 'interaction.next($event)',\n                            // We need to remove this explicitly, because it gets inherited from MatChipTrailingIcon.\n                            '[attr.aria-hidden]': 'null',\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        MatChipRemove.ctorParameters = function () { return [\n            { type: core.ElementRef }\n        ]; };\n        return MatChipRemove;\n    }(_MatChipRemoveMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var uid = 0;\n    /** Configuration for the ripple animation. */\n    var RIPPLE_ANIMATION_CONFIG = {\n        enterDuration: ripple.numbers.DEACTIVATION_TIMEOUT_MS,\n        exitDuration: ripple.numbers.FG_DEACTIVATION_MS\n    };\n    /**\n     * Directive to add MDC CSS to non-basic chips.\n     * @docs-private\n     */\n    var MatChipCssInternalOnly = /** @class */ (function () {\n        function MatChipCssInternalOnly() {\n        }\n        MatChipCssInternalOnly.decorators = [\n            { type: core.Directive, args: [{\n                        selector: \"mat-chip, mat-chip-option, mat-chip-row, [mat-chip], [mat-chip-option],\\n    [mat-chip-row]\",\n                        host: { 'class': 'mat-mdc-chip mdc-chip' }\n                    },] }\n        ];\n        return MatChipCssInternalOnly;\n    }());\n    /**\n     * Boilerplate for applying mixins to MatChip.\n     * @docs-private\n     */\n    var MatChipBase = /** @class */ (function () {\n        function MatChipBase(_elementRef) {\n            this._elementRef = _elementRef;\n        }\n        return MatChipBase;\n    }());\n    var _MatChipMixinBase = core$1.mixinTabIndex(core$1.mixinColor(core$1.mixinDisableRipple(MatChipBase), 'primary'), -1);\n    /**\n     * Material design styled Chip base component. Used inside the MatChipSet component.\n     *\n     * Extended by MatChipOption and MatChipRow for different interaction patterns.\n     */\n    var MatChip = /** @class */ (function (_super) {\n        __extends(MatChip, _super);\n        function MatChip(_changeDetectorRef, _elementRef, _ngZone, _dir, \n        // @breaking-change 8.0.0 `animationMode` parameter to become required.\n        animationMode) {\n            var _this = _super.call(this, _elementRef) || this;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._elementRef = _elementRef;\n            _this._ngZone = _ngZone;\n            _this._dir = _dir;\n            /** The ripple animation configuration to use for the chip. */\n            _this._rippleAnimation = RIPPLE_ANIMATION_CONFIG;\n            /** Whether the ripple is centered on the chip. */\n            _this._isRippleCentered = false;\n            /** Emits when the chip is focused. */\n            _this._onFocus = new rxjs.Subject();\n            /** Emits when the chip is blurred. */\n            _this._onBlur = new rxjs.Subject();\n            _this.HANDLED_KEYS = new Set([keycodes.SPACE, keycodes.ENTER]);\n            /** Whether the chip has focus. */\n            _this._hasFocusInternal = false;\n            /** Default unique id for the chip. */\n            _this._uniqueId = \"mat-mdc-chip-\" + uid++;\n            /** A unique id for the chip. If none is supplied, it will be auto-generated. */\n            _this.id = _this._uniqueId;\n            _this._disabled = false;\n            _this._removable = true;\n            _this._highlighted = false;\n            /** Emitted when the user interacts with the remove icon. */\n            _this.removeIconInteraction = new core.EventEmitter();\n            /** Emitted when the user interacts with the chip. */\n            _this.interaction = new core.EventEmitter();\n            /** Emitted when the chip is destroyed. */\n            _this.destroyed = new core.EventEmitter();\n            /** Emitted when a chip is to be removed. */\n            _this.removed = new core.EventEmitter();\n            /** The unstyled chip selector for this component. */\n            _this.basicChipAttrName = 'mat-basic-chip';\n            /** Subject that emits when the component has been destroyed. */\n            _this._destroyed = new rxjs.Subject();\n            /**\n             * Implementation of the MDC chip adapter interface.\n             * These methods are called by the chip foundation.\n             */\n            _this._chipAdapter = {\n                addClass: function (className) { return _this._setMdcClass(className, true); },\n                removeClass: function (className) { return _this._setMdcClass(className, false); },\n                hasClass: function (className) {\n                    return _this._elementRef.nativeElement.classList.contains(className);\n                },\n                addClassToLeadingIcon: function (className) {\n                    return _this.leadingIcon.setClass(className, true);\n                },\n                removeClassFromLeadingIcon: function (className) {\n                    return _this.leadingIcon.setClass(className, false);\n                },\n                eventTargetHasClass: function (target, className) {\n                    // We need to null check the `classList`, because IE and Edge don't\n                    // support it on SVG elements and Edge seems to throw for ripple\n                    // elements, because they're outside the DOM.\n                    return (target && target.classList) ?\n                        target.classList.contains(className) :\n                        false;\n                },\n                notifyInteraction: function () { return _this._notifyInteraction(); },\n                notifySelection: function () {\n                    // No-op. We call dispatchSelectionEvent ourselves in MatChipOption,\n                    // because we want to specify whether selection occurred via user\n                    // input.\n                },\n                notifyNavigation: function () { return _this._notifyNavigation(); },\n                notifyTrailingIconInteraction: function () {\n                    return _this.removeIconInteraction.emit(_this.id);\n                },\n                notifyRemoval: function () {\n                    _this.removed.emit({ chip: _this });\n                    // When MDC removes a chip it just transitions it to `width: 0px`\n                    // which means that it's still in the DOM and it's still focusable.\n                    // Make it `display: none` so users can't tab into it.\n                    _this._elementRef.nativeElement.style.display = 'none';\n                },\n                getComputedStyleValue: function (propertyName) {\n                    // This function is run when a chip is removed so it might be\n                    // invoked during server-side rendering. Add some extra checks just in\n                    // case.\n                    if (typeof window !== 'undefined' && window) {\n                        var getComputedStyle_1 = window.getComputedStyle(_this._elementRef.nativeElement);\n                        return getComputedStyle_1.getPropertyValue(propertyName);\n                    }\n                    return '';\n                },\n                setStyleProperty: function (propertyName, value) {\n                    _this._elementRef.nativeElement.style.setProperty(propertyName, value);\n                },\n                hasLeadingIcon: function () { return !!_this.leadingIcon; },\n                isTrailingActionNavigable: function () {\n                    if (_this.trailingIcon) {\n                        return _this.trailingIcon.isNavigable();\n                    }\n                    return false;\n                },\n                isRTL: function () { return !!_this._dir && _this._dir.value === 'rtl'; },\n                focusPrimaryAction: function () {\n                    // Angular Material MDC chips fully manage focus. TODO: Managing focus\n                    // and handling keyboard events was added by MDC after our\n                    // implementation; consider consolidating.\n                },\n                focusTrailingAction: function () { },\n                removeTrailingActionFocus: function () { },\n                setPrimaryActionAttr: function (name, value) {\n                    // MDC is currently using this method to set aria-checked on choice\n                    // and filter chips, which in the MDC templates have role=\"checkbox\"\n                    // and role=\"radio\" respectively. We have role=\"option\" on those chips\n                    // instead, so we do not want aria-checked. Since we also manage the\n                    // tabindex ourselves, we don't allow MDC to set it.\n                    if (name === 'aria-checked' || name === 'tabindex') {\n                        return;\n                    }\n                    _this._elementRef.nativeElement.setAttribute(name, value);\n                },\n                // The 2 functions below are used by the MDC ripple, which we aren't using,\n                // so they will never be called\n                getRootBoundingClientRect: function () {\n                    return _this._elementRef.nativeElement.getBoundingClientRect();\n                },\n                getCheckmarkBoundingClientRect: function () { return null; },\n                getAttribute: function (attr) { return _this._elementRef.nativeElement.getAttribute(attr); },\n            };\n            _this._chipFoundation = new chips.MDCChipFoundation(_this._chipAdapter);\n            _this._animationsDisabled = animationMode === 'NoopAnimations';\n            _this._isBasicChip = _elementRef.nativeElement.hasAttribute(_this.basicChipAttrName) ||\n                _elementRef.nativeElement.tagName.toLowerCase() === _this.basicChipAttrName;\n            return _this;\n        }\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(mmalerba): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        MatChip.prototype._handleTransitionEnd = function (event) {\n            this._chipFoundation.handleTransitionEnd(event);\n        };\n        Object.defineProperty(MatChip.prototype, \"_hasFocus\", {\n            get: function () {\n                return this._hasFocusInternal;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChip.prototype, \"disabled\", {\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                if (this.removeIcon) {\n                    this.removeIcon.disabled = value;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChip.prototype, \"value\", {\n            /** The value of the chip. Defaults to the content inside the mdc-chip__text element. */\n            get: function () {\n                return this._value !== undefined\n                    ? this._value\n                    : this._textElement.textContent.trim();\n            },\n            set: function (value) { this._value = value; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChip.prototype, \"removable\", {\n            /**\n             * Determines whether or not the chip displays the remove styling and emits (removed) events.\n             */\n            get: function () { return this._removable; },\n            set: function (value) {\n                this._removable = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChip.prototype, \"highlighted\", {\n            /**\n             * Colors the chip for emphasis as if it were selected.\n             */\n            get: function () { return this._highlighted; },\n            set: function (value) {\n                this._highlighted = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatChip.prototype.ngAfterContentInit = function () {\n            this._initRemoveIcon();\n        };\n        MatChip.prototype.ngAfterViewInit = function () {\n            this._chipFoundation.init();\n            this._textElement = this._elementRef.nativeElement.querySelector('.mdc-chip__text');\n        };\n        MatChip.prototype.ngOnDestroy = function () {\n            this.destroyed.emit({ chip: this });\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._chipFoundation.destroy();\n        };\n        /** Sets up the remove icon chip foundation, and subscribes to remove icon events. */\n        MatChip.prototype._initRemoveIcon = function () {\n            if (this.removeIcon) {\n                this._chipFoundation.setShouldRemoveOnTrailingIconClick(true);\n                this._listenToRemoveIconInteraction();\n                this.removeIcon.disabled = this.disabled;\n            }\n        };\n        /** Handles interaction with the remove icon. */\n        MatChip.prototype._listenToRemoveIconInteraction = function () {\n            var _this = this;\n            this.removeIcon.interaction\n                .pipe(operators.takeUntil(this._destroyed))\n                .subscribe(function (event) {\n                // The MDC chip foundation calls stopPropagation() for any trailing icon interaction\n                // event, even ones it doesn't handle, so we want to avoid passing it keyboard events\n                // for which we have a custom handler. Note that we assert the type of the event using\n                // the `type`, because `instanceof KeyboardEvent` can throw during server-side rendering.\n                var isKeyboardEvent = event.type.startsWith('key');\n                if (_this.disabled || (isKeyboardEvent &&\n                    !_this.HANDLED_KEYS.has(event.keyCode))) {\n                    return;\n                }\n                _this._chipFoundation.handleTrailingActionInteraction();\n                if (isKeyboardEvent && !keycodes.hasModifierKey(event)) {\n                    var keyCode = event.keyCode;\n                    // Prevent default space and enter presses so we don't scroll the page or submit forms.\n                    if (keyCode === keycodes.SPACE || keyCode === keycodes.ENTER) {\n                        event.preventDefault();\n                    }\n                }\n            });\n        };\n        /**\n         * Allows for programmatic removal of the chip.\n         *\n         * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n         */\n        MatChip.prototype.remove = function () {\n            if (this.removable) {\n                this._chipFoundation.beginExit();\n            }\n        };\n        /** Sets whether the given CSS class should be applied to the MDC chip. */\n        MatChip.prototype._setMdcClass = function (cssClass, active) {\n            var classes = this._elementRef.nativeElement.classList;\n            active ? classes.add(cssClass) : classes.remove(cssClass);\n            this._changeDetectorRef.markForCheck();\n        };\n        /** Forwards interaction events to the MDC chip foundation. */\n        MatChip.prototype._handleInteraction = function (event) {\n            if (this.disabled) {\n                return;\n            }\n            if (event.type === 'click') {\n                this._chipFoundation.handleClick();\n                return;\n            }\n            if (event.type === 'keydown') {\n                this._chipFoundation.handleKeydown(event);\n                return;\n            }\n        };\n        /** Whether or not the ripple should be disabled. */\n        MatChip.prototype._isRippleDisabled = function () {\n            return this.disabled || this.disableRipple || this._animationsDisabled || this._isBasicChip;\n        };\n        MatChip.prototype._notifyInteraction = function () {\n            this.interaction.emit(this.id);\n        };\n        MatChip.prototype._notifyNavigation = function () {\n            // TODO: This is a new feature added by MDC. Consider exposing it to users\n            // in the future.\n        };\n        MatChip.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-basic-chip, mat-chip',\n                        inputs: ['color', 'disableRipple'],\n                        exportAs: 'matChip',\n                        template: \"<span class=\\\"mdc-chip__ripple\\\"></span>\\n\\n<span matRipple class=\\\"mat-mdc-chip-ripple\\\"\\n     [matRippleAnimation]=\\\"_rippleAnimation\\\"\\n     [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n     [matRippleCentered]=\\\"_isRippleCentered\\\"\\n     [matRippleTrigger]=\\\"_elementRef.nativeElement\\\"></span>\\n\\n<ng-content select=\\\"mat-chip-avatar, [matChipAvatar]\\\"></ng-content>\\n<div class=\\\"mdc-chip__primary-action\\\">\\n  <div class=\\\"mdc-chip__text\\\"><ng-content></ng-content></div>\\n</div>\\n<ng-content select=\\\"mat-chip-trailing-icon,[matChipRemove],[matChipTrailingIcon]\\\"></ng-content>\\n\",\n                        host: {\n                            '[class.mat-mdc-chip-disabled]': 'disabled',\n                            '[class.mat-mdc-chip-highlighted]': 'highlighted',\n                            '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n                            '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                            '[class.mat-mdc-basic-chip]': '_isBasicChip',\n                            '[class.mat-mdc-standard-chip]': '!_isBasicChip',\n                            '[class._mat-animation-noopable]': '_animationsDisabled',\n                            '[id]': 'id',\n                            '[attr.disabled]': 'disabled || null',\n                            '[attr.aria-disabled]': 'disabled.toString()',\n                        },\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        styles: [\".mdc-chip__icon.mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){width:20px;height:20px;font-size:20px}.mdc-chip-trailing-action__icon{height:18px;width:18px;font-size:18px}.mdc-chip__icon.mdc-chip__icon--trailing{width:18px;height:18px;font-size:18px}.mdc-chip-trailing-action{margin-left:4px;margin-right:-4px}[dir=rtl] .mdc-chip-trailing-action,.mdc-chip-trailing-action[dir=rtl]{margin-left:-4px;margin-right:4px}.mdc-chip__icon--trailing{margin-left:4px;margin-right:-4px}[dir=rtl] .mdc-chip__icon--trailing,.mdc-chip__icon--trailing[dir=rtl]{margin-left:-4px;margin-right:4px}.mdc-touch-target-wrapper{display:inline}.mdc-elevation-overlay{position:absolute;border-radius:inherit;opacity:0;pointer-events:none;transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip{border-radius:16px;height:32px;position:relative;display:inline-flex;align-items:center;box-sizing:border-box;padding:0 12px;border-width:0;outline:none;cursor:pointer;-webkit-appearance:none}.mdc-chip .mdc-chip__ripple{border-radius:16px}.mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){margin-left:-4px;margin-right:4px}[dir=rtl] .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip.mdc-chip--selected .mdc-chip__checkmark[dir=rtl],[dir=rtl] .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden),.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden)[dir=rtl]{margin-left:4px;margin-right:-4px}.mdc-chip .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-chip::-moz-focus-inner{padding:0;border:0}.mdc-chip .mdc-chip__touch{position:absolute;top:50%;right:0;height:48px;left:0;transform:translateY(-50%)}.mdc-chip--exit{opacity:0}.mdc-chip__text{white-space:nowrap}.mdc-chip__icon{border-radius:50%;outline:none;vertical-align:middle}.mdc-chip__checkmark{height:20px}.mdc-chip__checkmark-path{transition:stroke-dashoffset 150ms 50ms cubic-bezier(0.4, 0, 0.6, 1);stroke-width:2px;stroke-dashoffset:29.7833385;stroke-dasharray:29.7833385}.mdc-chip__primary-action:focus{outline:none}.mdc-chip--selected .mdc-chip__checkmark-path{stroke-dashoffset:0}.mdc-chip__icon--leading,.mdc-chip__icon--trailing{position:relative}.mdc-chip__checkmark-svg{width:0;height:20px;transition:width 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip--selected .mdc-chip__checkmark-svg{width:20px}.mdc-chip-set--filter .mdc-chip__icon--leading{transition:opacity 75ms linear;transition-delay:-50ms;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark{transition:opacity 75ms linear;transition-delay:80ms;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark .mdc-chip__checkmark-svg{transition:width 0ms}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading{opacity:0}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading+.mdc-chip__checkmark{width:0;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading{width:0;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading+.mdc-chip__checkmark{width:20px}@keyframes mdc-chip-entry{from{transform:scale(0.8);opacity:.4}to{transform:scale(1);opacity:1}}.mdc-chip-set{padding:4px;display:flex;flex-wrap:wrap;box-sizing:border-box}.mdc-chip-set .mdc-chip{margin:4px}.mdc-chip-set .mdc-chip--touch{margin-top:8px;margin-bottom:8px}.mdc-chip-set--input .mdc-chip{animation:mdc-chip-entry 100ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-chip{cursor:default}.mat-mdc-chip._mat-animation-noopable{transition-duration:1ms;animation:none}.mat-mdc-chip._mat-animation-noopable .mdc-chip__checkmark-svg{transition:none}.cdk-high-contrast-active .mat-mdc-chip{outline:solid 1px}.cdk-high-contrast-active .mat-mdc-chip:focus{outline:dotted 2px}.mat-mdc-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mdc-chip__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}.mdc-chip__ripple::after,.mdc-chip__ripple::before{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";pointer-events:none;opacity:0;border-radius:inherit}._mat-animation-noopable .mdc-chip__ripple::after,._mat-animation-noopable .mdc-chip__ripple::before{transition:none}.mat-mdc-chip-disabled.mat-mdc-chip{opacity:.4}.mat-mdc-chip-disabled.mat-mdc-chip .mat-mdc-chip-trailing-icon,.mat-mdc-chip-disabled.mat-mdc-chip .mat-chip-row-focusable-text-content{pointer-events:none}.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::after,.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::before{display:none}.mat-mdc-chip-set-stacked{flex-direction:column;align-items:flex-start}.mat-mdc-chip-set-stacked .mat-mdc-chip{width:100%}input.mat-mdc-chip-input{flex:1 0 150px}._mat-animation-noopable .mdc-chip__checkmark-path{transition:none}.cdk-high-contrast-black-on-white .mdc-chip__checkmark-path{stroke:#000 !important}.mat-chip-row-focusable-text-content{position:relative}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatChip.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef },\n            { type: core.ElementRef },\n            { type: core.NgZone },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },\n            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations.ANIMATION_MODULE_TYPE,] }] }\n        ]; };\n        MatChip.propDecorators = {\n            _handleTransitionEnd: [{ type: core.HostListener, args: ['transitionend', ['$event'],] }],\n            id: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            removable: [{ type: core.Input }],\n            highlighted: [{ type: core.Input }],\n            removeIconInteraction: [{ type: core.Output }],\n            interaction: [{ type: core.Output }],\n            destroyed: [{ type: core.Output }],\n            removed: [{ type: core.Output }],\n            leadingIcon: [{ type: core.ContentChild, args: [MatChipAvatar,] }],\n            trailingIcon: [{ type: core.ContentChild, args: [MatChipTrailingIcon,] }],\n            removeIcon: [{ type: core.ContentChild, args: [MatChipRemove,] }],\n            ripple: [{ type: core.ViewChild, args: [core$1.MatRipple,] }]\n        };\n        return MatChip;\n    }(_MatChipMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Event object emitted by MatChipOption when selected or deselected. */\n    var MatChipSelectionChange = /** @class */ (function () {\n        function MatChipSelectionChange(\n        /** Reference to the chip that emitted the event. */\n        source, \n        /** Whether the chip that emitted the event is selected. */\n        selected, \n        /** Whether the selection change was a result of a user interaction. */\n        isUserInput) {\n            if (isUserInput === void 0) { isUserInput = false; }\n            this.source = source;\n            this.selected = selected;\n            this.isUserInput = isUserInput;\n        }\n        return MatChipSelectionChange;\n    }());\n    /**\n     * An extension of the MatChip component that supports chip selection.\n     * Used with MatChipListbox.\n     */\n    var MatChipOption = /** @class */ (function (_super) {\n        __extends(MatChipOption, _super);\n        function MatChipOption() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            /** Whether the chip list is selectable. */\n            _this.chipListSelectable = true;\n            /** Whether the chip list is in multi-selection mode. */\n            _this._chipListMultiple = false;\n            _this._selectable = true;\n            /** The unstyled chip selector for this component. */\n            _this.basicChipAttrName = 'mat-basic-chip-option';\n            /** Emitted when the chip is selected or deselected. */\n            _this.selectionChange = new core.EventEmitter();\n            return _this;\n        }\n        Object.defineProperty(MatChipOption.prototype, \"selectable\", {\n            /**\n             * Whether or not the chip is selectable.\n             *\n             * When a chip is not selectable, changes to its selected state are always\n             * ignored. By default an option chip is selectable, and it becomes\n             * non-selectable if its parent chip list is not selectable.\n             */\n            get: function () {\n                return this._selectable && this.chipListSelectable;\n            },\n            set: function (value) {\n                this._selectable = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipOption.prototype, \"selected\", {\n            /** Whether the chip is selected. */\n            get: function () {\n                return this._chipFoundation.isSelected();\n            },\n            set: function (value) {\n                if (!this.selectable) {\n                    return;\n                }\n                var coercedValue = coercion.coerceBooleanProperty(value);\n                if (coercedValue != this._chipFoundation.isSelected()) {\n                    this._chipFoundation.setSelected(coercion.coerceBooleanProperty(value));\n                    this._dispatchSelectionChange();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipOption.prototype, \"ariaSelected\", {\n            /** The ARIA selected applied to the chip. */\n            get: function () {\n                // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n                // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n                return this.selectable && (this._chipListMultiple || this.selected) ?\n                    this.selected.toString() : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatChipOption.prototype.ngAfterContentInit = function () {\n            _super.prototype.ngAfterContentInit.call(this);\n            if (this.selected && this.leadingIcon) {\n                this.leadingIcon.setClass(chips.chipCssClasses.HIDDEN_LEADING_ICON, true);\n            }\n        };\n        /** Selects the chip. */\n        MatChipOption.prototype.select = function () {\n            if (!this.selectable) {\n                return;\n            }\n            else if (!this.selected) {\n                this._chipFoundation.setSelected(true);\n                this._dispatchSelectionChange();\n            }\n        };\n        /** Deselects the chip. */\n        MatChipOption.prototype.deselect = function () {\n            if (!this.selectable) {\n                return;\n            }\n            else if (this.selected) {\n                this._chipFoundation.setSelected(false);\n                this._dispatchSelectionChange();\n            }\n        };\n        /** Selects this chip and emits userInputSelection event */\n        MatChipOption.prototype.selectViaInteraction = function () {\n            if (!this.selectable) {\n                return;\n            }\n            else if (!this.selected) {\n                this._chipFoundation.setSelected(true);\n                this._dispatchSelectionChange(true);\n            }\n        };\n        /** Toggles the current selected state of this chip. */\n        MatChipOption.prototype.toggleSelected = function (isUserInput) {\n            if (isUserInput === void 0) { isUserInput = false; }\n            if (!this.selectable) {\n                return this.selected;\n            }\n            this._chipFoundation.setSelected(!this.selected);\n            this._dispatchSelectionChange(isUserInput);\n            return this.selected;\n        };\n        /** Emits a selection change event. */\n        MatChipOption.prototype._dispatchSelectionChange = function (isUserInput) {\n            if (isUserInput === void 0) { isUserInput = false; }\n            this.selectionChange.emit({\n                source: this,\n                isUserInput: isUserInput,\n                selected: this.selected\n            });\n        };\n        /** Allows for programmatic focusing of the chip. */\n        MatChipOption.prototype.focus = function () {\n            if (this.disabled) {\n                return;\n            }\n            if (!this._hasFocus) {\n                this._elementRef.nativeElement.focus();\n                this._onFocus.next({ chip: this });\n            }\n            this._hasFocusInternal = true;\n        };\n        /** Resets the state of the chip when it loses focus. */\n        MatChipOption.prototype._blur = function () {\n            var _this = this;\n            // When animations are enabled, Angular may end up removing the chip from the DOM a little\n            // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n            // that moves focus not the next item. To work around the issue, we defer marking the chip\n            // as not focused until the next time the zone stabilizes.\n            this._ngZone.onStable\n                .asObservable()\n                .pipe(operators.take(1))\n                .subscribe(function () {\n                _this._ngZone.run(function () {\n                    _this._hasFocusInternal = false;\n                    _this._onBlur.next({ chip: _this });\n                });\n            });\n        };\n        /** Handles click events on the chip. */\n        MatChipOption.prototype._click = function (event) {\n            if (this.disabled) {\n                event.preventDefault();\n            }\n            else {\n                this._handleInteraction(event);\n                event.stopPropagation();\n            }\n        };\n        /** Handles custom key presses. */\n        MatChipOption.prototype._keydown = function (event) {\n            if (this.disabled) {\n                return;\n            }\n            switch (event.keyCode) {\n                case keycodes.SPACE:\n                    this.toggleSelected(true);\n                    // Always prevent space from scrolling the page since the list has focus\n                    event.preventDefault();\n                    break;\n                default:\n                    this._handleInteraction(event);\n            }\n        };\n        MatChipOption.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-basic-chip-option, mat-chip-option',\n                        template: \"<span class=\\\"mdc-chip__ripple\\\"></span>\\n\\n<span matRipple class=\\\"mat-mdc-chip-ripple\\\"\\n     [matRippleAnimation]=\\\"_rippleAnimation\\\"\\n     [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n     [matRippleCentered]=\\\"_isRippleCentered\\\"\\n     [matRippleTrigger]=\\\"_elementRef.nativeElement\\\"></span>\\n\\n<ng-content select=\\\"mat-chip-avatar, [matChipAvatar]\\\"></ng-content>\\n<div class=\\\"mdc-chip__checkmark\\\" *ngIf=\\\"_chipListMultiple\\\">\\n  <svg class=\\\"mdc-chip__checkmark-svg\\\" viewBox=\\\"-2 -3 30 30\\\" focusable=\\\"false\\\">\\n    <path class=\\\"mdc-chip__checkmark-path\\\" fill=\\\"none\\\" stroke=\\\"black\\\"\\n          d=\\\"M1.73,12.91 8.1,19.28 22.79,4.59\\\"/>\\n  </svg>\\n</div>\\n<div class=\\\"mdc-chip__text\\\"><ng-content></ng-content></div>\\n<ng-content select=\\\"mat-chip-trailing-icon,[matChipRemove],[matChipTrailingIcon]\\\"></ng-content>\\n\",\n                        inputs: ['color', 'disableRipple', 'tabIndex'],\n                        host: {\n                            'role': 'option',\n                            'class': 'mat-mdc-focus-indicator',\n                            '[class.mat-mdc-chip-disabled]': 'disabled',\n                            '[class.mat-mdc-chip-highlighted]': 'highlighted',\n                            '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n                            '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                            '[class.mat-mdc-chip-selected]': 'selected',\n                            '[id]': 'id',\n                            '[tabIndex]': 'tabIndex',\n                            '[attr.disabled]': 'disabled || null',\n                            '[attr.aria-disabled]': 'disabled.toString()',\n                            '[attr.aria-selected]': 'ariaSelected',\n                            '(click)': '_click($event)',\n                            '(keydown)': '_keydown($event)',\n                            '(focus)': 'focus()',\n                            '(blur)': '_blur()',\n                        },\n                        providers: [{ provide: MatChip, useExisting: MatChipOption }],\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        styles: [\".mdc-chip__icon.mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){width:20px;height:20px;font-size:20px}.mdc-chip-trailing-action__icon{height:18px;width:18px;font-size:18px}.mdc-chip__icon.mdc-chip__icon--trailing{width:18px;height:18px;font-size:18px}.mdc-chip-trailing-action{margin-left:4px;margin-right:-4px}[dir=rtl] .mdc-chip-trailing-action,.mdc-chip-trailing-action[dir=rtl]{margin-left:-4px;margin-right:4px}.mdc-chip__icon--trailing{margin-left:4px;margin-right:-4px}[dir=rtl] .mdc-chip__icon--trailing,.mdc-chip__icon--trailing[dir=rtl]{margin-left:-4px;margin-right:4px}.mdc-touch-target-wrapper{display:inline}.mdc-elevation-overlay{position:absolute;border-radius:inherit;opacity:0;pointer-events:none;transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip{border-radius:16px;height:32px;position:relative;display:inline-flex;align-items:center;box-sizing:border-box;padding:0 12px;border-width:0;outline:none;cursor:pointer;-webkit-appearance:none}.mdc-chip .mdc-chip__ripple{border-radius:16px}.mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){margin-left:-4px;margin-right:4px}[dir=rtl] .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip.mdc-chip--selected .mdc-chip__checkmark[dir=rtl],[dir=rtl] .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden),.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden)[dir=rtl]{margin-left:4px;margin-right:-4px}.mdc-chip .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-chip::-moz-focus-inner{padding:0;border:0}.mdc-chip .mdc-chip__touch{position:absolute;top:50%;right:0;height:48px;left:0;transform:translateY(-50%)}.mdc-chip--exit{opacity:0}.mdc-chip__text{white-space:nowrap}.mdc-chip__icon{border-radius:50%;outline:none;vertical-align:middle}.mdc-chip__checkmark{height:20px}.mdc-chip__checkmark-path{transition:stroke-dashoffset 150ms 50ms cubic-bezier(0.4, 0, 0.6, 1);stroke-width:2px;stroke-dashoffset:29.7833385;stroke-dasharray:29.7833385}.mdc-chip__primary-action:focus{outline:none}.mdc-chip--selected .mdc-chip__checkmark-path{stroke-dashoffset:0}.mdc-chip__icon--leading,.mdc-chip__icon--trailing{position:relative}.mdc-chip__checkmark-svg{width:0;height:20px;transition:width 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip--selected .mdc-chip__checkmark-svg{width:20px}.mdc-chip-set--filter .mdc-chip__icon--leading{transition:opacity 75ms linear;transition-delay:-50ms;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark{transition:opacity 75ms linear;transition-delay:80ms;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark .mdc-chip__checkmark-svg{transition:width 0ms}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading{opacity:0}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading+.mdc-chip__checkmark{width:0;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading{width:0;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading+.mdc-chip__checkmark{width:20px}@keyframes mdc-chip-entry{from{transform:scale(0.8);opacity:.4}to{transform:scale(1);opacity:1}}.mdc-chip-set{padding:4px;display:flex;flex-wrap:wrap;box-sizing:border-box}.mdc-chip-set .mdc-chip{margin:4px}.mdc-chip-set .mdc-chip--touch{margin-top:8px;margin-bottom:8px}.mdc-chip-set--input .mdc-chip{animation:mdc-chip-entry 100ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-chip{cursor:default}.mat-mdc-chip._mat-animation-noopable{transition-duration:1ms;animation:none}.mat-mdc-chip._mat-animation-noopable .mdc-chip__checkmark-svg{transition:none}.cdk-high-contrast-active .mat-mdc-chip{outline:solid 1px}.cdk-high-contrast-active .mat-mdc-chip:focus{outline:dotted 2px}.mat-mdc-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mdc-chip__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}.mdc-chip__ripple::after,.mdc-chip__ripple::before{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";pointer-events:none;opacity:0;border-radius:inherit}._mat-animation-noopable .mdc-chip__ripple::after,._mat-animation-noopable .mdc-chip__ripple::before{transition:none}.mat-mdc-chip-disabled.mat-mdc-chip{opacity:.4}.mat-mdc-chip-disabled.mat-mdc-chip .mat-mdc-chip-trailing-icon,.mat-mdc-chip-disabled.mat-mdc-chip .mat-chip-row-focusable-text-content{pointer-events:none}.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::after,.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::before{display:none}.mat-mdc-chip-set-stacked{flex-direction:column;align-items:flex-start}.mat-mdc-chip-set-stacked .mat-mdc-chip{width:100%}input.mat-mdc-chip-input{flex:1 0 150px}._mat-animation-noopable .mdc-chip__checkmark-path{transition:none}.cdk-high-contrast-black-on-white .mdc-chip__checkmark-path{stroke:#000 !important}.mat-chip-row-focusable-text-content{position:relative}\\n\"]\n                    }] }\n        ];\n        MatChipOption.propDecorators = {\n            selectable: [{ type: core.Input }],\n            selected: [{ type: core.Input }],\n            selectionChange: [{ type: core.Output }]\n        };\n        return MatChipOption;\n    }(MatChip));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** The keys handled by the GridKeyManager keydown method. */\n    var NAVIGATION_KEYS = [keycodes.DOWN_ARROW, keycodes.UP_ARROW, keycodes.RIGHT_ARROW, keycodes.LEFT_ARROW];\n    /**\n     * This class manages keyboard events for grids. If you pass it a query list\n     * of GridKeyManagerRow, it will set the active cell correctly when arrow events occur.\n     *\n     * GridKeyManager expects that rows may change dynamically, but the cells for a given row are\n     * static. It also expects that all rows have the same number of cells.\n     */\n    var GridKeyManager = /** @class */ (function () {\n        function GridKeyManager(_rows) {\n            var _this = this;\n            this._rows = _rows;\n            this._activeRowIndex = -1;\n            this._activeColumnIndex = -1;\n            this._activeRow = null;\n            this._activeCell = null;\n            this._dir = 'ltr';\n            /** Stream that emits whenever the active cell of the grid manager changes. */\n            this.change = new rxjs.Subject();\n            // We allow for the rows to be an array because, in some cases, the consumer may\n            // not have access to a QueryList of the rows they want to manage (e.g. when the\n            // rows aren't being collected via `ViewChildren` or `ContentChildren`).\n            if (_rows instanceof core.QueryList) {\n                _rows.changes.subscribe(function (newRows) {\n                    if (_this._activeRow) {\n                        var newIndex = newRows.toArray().indexOf(_this._activeRow);\n                        if (newIndex > -1 && newIndex !== _this._activeRowIndex) {\n                            _this._activeRowIndex = newIndex;\n                        }\n                    }\n                });\n            }\n        }\n        /**\n         * Configures the directionality of the key manager's horizontal movement.\n         * @param direction Direction which is considered forward movement across a row.\n         *\n         * If withDirectionality is not set, the default is 'ltr'.\n         */\n        GridKeyManager.prototype.withDirectionality = function (direction) {\n            this._dir = direction;\n            return this;\n        };\n        GridKeyManager.prototype.setActiveCell = function (cell) {\n            var previousRowIndex = this._activeRowIndex;\n            var previousColumnIndex = this._activeColumnIndex;\n            this.updateActiveCell(cell);\n            if (this._activeRowIndex !== previousRowIndex ||\n                this._activeColumnIndex !== previousColumnIndex) {\n                this.change.next({ row: this._activeRowIndex, column: this._activeColumnIndex });\n            }\n        };\n        /**\n         * Sets the active cell depending on the key event passed in.\n         * @param event Keyboard event to be used for determining which element should be active.\n         */\n        GridKeyManager.prototype.onKeydown = function (event) {\n            var keyCode = event.keyCode;\n            switch (keyCode) {\n                case keycodes.DOWN_ARROW:\n                    this.setNextRowActive();\n                    break;\n                case keycodes.UP_ARROW:\n                    this.setPreviousRowActive();\n                    break;\n                case keycodes.RIGHT_ARROW:\n                    this._dir === 'rtl' ? this.setPreviousColumnActive() : this.setNextColumnActive();\n                    break;\n                case keycodes.LEFT_ARROW:\n                    this._dir === 'rtl' ? this.setNextColumnActive() : this.setPreviousColumnActive();\n                    break;\n                default:\n                    // Note that we return here, in order to avoid preventing\n                    // the default action of non-navigational keys.\n                    return;\n            }\n            event.preventDefault();\n        };\n        Object.defineProperty(GridKeyManager.prototype, \"activeRowIndex\", {\n            /** Index of the currently active row. */\n            get: function () {\n                return this._activeRowIndex;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GridKeyManager.prototype, \"activeColumnIndex\", {\n            /** Index of the currently active column. */\n            get: function () {\n                return this._activeColumnIndex;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GridKeyManager.prototype, \"activeCell\", {\n            /** The active cell. */\n            get: function () {\n                return this._activeCell;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Sets the active cell to the first cell in the grid. */\n        GridKeyManager.prototype.setFirstCellActive = function () {\n            this._setActiveCellByIndex(0, 0);\n        };\n        /** Sets the active cell to the last cell in the grid. */\n        GridKeyManager.prototype.setLastCellActive = function () {\n            var lastRowIndex = this._rows.length - 1;\n            var lastRow = this._getRowsArray()[lastRowIndex];\n            this._setActiveCellByIndex(lastRowIndex, lastRow.cells.length - 1);\n        };\n        /** Sets the active row to the next row in the grid. Active column is unchanged. */\n        GridKeyManager.prototype.setNextRowActive = function () {\n            this._activeRowIndex < 0 ? this.setFirstCellActive() : this._setActiveCellByDelta(1, 0);\n        };\n        /** Sets the active row to the previous row in the grid. Active column is unchanged. */\n        GridKeyManager.prototype.setPreviousRowActive = function () {\n            this._setActiveCellByDelta(-1, 0);\n        };\n        /**\n         * Sets the active column to the next column in the grid.\n         * Active row is unchanged, unless we reach the end of a row.\n         */\n        GridKeyManager.prototype.setNextColumnActive = function () {\n            this._activeRowIndex < 0 ? this.setFirstCellActive() : this._setActiveCellByDelta(0, 1);\n        };\n        /**\n         * Sets the active column to the previous column in the grid.\n         * Active row is unchanged, unless we reach the end of a row.\n         */\n        GridKeyManager.prototype.setPreviousColumnActive = function () {\n            this._setActiveCellByDelta(0, -1);\n        };\n        GridKeyManager.prototype.updateActiveCell = function (cell) {\n            var _this = this;\n            var rowArray = this._getRowsArray();\n            if (typeof cell === 'object' && typeof cell.row === 'number' &&\n                typeof cell.column === 'number') {\n                this._activeRowIndex = cell.row;\n                this._activeColumnIndex = cell.column;\n                this._activeRow = rowArray[cell.row] || null;\n                this._activeCell = this._activeRow ? this._activeRow.cells[cell.column] || null : null;\n            }\n            else {\n                rowArray.forEach(function (row, rowIndex) {\n                    var columnIndex = row.cells.indexOf(cell);\n                    if (columnIndex !== -1) {\n                        _this._activeRowIndex = rowIndex;\n                        _this._activeColumnIndex = columnIndex;\n                        _this._activeRow = row;\n                        _this._activeCell = row.cells[columnIndex];\n                    }\n                });\n            }\n        };\n        /**\n         * This method sets the active cell, given the row and columns deltas\n         * between the currently active cell and the new active cell.\n         */\n        GridKeyManager.prototype._setActiveCellByDelta = function (rowDelta, columnDelta) {\n            // If delta puts us past the last cell in a row, move to the first cell of the next row.\n            if (this._activeRow && this._activeColumnIndex + columnDelta >= this._activeRow.cells.length) {\n                this._setActiveCellByIndex(this._activeRowIndex + 1, 0);\n                // If delta puts us prior to the first cell in a row, move to the last cell of the previous row.\n            }\n            else if (this._activeColumnIndex + columnDelta < 0) {\n                var previousRowIndex = this._activeRowIndex - 1;\n                var previousRow = this._getRowsArray()[previousRowIndex];\n                if (previousRow) {\n                    this._setActiveCellByIndex(previousRowIndex, previousRow.cells.length - 1);\n                }\n            }\n            else {\n                this._setActiveCellByIndex(this._activeRowIndex + rowDelta, this._activeColumnIndex + columnDelta);\n            }\n        };\n        /**\n         * Sets the active cell to the cell at the indices specified, if they are valid.\n         */\n        GridKeyManager.prototype._setActiveCellByIndex = function (rowIndex, columnIndex) {\n            var rows = this._getRowsArray();\n            var targetRow = rows[rowIndex];\n            if (!targetRow || !targetRow.cells[columnIndex]) {\n                return;\n            }\n            this.setActiveCell({ row: rowIndex, column: columnIndex });\n        };\n        /** Returns the rows as an array. */\n        GridKeyManager.prototype._getRowsArray = function () {\n            return this._rows instanceof core.QueryList ? this._rows.toArray() : this._rows;\n        };\n        return GridKeyManager;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An extension of the MatChip component used with MatChipGrid and\n     * the matChipInputFor directive.\n     */\n    var MatChipRow = /** @class */ (function (_super) {\n        __extends(MatChipRow, _super);\n        function MatChipRow() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.basicChipAttrName = 'mat-basic-chip-row';\n            /** Key codes for which this component has a custom handler. */\n            _this.HANDLED_KEYS = new Set(__spread(NAVIGATION_KEYS, [keycodes.BACKSPACE, keycodes.DELETE]));\n            return _this;\n        }\n        MatChipRow.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            _super.prototype.ngAfterContentInit.call(this);\n            if (this.removeIcon) {\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                setTimeout(function () {\n                    // removeIcon has tabIndex 0 for regular chips, but should only be focusable by\n                    // the GridFocusKeyManager for row chips.\n                    _this.removeIcon.tabIndex = -1;\n                });\n            }\n        };\n        MatChipRow.prototype.ngAfterViewInit = function () {\n            _super.prototype.ngAfterViewInit.call(this);\n            this.cells = this.removeIcon ?\n                [this.chipContent.nativeElement, this.removeIcon._elementRef.nativeElement] :\n                [this.chipContent.nativeElement];\n        };\n        /**\n         * Allows for programmatic focusing of the chip.\n         * Sends focus to the first grid cell. The row chip element itself\n         * is never focused.\n         */\n        MatChipRow.prototype.focus = function () {\n            if (this.disabled) {\n                return;\n            }\n            if (!this._hasFocusInternal) {\n                this._onFocus.next({ chip: this });\n            }\n            this.chipContent.nativeElement.focus();\n        };\n        /**\n         * Emits a blur event when one of the gridcells loses focus, unless focus moved\n         * to the other gridcell.\n         */\n        MatChipRow.prototype._focusout = function () {\n            var _this = this;\n            this._hasFocusInternal = false;\n            // Wait to see if focus moves to the other gridcell\n            setTimeout(function () {\n                if (_this._hasFocus) {\n                    return;\n                }\n                _this._onBlur.next({ chip: _this });\n            });\n        };\n        /** Records that the chip has focus when one of the gridcells is focused. */\n        MatChipRow.prototype._focusin = function () {\n            this._hasFocusInternal = true;\n        };\n        /** Sends focus to the first gridcell when the user clicks anywhere inside the chip. */\n        MatChipRow.prototype._mousedown = function (event) {\n            if (!this.disabled) {\n                this.focus();\n            }\n            event.preventDefault();\n        };\n        /** Handles custom key presses. */\n        MatChipRow.prototype._keydown = function (event) {\n            if (this.disabled) {\n                return;\n            }\n            switch (event.keyCode) {\n                case keycodes.DELETE:\n                case keycodes.BACKSPACE:\n                    // Remove the focused chip\n                    this.remove();\n                    // Always prevent so page navigation does not occur\n                    event.preventDefault();\n                    break;\n                default:\n                    this._handleInteraction(event);\n            }\n        };\n        MatChipRow.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-chip-row, mat-basic-chip-row',\n                        template: \"<span class=\\\"mdc-chip__ripple\\\"></span>\\n\\n<span matRipple class=\\\"mat-mdc-chip-ripple\\\"\\n     [matRippleAnimation]=\\\"_rippleAnimation\\\"\\n     [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n     [matRippleCentered]=\\\"_isRippleCentered\\\"\\n     [matRippleTrigger]=\\\"_elementRef.nativeElement\\\"></span>\\n\\n<div role=\\\"gridcell\\\">\\n  <div #chipContent tabindex=\\\"-1\\\"\\n       class=\\\"mat-chip-row-focusable-text-content mat-mdc-focus-indicator\\\">\\n  \\t <ng-content select=\\\"mat-chip-avatar, [matChipAvatar]\\\"></ng-content>\\n  \\t <span class=\\\"mdc-chip__text\\\"><ng-content></ng-content></span>\\n  \\t <ng-content select=\\\"mat-chip-trailing-icon,[matChipTrailingIcon]\\\"></ng-content>\\n  </div>\\n</div>\\n<div role=\\\"gridcell\\\" *ngIf=\\\"removeIcon\\\">\\n  <ng-content select=\\\"[matChipRemove]\\\"></ng-content>\\n</div>\\n\",\n                        inputs: ['color', 'disableRipple', 'tabIndex'],\n                        host: {\n                            'role': 'row',\n                            '[class.mat-mdc-chip-disabled]': 'disabled',\n                            '[class.mat-mdc-chip-highlighted]': 'highlighted',\n                            '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n                            '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                            '[id]': 'id',\n                            '[attr.disabled]': 'disabled || null',\n                            '[attr.aria-disabled]': 'disabled.toString()',\n                            '[tabIndex]': 'tabIndex',\n                            '(mousedown)': '_mousedown($event)',\n                            '(keydown)': '_keydown($event)',\n                            '(focusin)': '_focusin()',\n                            '(focusout)': '_focusout()'\n                        },\n                        providers: [{ provide: MatChip, useExisting: MatChipRow }],\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        styles: [\".mdc-chip__icon.mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){width:20px;height:20px;font-size:20px}.mdc-chip-trailing-action__icon{height:18px;width:18px;font-size:18px}.mdc-chip__icon.mdc-chip__icon--trailing{width:18px;height:18px;font-size:18px}.mdc-chip-trailing-action{margin-left:4px;margin-right:-4px}[dir=rtl] .mdc-chip-trailing-action,.mdc-chip-trailing-action[dir=rtl]{margin-left:-4px;margin-right:4px}.mdc-chip__icon--trailing{margin-left:4px;margin-right:-4px}[dir=rtl] .mdc-chip__icon--trailing,.mdc-chip__icon--trailing[dir=rtl]{margin-left:-4px;margin-right:4px}.mdc-touch-target-wrapper{display:inline}.mdc-elevation-overlay{position:absolute;border-radius:inherit;opacity:0;pointer-events:none;transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip{border-radius:16px;height:32px;position:relative;display:inline-flex;align-items:center;box-sizing:border-box;padding:0 12px;border-width:0;outline:none;cursor:pointer;-webkit-appearance:none}.mdc-chip .mdc-chip__ripple{border-radius:16px}.mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){margin-left:-4px;margin-right:4px}[dir=rtl] .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip.mdc-chip--selected .mdc-chip__checkmark[dir=rtl],[dir=rtl] .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden),.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden)[dir=rtl]{margin-left:4px;margin-right:-4px}.mdc-chip .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-chip::-moz-focus-inner{padding:0;border:0}.mdc-chip .mdc-chip__touch{position:absolute;top:50%;right:0;height:48px;left:0;transform:translateY(-50%)}.mdc-chip--exit{opacity:0}.mdc-chip__text{white-space:nowrap}.mdc-chip__icon{border-radius:50%;outline:none;vertical-align:middle}.mdc-chip__checkmark{height:20px}.mdc-chip__checkmark-path{transition:stroke-dashoffset 150ms 50ms cubic-bezier(0.4, 0, 0.6, 1);stroke-width:2px;stroke-dashoffset:29.7833385;stroke-dasharray:29.7833385}.mdc-chip__primary-action:focus{outline:none}.mdc-chip--selected .mdc-chip__checkmark-path{stroke-dashoffset:0}.mdc-chip__icon--leading,.mdc-chip__icon--trailing{position:relative}.mdc-chip__checkmark-svg{width:0;height:20px;transition:width 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip--selected .mdc-chip__checkmark-svg{width:20px}.mdc-chip-set--filter .mdc-chip__icon--leading{transition:opacity 75ms linear;transition-delay:-50ms;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark{transition:opacity 75ms linear;transition-delay:80ms;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark .mdc-chip__checkmark-svg{transition:width 0ms}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading{opacity:0}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading+.mdc-chip__checkmark{width:0;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading{width:0;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading+.mdc-chip__checkmark{width:20px}@keyframes mdc-chip-entry{from{transform:scale(0.8);opacity:.4}to{transform:scale(1);opacity:1}}.mdc-chip-set{padding:4px;display:flex;flex-wrap:wrap;box-sizing:border-box}.mdc-chip-set .mdc-chip{margin:4px}.mdc-chip-set .mdc-chip--touch{margin-top:8px;margin-bottom:8px}.mdc-chip-set--input .mdc-chip{animation:mdc-chip-entry 100ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-chip{cursor:default}.mat-mdc-chip._mat-animation-noopable{transition-duration:1ms;animation:none}.mat-mdc-chip._mat-animation-noopable .mdc-chip__checkmark-svg{transition:none}.cdk-high-contrast-active .mat-mdc-chip{outline:solid 1px}.cdk-high-contrast-active .mat-mdc-chip:focus{outline:dotted 2px}.mat-mdc-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mdc-chip__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}.mdc-chip__ripple::after,.mdc-chip__ripple::before{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";pointer-events:none;opacity:0;border-radius:inherit}._mat-animation-noopable .mdc-chip__ripple::after,._mat-animation-noopable .mdc-chip__ripple::before{transition:none}.mat-mdc-chip-disabled.mat-mdc-chip{opacity:.4}.mat-mdc-chip-disabled.mat-mdc-chip .mat-mdc-chip-trailing-icon,.mat-mdc-chip-disabled.mat-mdc-chip .mat-chip-row-focusable-text-content{pointer-events:none}.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::after,.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::before{display:none}.mat-mdc-chip-set-stacked{flex-direction:column;align-items:flex-start}.mat-mdc-chip-set-stacked .mat-mdc-chip{width:100%}input.mat-mdc-chip-input{flex:1 0 150px}._mat-animation-noopable .mdc-chip__checkmark-path{transition:none}.cdk-high-contrast-black-on-white .mdc-chip__checkmark-path{stroke:#000 !important}.mat-chip-row-focusable-text-content{position:relative}\\n\"]\n                    }] }\n        ];\n        MatChipRow.propDecorators = {\n            chipContent: [{ type: core.ViewChild, args: ['chipContent',] }]\n        };\n        return MatChipRow;\n    }(MatChip));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var uid$1 = 0;\n    /**\n     * Boilerplate for applying mixins to MatChipSet.\n     * @docs-private\n     */\n    var MatChipSetBase = /** @class */ (function () {\n        function MatChipSetBase(_elementRef) {\n        }\n        return MatChipSetBase;\n    }());\n    var _MatChipSetMixinBase = core$1.mixinTabIndex(MatChipSetBase);\n    /**\n     * Basic container component for the MatChip component.\n     *\n     * Extended by MatChipListbox and MatChipGrid for different interaction patterns.\n     */\n    var MatChipSet = /** @class */ (function (_super) {\n        __extends(MatChipSet, _super);\n        function MatChipSet(_elementRef, _changeDetectorRef, _dir) {\n            var _this = _super.call(this, _elementRef) || this;\n            _this._elementRef = _elementRef;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._dir = _dir;\n            /**\n             * When a chip is destroyed, we store the index of the destroyed chip until the chips\n             * query list notifies about the update. This is necessary because we cannot determine an\n             * appropriate chip that should receive focus until the array of chips updated completely.\n             */\n            _this._lastDestroyedChipIndex = null;\n            /** Subject that emits when the component has been destroyed. */\n            _this._destroyed = new rxjs.Subject();\n            /**\n             * Implementation of the MDC chip-set adapter interface.\n             * These methods are called by the chip set foundation.\n             */\n            _this._chipSetAdapter = {\n                hasClass: function (className) { return _this._hasMdcClass(className); },\n                // No-op. We keep track of chips via ContentChildren, which will be updated when a chip is\n                // removed.\n                removeChipAtIndex: function () { },\n                // No-op for base chip set. MatChipListbox overrides the adapter to provide this method.\n                selectChipAtIndex: function () { },\n                getIndexOfChipById: function (id) { return _this._chips.toArray().findIndex(function (chip) { return chip.id === id; }); },\n                focusChipPrimaryActionAtIndex: function () { },\n                focusChipTrailingActionAtIndex: function () { },\n                removeFocusFromChipAtIndex: function () { },\n                isRTL: function () { return !!_this._dir && _this._dir.value === 'rtl'; },\n                getChipListCount: function () { return _this._chips.length; },\n                // TODO(mmalerba): Implement using LiveAnnouncer.\n                announceMessage: function () { },\n            };\n            /** Uid of the chip set */\n            _this._uid = \"mat-mdc-chip-set-\" + uid$1++;\n            /**\n             * Map from class to whether the class is enabled.\n             * Enabled classes are set on the MDC chip-set div.\n             */\n            _this._mdcClasses = {};\n            _this._disabled = false;\n            _this._chipSetFoundation = new chips.MDCChipSetFoundation(_this._chipSetAdapter);\n            return _this;\n        }\n        Object.defineProperty(MatChipSet.prototype, \"disabled\", {\n            /** Whether the chip set is disabled. */\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                this._syncChipsState();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipSet.prototype, \"empty\", {\n            /** Whether the chip list contains chips or not. */\n            get: function () { return this._chips.length === 0; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipSet.prototype, \"role\", {\n            /** The ARIA role applied to the chip set. */\n            get: function () { return this.empty ? null : 'presentation'; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipSet.prototype, \"focused\", {\n            /** Whether any of the chips inside of this chip-set has focus. */\n            get: function () { return this._hasFocusedChip(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipSet.prototype, \"chipRemoveChanges\", {\n            /** Combined stream of all of the child chips' remove events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this._chips.map(function (chip) { return chip.removed; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipSet.prototype, \"chipDestroyedChanges\", {\n            /** Combined stream of all of the child chips' remove events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this._chips.map(function (chip) { return chip.destroyed; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipSet.prototype, \"chipInteractionChanges\", {\n            /** Combined stream of all of the child chips' interaction events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this._chips.map(function (chip) { return chip.interaction; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatChipSet.prototype.ngAfterViewInit = function () {\n            this._chipSetFoundation.init();\n        };\n        MatChipSet.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this._chips.changes.pipe(operators.startWith(null), operators.takeUntil(this._destroyed)).subscribe(function () {\n                if (_this.disabled) {\n                    // Since this happens after the content has been\n                    // checked, we need to defer it to the next tick.\n                    Promise.resolve().then(function () {\n                        _this._syncChipsState();\n                    });\n                }\n                _this._resetChips();\n            });\n        };\n        MatChipSet.prototype.ngOnDestroy = function () {\n            this._dropSubscriptions();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._chipSetFoundation.destroy();\n        };\n        /** Checks whether any of the chips is focused. */\n        MatChipSet.prototype._hasFocusedChip = function () {\n            return this._chips.some(function (chip) { return chip._hasFocus; });\n        };\n        /** Syncs the chip-set's state with the individual chips. */\n        MatChipSet.prototype._syncChipsState = function () {\n            var _this = this;\n            if (this._chips) {\n                this._chips.forEach(function (chip) {\n                    chip.disabled = _this._disabled;\n                    chip._changeDetectorRef.markForCheck();\n                });\n            }\n        };\n        /** Sets whether the given CSS class should be applied to the MDC chip. */\n        MatChipSet.prototype._setMdcClass = function (cssClass, active) {\n            var classes = this._elementRef.nativeElement.classList;\n            active ? classes.add(cssClass) : classes.remove(cssClass);\n            this._changeDetectorRef.markForCheck();\n        };\n        /** Adapter method that returns true if the chip set has the given MDC class. */\n        MatChipSet.prototype._hasMdcClass = function (className) {\n            return this._elementRef.nativeElement.classList.contains(className);\n        };\n        /** Updates subscriptions to chip events. */\n        MatChipSet.prototype._resetChips = function () {\n            this._dropSubscriptions();\n            this._subscribeToChipEvents();\n        };\n        /** Subscribes to events on the child chips. */\n        MatChipSet.prototype._subscribeToChipEvents = function () {\n            this._listenToChipsRemove();\n            this._listenToChipsDestroyed();\n            this._listenToChipsInteraction();\n        };\n        /** Subscribes to chip removal events. */\n        MatChipSet.prototype._listenToChipsRemove = function () {\n            var _this = this;\n            this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(function (event) {\n                _this._chipSetFoundation.handleChipRemoval({\n                    chipId: event.chip.id,\n                    // TODO(mmalerba): Add removal message.\n                    removedAnnouncement: null,\n                });\n            });\n        };\n        /** Subscribes to chip destroyed events. */\n        MatChipSet.prototype._listenToChipsDestroyed = function () {\n            var _this = this;\n            this._chipDestroyedSubscription = this.chipDestroyedChanges.subscribe(function (event) {\n                var chip = event.chip;\n                var chipIndex = _this._chips.toArray().indexOf(event.chip);\n                // In case the chip that will be removed is currently focused, we temporarily store\n                // the index in order to be able to determine an appropriate sibling chip that will\n                // receive focus.\n                if (_this._isValidIndex(chipIndex) && chip._hasFocus) {\n                    _this._lastDestroyedChipIndex = chipIndex;\n                }\n            });\n        };\n        /** Subscribes to chip interaction events. */\n        MatChipSet.prototype._listenToChipsInteraction = function () {\n            var _this = this;\n            this._chipInteractionSubscription = this.chipInteractionChanges.subscribe(function (id) {\n                _this._chipSetFoundation.handleChipInteraction({ chipId: id });\n            });\n        };\n        /** Unsubscribes from all chip events. */\n        MatChipSet.prototype._dropSubscriptions = function () {\n            if (this._chipRemoveSubscription) {\n                this._chipRemoveSubscription.unsubscribe();\n                this._chipRemoveSubscription = null;\n            }\n            if (this._chipInteractionSubscription) {\n                this._chipInteractionSubscription.unsubscribe();\n                this._chipInteractionSubscription = null;\n            }\n            if (this._chipDestroyedSubscription) {\n                this._chipDestroyedSubscription.unsubscribe();\n                this._chipDestroyedSubscription = null;\n            }\n        };\n        /** Dummy method for subclasses to override. Base chip set cannot be focused. */\n        MatChipSet.prototype.focus = function () { };\n        /**\n         * Utility to ensure all indexes are valid.\n         *\n         * @param index The index to be checked.\n         * @returns True if the index is valid for our list of chips.\n         */\n        MatChipSet.prototype._isValidIndex = function (index) {\n            return index >= 0 && index < this._chips.length;\n        };\n        /** Checks whether an event comes from inside a chip element. */\n        MatChipSet.prototype._originatesFromChip = function (event) {\n            var currentElement = event.target;\n            while (currentElement && currentElement !== this._elementRef.nativeElement) {\n                // Null check the classList, because IE and Edge don't support it on all elements.\n                if (currentElement.classList && currentElement.classList.contains('mdc-chip')) {\n                    return true;\n                }\n                currentElement = currentElement.parentElement;\n            }\n            return false;\n        };\n        MatChipSet.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-chip-set',\n                        template: '<ng-content></ng-content>',\n                        host: {\n                            'class': 'mat-mdc-chip-set mdc-chip-set',\n                            '[attr.role]': 'role',\n                            // TODO: replace this binding with use of AriaDescriber\n                            '[attr.aria-describedby]': '_ariaDescribedby || null',\n                            '[id]': '_uid',\n                        },\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        styles: [\".mdc-chip__icon.mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){width:20px;height:20px;font-size:20px}.mdc-chip-trailing-action__icon{height:18px;width:18px;font-size:18px}.mdc-chip__icon.mdc-chip__icon--trailing{width:18px;height:18px;font-size:18px}.mdc-chip-trailing-action{margin-left:4px;margin-right:-4px}[dir=rtl] .mdc-chip-trailing-action,.mdc-chip-trailing-action[dir=rtl]{margin-left:-4px;margin-right:4px}.mdc-chip__icon--trailing{margin-left:4px;margin-right:-4px}[dir=rtl] .mdc-chip__icon--trailing,.mdc-chip__icon--trailing[dir=rtl]{margin-left:-4px;margin-right:4px}.mdc-touch-target-wrapper{display:inline}.mdc-elevation-overlay{position:absolute;border-radius:inherit;opacity:0;pointer-events:none;transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip{border-radius:16px;height:32px;position:relative;display:inline-flex;align-items:center;box-sizing:border-box;padding:0 12px;border-width:0;outline:none;cursor:pointer;-webkit-appearance:none}.mdc-chip .mdc-chip__ripple{border-radius:16px}.mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){margin-left:-4px;margin-right:4px}[dir=rtl] .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip.mdc-chip--selected .mdc-chip__checkmark[dir=rtl],[dir=rtl] .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden),.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden)[dir=rtl]{margin-left:4px;margin-right:-4px}.mdc-chip .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-chip::-moz-focus-inner{padding:0;border:0}.mdc-chip .mdc-chip__touch{position:absolute;top:50%;right:0;height:48px;left:0;transform:translateY(-50%)}.mdc-chip--exit{opacity:0}.mdc-chip__text{white-space:nowrap}.mdc-chip__icon{border-radius:50%;outline:none;vertical-align:middle}.mdc-chip__checkmark{height:20px}.mdc-chip__checkmark-path{transition:stroke-dashoffset 150ms 50ms cubic-bezier(0.4, 0, 0.6, 1);stroke-width:2px;stroke-dashoffset:29.7833385;stroke-dasharray:29.7833385}.mdc-chip__primary-action:focus{outline:none}.mdc-chip--selected .mdc-chip__checkmark-path{stroke-dashoffset:0}.mdc-chip__icon--leading,.mdc-chip__icon--trailing{position:relative}.mdc-chip__checkmark-svg{width:0;height:20px;transition:width 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip--selected .mdc-chip__checkmark-svg{width:20px}.mdc-chip-set--filter .mdc-chip__icon--leading{transition:opacity 75ms linear;transition-delay:-50ms;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark{transition:opacity 75ms linear;transition-delay:80ms;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark .mdc-chip__checkmark-svg{transition:width 0ms}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading{opacity:0}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading+.mdc-chip__checkmark{width:0;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading{width:0;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading+.mdc-chip__checkmark{width:20px}@keyframes mdc-chip-entry{from{transform:scale(0.8);opacity:.4}to{transform:scale(1);opacity:1}}.mdc-chip-set{padding:4px;display:flex;flex-wrap:wrap;box-sizing:border-box}.mdc-chip-set .mdc-chip{margin:4px}.mdc-chip-set .mdc-chip--touch{margin-top:8px;margin-bottom:8px}.mdc-chip-set--input .mdc-chip{animation:mdc-chip-entry 100ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-chip{cursor:default}.mat-mdc-chip._mat-animation-noopable{transition-duration:1ms;animation:none}.mat-mdc-chip._mat-animation-noopable .mdc-chip__checkmark-svg{transition:none}.cdk-high-contrast-active .mat-mdc-chip{outline:solid 1px}.cdk-high-contrast-active .mat-mdc-chip:focus{outline:dotted 2px}.mat-mdc-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mdc-chip__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}.mdc-chip__ripple::after,.mdc-chip__ripple::before{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";pointer-events:none;opacity:0;border-radius:inherit}._mat-animation-noopable .mdc-chip__ripple::after,._mat-animation-noopable .mdc-chip__ripple::before{transition:none}.mat-mdc-chip-disabled.mat-mdc-chip{opacity:.4}.mat-mdc-chip-disabled.mat-mdc-chip .mat-mdc-chip-trailing-icon,.mat-mdc-chip-disabled.mat-mdc-chip .mat-chip-row-focusable-text-content{pointer-events:none}.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::after,.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::before{display:none}.mat-mdc-chip-set-stacked{flex-direction:column;align-items:flex-start}.mat-mdc-chip-set-stacked .mat-mdc-chip{width:100%}input.mat-mdc-chip-input{flex:1 0 150px}._mat-animation-noopable .mdc-chip__checkmark-path{transition:none}.cdk-high-contrast-black-on-white .mdc-chip__checkmark-path{stroke:#000 !important}.mat-chip-row-focusable-text-content{position:relative}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatChipSet.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: core.ChangeDetectorRef },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] }\n        ]; };\n        MatChipSet.propDecorators = {\n            disabled: [{ type: core.Input }],\n            _chips: [{ type: core.ContentChildren, args: [MatChip, {\n                            // We need to use `descendants: true`, because Ivy will no longer match\n                            // indirect descendants if it's left as false.\n                            descendants: true\n                        },] }]\n        };\n        return MatChipSet;\n    }(_MatChipSetMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Change event object that is emitted when the chip listbox value has changed. */\n    var MatChipListboxChange = /** @class */ (function () {\n        function MatChipListboxChange(\n        /** Chip listbox that emitted the event. */\n        source, \n        /** Value of the chip listbox when the event was emitted. */\n        value) {\n            this.source = source;\n            this.value = value;\n        }\n        return MatChipListboxChange;\n    }());\n    /**\n     * Provider Expression that allows mat-chip-listbox to register as a ControlValueAccessor.\n     * This allows it to support [(ngModel)].\n     * @docs-private\n     */\n    var MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR = {\n        provide: forms.NG_VALUE_ACCESSOR,\n        useExisting: core.forwardRef(function () { return MatChipListbox; }),\n        multi: true\n    };\n    /**\n     * An extension of the MatChipSet component that supports chip selection.\n     * Used with MatChipOption chips.\n     */\n    var MatChipListbox = /** @class */ (function (_super) {\n        __extends(MatChipListbox, _super);\n        function MatChipListbox(_elementRef, _changeDetectorRef, _dir) {\n            var _this = _super.call(this, _elementRef, _changeDetectorRef, _dir) || this;\n            _this._elementRef = _elementRef;\n            /**\n             * Function when touched. Set as part of ControlValueAccessor implementation.\n             * @docs-private\n             */\n            _this._onTouched = function () { };\n            /**\n             * Function when changed. Set as part of ControlValueAccessor implementation.\n             * @docs-private\n             */\n            _this._onChange = function () { };\n            _this._multiple = false;\n            /** Orientation of the chip list. */\n            _this.ariaOrientation = 'horizontal';\n            _this._selectable = true;\n            _this._compareWith = function (o1, o2) { return o1 === o2; };\n            _this._required = false;\n            /** Event emitted when the selected chip listbox value has been changed by the user. */\n            _this.change = new core.EventEmitter();\n            _this._chipSetAdapter.selectChipAtIndex = function (index, selected) {\n                _this._setSelected(index, selected);\n            };\n            // Reinitialize the foundation with our overridden adapter\n            _this._chipSetFoundation = new chips.MDCChipSetFoundation(_this._chipSetAdapter);\n            _this._updateMdcSelectionClasses();\n            return _this;\n        }\n        Object.defineProperty(MatChipListbox.prototype, \"role\", {\n            /** The ARIA role applied to the chip listbox. */\n            get: function () { return this.empty ? null : 'listbox'; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipListbox.prototype, \"multiple\", {\n            /** Whether the user should be allowed to select multiple chips. */\n            get: function () { return this._multiple; },\n            set: function (value) {\n                this._multiple = coercion.coerceBooleanProperty(value);\n                this._updateMdcSelectionClasses();\n                this._syncListboxProperties();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipListbox.prototype, \"selected\", {\n            /** The array of selected chips inside the chip listbox. */\n            get: function () {\n                var selectedChips = this._chips.toArray().filter(function (chip) { return chip.selected; });\n                return this.multiple ? selectedChips : selectedChips[0];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipListbox.prototype, \"selectable\", {\n            /**\n             * Whether or not this chip listbox is selectable.\n             *\n             * When a chip listbox is not selectable, the selected states for all\n             * the chips inside the chip listbox are always ignored.\n             */\n            get: function () { return this._selectable; },\n            set: function (value) {\n                this._selectable = coercion.coerceBooleanProperty(value);\n                this._updateMdcSelectionClasses();\n                this._syncListboxProperties();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipListbox.prototype, \"compareWith\", {\n            /**\n             * A function to compare the option values with the selected values. The first argument\n             * is a value from an option. The second is a value from the selection. A boolean\n             * should be returned.\n             */\n            get: function () { return this._compareWith; },\n            set: function (fn) {\n                this._compareWith = fn;\n                this._initializeSelection();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipListbox.prototype, \"required\", {\n            /** Whether this chip listbox is required. */\n            get: function () { return this._required; },\n            set: function (value) {\n                this._required = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipListbox.prototype, \"chipSelectionChanges\", {\n            /** Combined stream of all of the child chips' selection change events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this._chips.map(function (chip) { return chip.selectionChange; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipListbox.prototype, \"chipFocusChanges\", {\n            /** Combined stream of all of the child chips' focus events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this._chips.map(function (chip) { return chip._onFocus; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipListbox.prototype, \"chipBlurChanges\", {\n            /** Combined stream of all of the child chips' blur events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this._chips.map(function (chip) { return chip._onBlur; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipListbox.prototype, \"value\", {\n            /** The value of the listbox, which is the combined value of the selected chips. */\n            get: function () { return this._value; },\n            set: function (value) {\n                this.writeValue(value);\n                this._value = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatChipListbox.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            _super.prototype.ngAfterContentInit.call(this);\n            this._initKeyManager();\n            this._chips.changes.pipe(operators.startWith(null), operators.takeUntil(this._destroyed)).subscribe(function () {\n                // Update listbox selectable/multiple properties on chips\n                _this._syncListboxProperties();\n                // Reset chips selected/deselected status\n                _this._initializeSelection();\n                // Check to see if we have a destroyed chip and need to refocus\n                _this._updateFocusForDestroyedChips();\n            });\n        };\n        /**\n         * Focuses the first selected chip in this chip listbox, or the first non-disabled chip when there\n         * are no selected chips.\n         */\n        MatChipListbox.prototype.focus = function () {\n            if (this.disabled) {\n                return;\n            }\n            var firstSelectedChip = this._getFirstSelectedChip();\n            if (firstSelectedChip) {\n                var firstSelectedChipIndex = this._chips.toArray().indexOf(firstSelectedChip);\n                this._keyManager.setActiveItem(firstSelectedChipIndex);\n            }\n            else if (this._chips.length > 0) {\n                this._keyManager.setFirstItemActive();\n            }\n        };\n        /**\n         * Implemented as part of ControlValueAccessor.\n         * @docs-private\n         */\n        MatChipListbox.prototype.writeValue = function (value) {\n            if (this._chips) {\n                this._setSelectionByValue(value, false);\n            }\n        };\n        /**\n         * Implemented as part of ControlValueAccessor.\n         * @docs-private\n         */\n        MatChipListbox.prototype.registerOnChange = function (fn) {\n            this._onChange = fn;\n        };\n        /**\n         * Implemented as part of ControlValueAccessor.\n         * @docs-private\n         */\n        MatChipListbox.prototype.registerOnTouched = function (fn) {\n            this._onTouched = fn;\n        };\n        /**\n         * Implemented as part of ControlValueAccessor.\n         * @docs-private\n         */\n        MatChipListbox.prototype.setDisabledState = function (isDisabled) {\n            this.disabled = isDisabled;\n        };\n        /** Selects all chips with value. */\n        MatChipListbox.prototype._setSelectionByValue = function (value, isUserInput) {\n            var _this = this;\n            if (isUserInput === void 0) { isUserInput = true; }\n            this._clearSelection();\n            if (Array.isArray(value)) {\n                value.forEach(function (currentValue) { return _this._selectValue(currentValue, isUserInput); });\n            }\n            else {\n                var correspondingChip = this._selectValue(value, isUserInput);\n                // Shift focus to the active item. Note that we shouldn't do this in multiple\n                // mode, because we don't know what chip the user interacted with last.\n                if (correspondingChip) {\n                    if (isUserInput) {\n                        this._keyManager.setActiveItem(correspondingChip);\n                    }\n                }\n            }\n        };\n        /** Selects or deselects a chip by id. */\n        MatChipListbox.prototype._setSelected = function (index, selected) {\n            var chip = this._chips.toArray()[index];\n            if (chip && chip.selected != selected) {\n                chip.toggleSelected(true);\n            }\n        };\n        /** When blurred, marks the field as touched when focus moved outside the chip listbox. */\n        MatChipListbox.prototype._blur = function () {\n            var _this = this;\n            if (this.disabled) {\n                return;\n            }\n            if (!this.focused) {\n                this._keyManager.setActiveItem(-1);\n            }\n            // Wait to see if focus moves to an indivdual chip.\n            setTimeout(function () {\n                if (!_this.focused) {\n                    _this._propagateChanges();\n                    _this._markAsTouched();\n                }\n            });\n        };\n        /**\n         * Removes the `tabindex` from the chip listbox and resets it back afterwards, allowing the\n         * user to tab out of it. This prevents the listbox from capturing focus and redirecting\n         * it back to the first chip, creating a focus trap, if it user tries to tab away.\n         */\n        MatChipListbox.prototype._allowFocusEscape = function () {\n            var _this = this;\n            var previousTabIndex = this.tabIndex;\n            if (this.tabIndex !== -1) {\n                this.tabIndex = -1;\n                setTimeout(function () {\n                    _this.tabIndex = previousTabIndex;\n                    _this._changeDetectorRef.markForCheck();\n                });\n            }\n        };\n        /**\n         * Handles custom keyboard shortcuts, and passes other keyboard events to the keyboard manager.\n         */\n        MatChipListbox.prototype._keydown = function (event) {\n            if (this._originatesFromChip(event)) {\n                if (event.keyCode === keycodes.HOME) {\n                    this._keyManager.setFirstItemActive();\n                    event.preventDefault();\n                }\n                else if (event.keyCode === keycodes.END) {\n                    this._keyManager.setLastItemActive();\n                    event.preventDefault();\n                }\n                else {\n                    this._keyManager.onKeydown(event);\n                }\n            }\n        };\n        /** Marks the field as touched */\n        MatChipListbox.prototype._markAsTouched = function () {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n        };\n        /** Emits change event to set the model value. */\n        MatChipListbox.prototype._propagateChanges = function (fallbackValue) {\n            var valueToEmit = null;\n            if (Array.isArray(this.selected)) {\n                valueToEmit = this.selected.map(function (chip) { return chip.value; });\n            }\n            else {\n                valueToEmit = this.selected ? this.selected.value : fallbackValue;\n            }\n            this._value = valueToEmit;\n            this.change.emit(new MatChipListboxChange(this, valueToEmit));\n            this._onChange(valueToEmit);\n            this._changeDetectorRef.markForCheck();\n        };\n        /**\n         * Initializes the chip listbox selection state to reflect any chips that were preselected.\n         */\n        MatChipListbox.prototype._initializeSelection = function () {\n            var _this = this;\n            setTimeout(function () {\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                _this._chips.forEach(function (chip) {\n                    if (chip.selected) {\n                        _this._chipSetFoundation.select(chip.id);\n                    }\n                });\n            });\n        };\n        /**\n         * Deselects every chip in the listbox.\n         * @param skip Chip that should not be deselected.\n         */\n        MatChipListbox.prototype._clearSelection = function (skip) {\n            this._chips.forEach(function (chip) {\n                if (chip !== skip) {\n                    chip.deselect();\n                }\n            });\n        };\n        /**\n         * Finds and selects the chip based on its value.\n         * @returns Chip that has the corresponding value.\n         */\n        MatChipListbox.prototype._selectValue = function (value, isUserInput) {\n            var _this = this;\n            if (isUserInput === void 0) { isUserInput = true; }\n            var correspondingChip = this._chips.find(function (chip) {\n                return chip.value != null && _this._compareWith(chip.value, value);\n            });\n            if (correspondingChip) {\n                isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            }\n            return correspondingChip;\n        };\n        /** Syncs the chip-listbox selection state with the individual chips. */\n        MatChipListbox.prototype._syncListboxProperties = function () {\n            var _this = this;\n            if (this._chips) {\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve().then(function () {\n                    _this._chips.forEach(function (chip) {\n                        chip._chipListMultiple = _this.multiple;\n                        chip.chipListSelectable = _this._selectable;\n                        chip._changeDetectorRef.markForCheck();\n                    });\n                });\n            }\n        };\n        /** Sets the mdc classes for single vs multi selection. */\n        MatChipListbox.prototype._updateMdcSelectionClasses = function () {\n            this._setMdcClass('mdc-chip-set--filter', this.selectable && this.multiple);\n            this._setMdcClass('mdc-chip-set--choice', this.selectable && !this.multiple);\n        };\n        /** Initializes the key manager to manage focus. */\n        MatChipListbox.prototype._initKeyManager = function () {\n            var _this = this;\n            this._keyManager = new a11y.FocusKeyManager(this._chips)\n                .withWrap()\n                .withVerticalOrientation()\n                .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n            if (this._dir) {\n                this._dir.change\n                    .pipe(operators.takeUntil(this._destroyed))\n                    .subscribe(function (dir) { return _this._keyManager.withHorizontalOrientation(dir); });\n            }\n            this._keyManager.tabOut.pipe(operators.takeUntil(this._destroyed)).subscribe(function () {\n                _this._allowFocusEscape();\n            });\n        };\n        /** Returns the first selected chip in this listbox, or undefined if no chips are selected. */\n        MatChipListbox.prototype._getFirstSelectedChip = function () {\n            if (Array.isArray(this.selected)) {\n                return this.selected.length ? this.selected[0] : undefined;\n            }\n            else {\n                return this.selected;\n            }\n        };\n        /** Unsubscribes from all chip events. */\n        MatChipListbox.prototype._dropSubscriptions = function () {\n            _super.prototype._dropSubscriptions.call(this);\n            if (this._chipSelectionSubscription) {\n                this._chipSelectionSubscription.unsubscribe();\n                this._chipSelectionSubscription = null;\n            }\n            if (this._chipBlurSubscription) {\n                this._chipBlurSubscription.unsubscribe();\n                this._chipBlurSubscription = null;\n            }\n            if (this._chipFocusSubscription) {\n                this._chipFocusSubscription.unsubscribe();\n                this._chipFocusSubscription = null;\n            }\n        };\n        /** Subscribes to events on the child chips. */\n        MatChipListbox.prototype._subscribeToChipEvents = function () {\n            _super.prototype._subscribeToChipEvents.call(this);\n            this._listenToChipsSelection();\n            this._listenToChipsFocus();\n            this._listenToChipsBlur();\n        };\n        /** Subscribes to chip focus events. */\n        MatChipListbox.prototype._listenToChipsFocus = function () {\n            var _this = this;\n            this._chipFocusSubscription = this.chipFocusChanges.subscribe(function (event) {\n                var chipIndex = _this._chips.toArray().indexOf(event.chip);\n                if (_this._isValidIndex(chipIndex)) {\n                    _this._keyManager.updateActiveItem(chipIndex);\n                }\n            });\n        };\n        /** Subscribes to chip blur events. */\n        MatChipListbox.prototype._listenToChipsBlur = function () {\n            var _this = this;\n            this._chipBlurSubscription = this.chipBlurChanges.subscribe(function () {\n                _this._blur();\n            });\n        };\n        /** Subscribes to selection changes in the option chips. */\n        MatChipListbox.prototype._listenToChipsSelection = function () {\n            var _this = this;\n            this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(function (chipSelectionChange) {\n                _this._chipSetFoundation.handleChipSelection({\n                    chipId: chipSelectionChange.source.id,\n                    selected: chipSelectionChange.selected,\n                    shouldIgnore: false\n                });\n                if (chipSelectionChange.isUserInput) {\n                    _this._propagateChanges();\n                }\n            });\n        };\n        /**\n         * If the amount of chips changed, we need to update the\n         * key manager state and focus the next closest chip.\n         */\n        MatChipListbox.prototype._updateFocusForDestroyedChips = function () {\n            // Move focus to the closest chip. If no other chips remain, focus the chip-listbox itself.\n            if (this._lastDestroyedChipIndex != null) {\n                if (this._chips.length) {\n                    var newChipIndex = Math.min(this._lastDestroyedChipIndex, this._chips.length - 1);\n                    this._keyManager.setActiveItem(newChipIndex);\n                }\n                else {\n                    this.focus();\n                }\n            }\n            this._lastDestroyedChipIndex = null;\n        };\n        MatChipListbox.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-chip-listbox',\n                        template: '<ng-content></ng-content>',\n                        inputs: ['tabIndex'],\n                        host: {\n                            'class': 'mat-mdc-chip-set mat-mdc-chip-listbox mdc-chip-set',\n                            '[attr.role]': 'role',\n                            '[tabIndex]': 'empty ? -1 : tabIndex',\n                            // TODO: replace this binding with use of AriaDescriber\n                            '[attr.aria-describedby]': '_ariaDescribedby || null',\n                            '[attr.aria-required]': 'role ? required : null',\n                            '[attr.aria-disabled]': 'disabled.toString()',\n                            '[attr.aria-multiselectable]': 'multiple',\n                            '[attr.aria-orientation]': 'ariaOrientation',\n                            '[class.mat-mdc-chip-list-disabled]': 'disabled',\n                            '[class.mat-mdc-chip-list-required]': 'required',\n                            '(focus)': 'focus()',\n                            '(blur)': '_blur()',\n                            '(keydown)': '_keydown($event)',\n                            '[id]': '_uid',\n                        },\n                        providers: [MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR],\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        styles: [\".mdc-chip__icon.mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){width:20px;height:20px;font-size:20px}.mdc-chip-trailing-action__icon{height:18px;width:18px;font-size:18px}.mdc-chip__icon.mdc-chip__icon--trailing{width:18px;height:18px;font-size:18px}.mdc-chip-trailing-action{margin-left:4px;margin-right:-4px}[dir=rtl] .mdc-chip-trailing-action,.mdc-chip-trailing-action[dir=rtl]{margin-left:-4px;margin-right:4px}.mdc-chip__icon--trailing{margin-left:4px;margin-right:-4px}[dir=rtl] .mdc-chip__icon--trailing,.mdc-chip__icon--trailing[dir=rtl]{margin-left:-4px;margin-right:4px}.mdc-touch-target-wrapper{display:inline}.mdc-elevation-overlay{position:absolute;border-radius:inherit;opacity:0;pointer-events:none;transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip{border-radius:16px;height:32px;position:relative;display:inline-flex;align-items:center;box-sizing:border-box;padding:0 12px;border-width:0;outline:none;cursor:pointer;-webkit-appearance:none}.mdc-chip .mdc-chip__ripple{border-radius:16px}.mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){margin-left:-4px;margin-right:4px}[dir=rtl] .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip.mdc-chip--selected .mdc-chip__checkmark[dir=rtl],[dir=rtl] .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden),.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden)[dir=rtl]{margin-left:4px;margin-right:-4px}.mdc-chip .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-chip::-moz-focus-inner{padding:0;border:0}.mdc-chip .mdc-chip__touch{position:absolute;top:50%;right:0;height:48px;left:0;transform:translateY(-50%)}.mdc-chip--exit{opacity:0}.mdc-chip__text{white-space:nowrap}.mdc-chip__icon{border-radius:50%;outline:none;vertical-align:middle}.mdc-chip__checkmark{height:20px}.mdc-chip__checkmark-path{transition:stroke-dashoffset 150ms 50ms cubic-bezier(0.4, 0, 0.6, 1);stroke-width:2px;stroke-dashoffset:29.7833385;stroke-dasharray:29.7833385}.mdc-chip__primary-action:focus{outline:none}.mdc-chip--selected .mdc-chip__checkmark-path{stroke-dashoffset:0}.mdc-chip__icon--leading,.mdc-chip__icon--trailing{position:relative}.mdc-chip__checkmark-svg{width:0;height:20px;transition:width 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip--selected .mdc-chip__checkmark-svg{width:20px}.mdc-chip-set--filter .mdc-chip__icon--leading{transition:opacity 75ms linear;transition-delay:-50ms;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark{transition:opacity 75ms linear;transition-delay:80ms;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark .mdc-chip__checkmark-svg{transition:width 0ms}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading{opacity:0}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading+.mdc-chip__checkmark{width:0;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading{width:0;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading+.mdc-chip__checkmark{width:20px}@keyframes mdc-chip-entry{from{transform:scale(0.8);opacity:.4}to{transform:scale(1);opacity:1}}.mdc-chip-set{padding:4px;display:flex;flex-wrap:wrap;box-sizing:border-box}.mdc-chip-set .mdc-chip{margin:4px}.mdc-chip-set .mdc-chip--touch{margin-top:8px;margin-bottom:8px}.mdc-chip-set--input .mdc-chip{animation:mdc-chip-entry 100ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-chip{cursor:default}.mat-mdc-chip._mat-animation-noopable{transition-duration:1ms;animation:none}.mat-mdc-chip._mat-animation-noopable .mdc-chip__checkmark-svg{transition:none}.cdk-high-contrast-active .mat-mdc-chip{outline:solid 1px}.cdk-high-contrast-active .mat-mdc-chip:focus{outline:dotted 2px}.mat-mdc-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mdc-chip__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}.mdc-chip__ripple::after,.mdc-chip__ripple::before{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";pointer-events:none;opacity:0;border-radius:inherit}._mat-animation-noopable .mdc-chip__ripple::after,._mat-animation-noopable .mdc-chip__ripple::before{transition:none}.mat-mdc-chip-disabled.mat-mdc-chip{opacity:.4}.mat-mdc-chip-disabled.mat-mdc-chip .mat-mdc-chip-trailing-icon,.mat-mdc-chip-disabled.mat-mdc-chip .mat-chip-row-focusable-text-content{pointer-events:none}.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::after,.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::before{display:none}.mat-mdc-chip-set-stacked{flex-direction:column;align-items:flex-start}.mat-mdc-chip-set-stacked .mat-mdc-chip{width:100%}input.mat-mdc-chip-input{flex:1 0 150px}._mat-animation-noopable .mdc-chip__checkmark-path{transition:none}.cdk-high-contrast-black-on-white .mdc-chip__checkmark-path{stroke:#000 !important}.mat-chip-row-focusable-text-content{position:relative}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatChipListbox.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: core.ChangeDetectorRef },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] }\n        ]; };\n        MatChipListbox.propDecorators = {\n            multiple: [{ type: core.Input }],\n            ariaOrientation: [{ type: core.Input, args: ['aria-orientation',] }],\n            selectable: [{ type: core.Input }],\n            compareWith: [{ type: core.Input }],\n            required: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            change: [{ type: core.Output }],\n            _chips: [{ type: core.ContentChildren, args: [MatChipOption, {\n                            // We need to use `descendants: true`, because Ivy will no longer match\n                            // indirect descendants if it's left as false.\n                            descendants: true\n                        },] }]\n        };\n        return MatChipListbox;\n    }(MatChipSet));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A version of GridKeyManager where the cells are HTMLElements, and focus()\n     * is called on a cell when it becomes active.\n     */\n    var GridFocusKeyManager = /** @class */ (function (_super) {\n        __extends(GridFocusKeyManager, _super);\n        function GridFocusKeyManager() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        GridFocusKeyManager.prototype.setActiveCell = function (cell) {\n            _super.prototype.setActiveCell.call(this, cell);\n            if (this.activeCell) {\n                this.activeCell.focus();\n            }\n        };\n        return GridFocusKeyManager;\n    }(GridKeyManager));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Change event object that is emitted when the chip grid value has changed. */\n    var MatChipGridChange = /** @class */ (function () {\n        function MatChipGridChange(\n        /** Chip grid that emitted the event. */\n        source, \n        /** Value of the chip grid when the event was emitted. */\n        value) {\n            this.source = source;\n            this.value = value;\n        }\n        return MatChipGridChange;\n    }());\n    /**\n     * Boilerplate for applying mixins to MatChipGrid.\n     * @docs-private\n     */\n    var MatChipGridBase = /** @class */ (function (_super) {\n        __extends(MatChipGridBase, _super);\n        function MatChipGridBase(_elementRef, _changeDetectorRef, _dir, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n        /** @docs-private */\n        ngControl) {\n            var _this = _super.call(this, _elementRef, _changeDetectorRef, _dir) || this;\n            _this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n            _this._parentForm = _parentForm;\n            _this._parentFormGroup = _parentFormGroup;\n            _this.ngControl = ngControl;\n            return _this;\n        }\n        return MatChipGridBase;\n    }(MatChipSet));\n    var _MatChipGridMixinBase = core$1.mixinErrorState(MatChipGridBase);\n    /**\n     * An extension of the MatChipSet component used with MatChipRow chips and\n     * the matChipInputFor directive.\n     */\n    var MatChipGrid = /** @class */ (function (_super) {\n        __extends(MatChipGrid, _super);\n        function MatChipGrid(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, \n        /** @docs-private */\n        ngControl) {\n            var _this = _super.call(this, _elementRef, _changeDetectorRef, _dir, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;\n            _this.ngControl = ngControl;\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            _this.controlType = 'mat-chip-grid';\n            /**\n             * Function when touched. Set as part of ControlValueAccessor implementation.\n             * @docs-private\n             */\n            _this._onTouched = function () { };\n            /**\n             * Function when changed. Set as part of ControlValueAccessor implementation.\n             * @docs-private\n             */\n            _this._onChange = function () { };\n            _this._required = false;\n            _this._value = [];\n            /** Emits when the chip grid value has been changed by the user. */\n            _this.change = new core.EventEmitter();\n            /**\n             * Emits whenever the raw value of the chip-grid changes. This is here primarily\n             * to facilitate the two-way binding for the `value` input.\n             * @docs-private\n             */\n            _this.valueChange = new core.EventEmitter();\n            if (_this.ngControl) {\n                _this.ngControl.valueAccessor = _this;\n            }\n            return _this;\n        }\n        Object.defineProperty(MatChipGrid.prototype, \"disabled\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return this.ngControl ? !!this.ngControl.disabled : this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                this._syncChipsState();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"id\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return this._chipInput.id; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"empty\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return this._chipInput.empty && this._chips.length === 0; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"role\", {\n            /** The ARIA role applied to the chip grid. */\n            get: function () { return this.empty ? null : 'grid'; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"placeholder\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () {\n                return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n            },\n            set: function (value) {\n                this._placeholder = value;\n                this.stateChanges.next();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"focused\", {\n            /** Whether any chips or the matChipInput inside of this chip-grid has focus. */\n            get: function () { return this._chipInput.focused || this._hasFocusedChip(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"required\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return this._required; },\n            set: function (value) {\n                this._required = coercion.coerceBooleanProperty(value);\n                this.stateChanges.next();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"shouldLabelFloat\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return !this.empty || this.focused; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"value\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return this._value; },\n            set: function (value) {\n                this._value = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"chipBlurChanges\", {\n            /** Combined stream of all of the child chips' blur events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this._chips.map(function (chip) { return chip._onBlur; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"chipFocusChanges\", {\n            /** Combined stream of all of the child chips' focus events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this._chips.map(function (chip) { return chip._onFocus; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatChipGrid.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            _super.prototype.ngAfterContentInit.call(this);\n            this._initKeyManager();\n            this._chips.changes.pipe(operators.startWith(null), operators.takeUntil(this._destroyed)).subscribe(function () {\n                // Check to see if we have a destroyed chip and need to refocus\n                _this._updateFocusForDestroyedChips();\n                _this.stateChanges.next();\n            });\n        };\n        MatChipGrid.prototype.ngAfterViewInit = function () {\n            _super.prototype.ngAfterViewInit.call(this);\n            if (!this._chipInput) {\n                throw Error('mat-chip-grid must be used in combination with matChipInputFor.');\n            }\n        };\n        MatChipGrid.prototype.ngDoCheck = function () {\n            if (this.ngControl) {\n                // We need to re-evaluate this on every change detection cycle, because there are some\n                // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n                // that whatever logic is in here has to be super lean or we risk destroying the performance.\n                this.updateErrorState();\n            }\n        };\n        MatChipGrid.prototype.ngOnDestroy = function () {\n            _super.prototype.ngOnDestroy.call(this);\n            this.stateChanges.complete();\n        };\n        /** Associates an HTML input element with this chip grid. */\n        MatChipGrid.prototype.registerInput = function (inputElement) {\n            this._chipInput = inputElement;\n            this._setMdcClass('mdc-chip-set--input', true);\n        };\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        MatChipGrid.prototype.onContainerClick = function (event) {\n            if (!this._originatesFromChip(event) && !this.disabled) {\n                this.focus();\n            }\n        };\n        /**\n         * Focuses the first chip in this chip grid, or the associated input when there\n         * are no eligible chips.\n         */\n        MatChipGrid.prototype.focus = function () {\n            if (this.disabled || this._chipInput.focused) {\n                return;\n            }\n            if (this._chips.length > 0) {\n                this._keyManager.setFirstCellActive();\n            }\n            else {\n                this._focusInput();\n            }\n            this.stateChanges.next();\n        };\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        MatChipGrid.prototype.setDescribedByIds = function (ids) { this._ariaDescribedby = ids.join(' '); };\n        /**\n         * Implemented as part of ControlValueAccessor.\n         * @docs-private\n         */\n        MatChipGrid.prototype.writeValue = function (value) {\n            // The user is responsible for creating the child chips, so we just store the value.\n            this._value = value;\n        };\n        /**\n         * Implemented as part of ControlValueAccessor.\n         * @docs-private\n         */\n        MatChipGrid.prototype.registerOnChange = function (fn) {\n            this._onChange = fn;\n        };\n        /**\n         * Implemented as part of ControlValueAccessor.\n         * @docs-private\n         */\n        MatChipGrid.prototype.registerOnTouched = function (fn) {\n            this._onTouched = fn;\n        };\n        /**\n         * Implemented as part of ControlValueAccessor.\n         * @docs-private\n         */\n        MatChipGrid.prototype.setDisabledState = function (isDisabled) {\n            this.disabled = isDisabled;\n            this.stateChanges.next();\n        };\n        /** When blurred, mark the field as touched when focus moved outside the chip grid. */\n        MatChipGrid.prototype._blur = function () {\n            var _this = this;\n            if (this.disabled) {\n                return;\n            }\n            // Check whether the focus moved to chip input.\n            // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n            // to chip input, do nothing.\n            // Timeout is needed to wait for the focus() event trigger on chip input.\n            setTimeout(function () {\n                if (!_this.focused) {\n                    _this._keyManager.setActiveCell({ row: -1, column: -1 });\n                    _this._propagateChanges();\n                    _this._markAsTouched();\n                }\n            });\n        };\n        /**\n         * Removes the `tabindex` from the chip grid and resets it back afterwards, allowing the\n         * user to tab out of it. This prevents the grid from capturing focus and redirecting\n         * it back to the first chip, creating a focus trap, if it user tries to tab away.\n         */\n        MatChipGrid.prototype._allowFocusEscape = function () {\n            var _this = this;\n            if (this._chipInput.focused) {\n                return;\n            }\n            var previousTabIndex = this.tabIndex;\n            if (this.tabIndex !== -1) {\n                this.tabIndex = -1;\n                setTimeout(function () {\n                    _this.tabIndex = previousTabIndex;\n                    _this._changeDetectorRef.markForCheck();\n                });\n            }\n        };\n        /** Handles custom keyboard events. */\n        MatChipGrid.prototype._keydown = function (event) {\n            var target = event.target;\n            var keyCode = event.keyCode;\n            var manager = this._keyManager;\n            // If they are on an empty input and hit backspace, focus the last chip\n            if (keyCode === keycodes.BACKSPACE && this._isEmptyInput(target)) {\n                if (this._chips.length) {\n                    manager.setLastCellActive();\n                }\n                event.preventDefault();\n            }\n            else if (keyCode === keycodes.TAB && target.id !== this._chipInput.id) {\n                this._allowFocusEscape();\n            }\n            else if (this._originatesFromChip(event)) {\n                if (keyCode === keycodes.HOME) {\n                    manager.setFirstCellActive();\n                    event.preventDefault();\n                }\n                else if (keyCode === keycodes.END) {\n                    manager.setLastCellActive();\n                    event.preventDefault();\n                }\n                else {\n                    manager.onKeydown(event);\n                }\n            }\n            this.stateChanges.next();\n        };\n        /** Unsubscribes from all chip events. */\n        MatChipGrid.prototype._dropSubscriptions = function () {\n            _super.prototype._dropSubscriptions.call(this);\n            if (this._chipBlurSubscription) {\n                this._chipBlurSubscription.unsubscribe();\n                this._chipBlurSubscription = null;\n            }\n            if (this._chipFocusSubscription) {\n                this._chipFocusSubscription.unsubscribe();\n                this._chipFocusSubscription = null;\n            }\n        };\n        /** Subscribes to events on the child chips. */\n        MatChipGrid.prototype._subscribeToChipEvents = function () {\n            _super.prototype._subscribeToChipEvents.call(this);\n            this._listenToChipsFocus();\n            this._listenToChipsBlur();\n        };\n        /** Initializes the key manager to manage focus. */\n        MatChipGrid.prototype._initKeyManager = function () {\n            var _this = this;\n            this._keyManager = new GridFocusKeyManager(this._chips)\n                .withDirectionality(this._dir ? this._dir.value : 'ltr');\n            if (this._dir) {\n                this._dir.change\n                    .pipe(operators.takeUntil(this._destroyed))\n                    .subscribe(function (dir) { return _this._keyManager.withDirectionality(dir); });\n            }\n        };\n        /** Subscribes to chip focus events. */\n        MatChipGrid.prototype._listenToChipsFocus = function () {\n            var _this = this;\n            this._chipFocusSubscription = this.chipFocusChanges.subscribe(function (event) {\n                var chipIndex = _this._chips.toArray().indexOf(event.chip);\n                if (_this._isValidIndex(chipIndex)) {\n                    _this._keyManager.updateActiveCell({ row: chipIndex, column: 0 });\n                }\n            });\n        };\n        /** Subscribes to chip blur events. */\n        MatChipGrid.prototype._listenToChipsBlur = function () {\n            var _this = this;\n            this._chipBlurSubscription = this.chipBlurChanges.subscribe(function () {\n                _this._blur();\n                _this.stateChanges.next();\n            });\n        };\n        /** Emits change event to set the model value. */\n        MatChipGrid.prototype._propagateChanges = function () {\n            var valueToEmit = this._chips.length ? this._chips.toArray().map(function (chip) { return chip.value; }) : [];\n            this._value = valueToEmit;\n            this.change.emit(new MatChipGridChange(this, valueToEmit));\n            this.valueChange.emit(valueToEmit);\n            this._onChange(valueToEmit);\n            this._changeDetectorRef.markForCheck();\n        };\n        /** Mark the field as touched */\n        MatChipGrid.prototype._markAsTouched = function () {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        };\n        /**\n         * If the amount of chips changed, we need to focus the next closest chip.\n         */\n        MatChipGrid.prototype._updateFocusForDestroyedChips = function () {\n            // Move focus to the closest chip. If no other chips remain, focus the chip-grid itself.\n            if (this._lastDestroyedChipIndex != null) {\n                if (this._chips.length) {\n                    var newChipIndex = Math.min(this._lastDestroyedChipIndex, this._chips.length - 1);\n                    this._keyManager.setActiveCell({\n                        row: newChipIndex,\n                        column: this._keyManager.activeColumnIndex\n                    });\n                }\n                else {\n                    this.focus();\n                }\n            }\n            this._lastDestroyedChipIndex = null;\n        };\n        /** Focus input element. */\n        MatChipGrid.prototype._focusInput = function () {\n            this._chipInput.focus();\n        };\n        /** Returns true if element is an input with no value. */\n        MatChipGrid.prototype._isEmptyInput = function (element) {\n            if (element && element.id === this._chipInput.id) {\n                return this._chipInput.empty;\n            }\n            return false;\n        };\n        MatChipGrid.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-chip-grid',\n                        template: '<ng-content></ng-content>',\n                        inputs: ['tabIndex'],\n                        host: {\n                            'class': 'mat-mdc-chip-set mat-mdc-chip-grid mdc-chip-set',\n                            '[attr.role]': 'role',\n                            '[tabIndex]': '_chips && _chips.length === 0 ? -1 : tabIndex',\n                            // TODO: replace this binding with use of AriaDescriber\n                            '[attr.aria-describedby]': '_ariaDescribedby || null',\n                            '[attr.aria-disabled]': 'disabled.toString()',\n                            '[attr.aria-invalid]': 'errorState',\n                            '[class.mat-mdc-chip-list-disabled]': 'disabled',\n                            '[class.mat-mdc-chip-list-invalid]': 'errorState',\n                            '[class.mat-mdc-chip-list-required]': 'required',\n                            '(focus)': 'focus()',\n                            '(blur)': '_blur()',\n                            '(keydown)': '_keydown($event)',\n                            '[id]': '_uid',\n                        },\n                        providers: [{ provide: formField.MatFormFieldControl, useExisting: MatChipGrid }],\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        styles: [\".mdc-chip__icon.mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){width:20px;height:20px;font-size:20px}.mdc-chip-trailing-action__icon{height:18px;width:18px;font-size:18px}.mdc-chip__icon.mdc-chip__icon--trailing{width:18px;height:18px;font-size:18px}.mdc-chip-trailing-action{margin-left:4px;margin-right:-4px}[dir=rtl] .mdc-chip-trailing-action,.mdc-chip-trailing-action[dir=rtl]{margin-left:-4px;margin-right:4px}.mdc-chip__icon--trailing{margin-left:4px;margin-right:-4px}[dir=rtl] .mdc-chip__icon--trailing,.mdc-chip__icon--trailing[dir=rtl]{margin-left:-4px;margin-right:4px}.mdc-touch-target-wrapper{display:inline}.mdc-elevation-overlay{position:absolute;border-radius:inherit;opacity:0;pointer-events:none;transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip{border-radius:16px;height:32px;position:relative;display:inline-flex;align-items:center;box-sizing:border-box;padding:0 12px;border-width:0;outline:none;cursor:pointer;-webkit-appearance:none}.mdc-chip .mdc-chip__ripple{border-radius:16px}.mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){margin-left:-4px;margin-right:4px}[dir=rtl] .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip.mdc-chip--selected .mdc-chip__checkmark[dir=rtl],[dir=rtl] .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden),.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden)[dir=rtl]{margin-left:4px;margin-right:-4px}.mdc-chip .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-chip::-moz-focus-inner{padding:0;border:0}.mdc-chip .mdc-chip__touch{position:absolute;top:50%;right:0;height:48px;left:0;transform:translateY(-50%)}.mdc-chip--exit{opacity:0}.mdc-chip__text{white-space:nowrap}.mdc-chip__icon{border-radius:50%;outline:none;vertical-align:middle}.mdc-chip__checkmark{height:20px}.mdc-chip__checkmark-path{transition:stroke-dashoffset 150ms 50ms cubic-bezier(0.4, 0, 0.6, 1);stroke-width:2px;stroke-dashoffset:29.7833385;stroke-dasharray:29.7833385}.mdc-chip__primary-action:focus{outline:none}.mdc-chip--selected .mdc-chip__checkmark-path{stroke-dashoffset:0}.mdc-chip__icon--leading,.mdc-chip__icon--trailing{position:relative}.mdc-chip__checkmark-svg{width:0;height:20px;transition:width 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip--selected .mdc-chip__checkmark-svg{width:20px}.mdc-chip-set--filter .mdc-chip__icon--leading{transition:opacity 75ms linear;transition-delay:-50ms;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark{transition:opacity 75ms linear;transition-delay:80ms;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark .mdc-chip__checkmark-svg{transition:width 0ms}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading{opacity:0}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading+.mdc-chip__checkmark{width:0;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading{width:0;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading+.mdc-chip__checkmark{width:20px}@keyframes mdc-chip-entry{from{transform:scale(0.8);opacity:.4}to{transform:scale(1);opacity:1}}.mdc-chip-set{padding:4px;display:flex;flex-wrap:wrap;box-sizing:border-box}.mdc-chip-set .mdc-chip{margin:4px}.mdc-chip-set .mdc-chip--touch{margin-top:8px;margin-bottom:8px}.mdc-chip-set--input .mdc-chip{animation:mdc-chip-entry 100ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-chip{cursor:default}.mat-mdc-chip._mat-animation-noopable{transition-duration:1ms;animation:none}.mat-mdc-chip._mat-animation-noopable .mdc-chip__checkmark-svg{transition:none}.cdk-high-contrast-active .mat-mdc-chip{outline:solid 1px}.cdk-high-contrast-active .mat-mdc-chip:focus{outline:dotted 2px}.mat-mdc-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mdc-chip__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}.mdc-chip__ripple::after,.mdc-chip__ripple::before{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";pointer-events:none;opacity:0;border-radius:inherit}._mat-animation-noopable .mdc-chip__ripple::after,._mat-animation-noopable .mdc-chip__ripple::before{transition:none}.mat-mdc-chip-disabled.mat-mdc-chip{opacity:.4}.mat-mdc-chip-disabled.mat-mdc-chip .mat-mdc-chip-trailing-icon,.mat-mdc-chip-disabled.mat-mdc-chip .mat-chip-row-focusable-text-content{pointer-events:none}.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::after,.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::before{display:none}.mat-mdc-chip-set-stacked{flex-direction:column;align-items:flex-start}.mat-mdc-chip-set-stacked .mat-mdc-chip{width:100%}input.mat-mdc-chip-input{flex:1 0 150px}._mat-animation-noopable .mdc-chip__checkmark-path{transition:none}.cdk-high-contrast-black-on-white .mdc-chip__checkmark-path{stroke:#000 !important}.mat-chip-row-focusable-text-content{position:relative}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatChipGrid.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: core.ChangeDetectorRef },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },\n            { type: forms.NgForm, decorators: [{ type: core.Optional }] },\n            { type: forms.FormGroupDirective, decorators: [{ type: core.Optional }] },\n            { type: core$1.ErrorStateMatcher },\n            { type: forms.NgControl, decorators: [{ type: core.Optional }, { type: core.Self }] }\n        ]; };\n        MatChipGrid.propDecorators = {\n            disabled: [{ type: core.Input }],\n            placeholder: [{ type: core.Input }, { type: core.Input }],\n            required: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            errorStateMatcher: [{ type: core.Input }],\n            change: [{ type: core.Output }],\n            valueChange: [{ type: core.Output }],\n            _chips: [{ type: core.ContentChildren, args: [MatChipRow, {\n                            // We need to use `descendants: true`, because Ivy will no longer match\n                            // indirect descendants if it's left as false.\n                            descendants: true\n                        },] }]\n        };\n        return MatChipGrid;\n    }(_MatChipGridMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Injection token to be used to override the default options for the chips module. */\n    var MAT_CHIPS_DEFAULT_OPTIONS = new core.InjectionToken('mat-chips-default-options');\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Increasing integer for generating unique ids.\n    var nextUniqueId = 0;\n    /**\n     * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n     * May be placed inside or outside of a `<mat-chip-grid>`.\n     */\n    var MatChipInput = /** @class */ (function () {\n        function MatChipInput(_elementRef, _defaultOptions) {\n            this._elementRef = _elementRef;\n            this._defaultOptions = _defaultOptions;\n            /** Whether the control is focused. */\n            this.focused = false;\n            this._addOnBlur = false;\n            /**\n             * The list of key codes that will trigger a chipEnd event.\n             *\n             * Defaults to `[ENTER]`.\n             */\n            this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n            /** Emitted when a chip is to be added. */\n            this.chipEnd = new core.EventEmitter();\n            /** The input's placeholder text. */\n            this.placeholder = '';\n            /** Unique id for the input. */\n            this.id = \"mat-mdc-chip-list-input-\" + nextUniqueId++;\n            this._disabled = false;\n            this._inputElement = this._elementRef.nativeElement;\n        }\n        Object.defineProperty(MatChipInput.prototype, \"chipGrid\", {\n            /** Register input for chip list */\n            set: function (value) {\n                if (value) {\n                    this._chipGrid = value;\n                    this._chipGrid.registerInput(this);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipInput.prototype, \"addOnBlur\", {\n            /**\n             * Whether or not the chipEnd event will be emitted when the input is blurred.\n             */\n            get: function () { return this._addOnBlur; },\n            set: function (value) { this._addOnBlur = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipInput.prototype, \"disabled\", {\n            /** Whether the input is disabled. */\n            get: function () { return this._disabled || (this._chipGrid && this._chipGrid.disabled); },\n            set: function (value) { this._disabled = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipInput.prototype, \"empty\", {\n            /** Whether the input is empty. */\n            get: function () { return !this._inputElement.value; },\n            enumerable: true,\n            configurable: true\n        });\n        MatChipInput.prototype.ngOnChanges = function () {\n            this._chipGrid.stateChanges.next();\n        };\n        /** Utility method to make host definition/tests more clear. */\n        MatChipInput.prototype._keydown = function (event) {\n            // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n            // want to do this when going backwards, because focus should go back to the first chip.\n            if (event && event.keyCode === keycodes.TAB && !keycodes.hasModifierKey(event, 'shiftKey')) {\n                this._chipGrid._allowFocusEscape();\n            }\n            this._emitChipEnd(event);\n        };\n        /** Checks to see if the blur should emit the (chipEnd) event. */\n        MatChipInput.prototype._blur = function () {\n            if (this.addOnBlur) {\n                this._emitChipEnd();\n            }\n            this.focused = false;\n            // Blur the chip list if it is not focused\n            if (!this._chipGrid.focused) {\n                this._chipGrid._blur();\n            }\n            this._chipGrid.stateChanges.next();\n        };\n        MatChipInput.prototype._focus = function () {\n            this.focused = true;\n            this._chipGrid.stateChanges.next();\n        };\n        /** Checks to see if the (chipEnd) event needs to be emitted. */\n        MatChipInput.prototype._emitChipEnd = function (event) {\n            if (!this._inputElement.value && !!event) {\n                this._chipGrid._keydown(event);\n            }\n            if (!event || this._isSeparatorKey(event)) {\n                this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n                if (event) {\n                    event.preventDefault();\n                }\n            }\n        };\n        MatChipInput.prototype._onInput = function () {\n            // Let chip list know whenever the value changes.\n            this._chipGrid.stateChanges.next();\n        };\n        /** Focuses the input. */\n        MatChipInput.prototype.focus = function () {\n            this._inputElement.focus();\n        };\n        /** Checks whether a keycode is one of the configured separators. */\n        MatChipInput.prototype._isSeparatorKey = function (event) {\n            if (keycodes.hasModifierKey(event)) {\n                return false;\n            }\n            var separators = this.separatorKeyCodes;\n            var keyCode = event.keyCode;\n            return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n        };\n        MatChipInput.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'input[matChipInputFor]',\n                        exportAs: 'matChipInput, matChipInputFor',\n                        host: {\n                            'class': 'mat-mdc-chip-input mat-input-element',\n                            '(keydown)': '_keydown($event)',\n                            '(blur)': '_blur()',\n                            '(focus)': '_focus()',\n                            '(input)': '_onInput()',\n                            '[id]': 'id',\n                            '[attr.disabled]': 'disabled || null',\n                            '[attr.placeholder]': 'placeholder || null',\n                            '[attr.aria-invalid]': '_chipGrid && _chipGrid.ngControl ? _chipGrid.ngControl.invalid : null',\n                            '[attr.aria-required]': '_chipGrid && _chipGrid.required || null',\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        MatChipInput.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n        ]; };\n        MatChipInput.propDecorators = {\n            chipGrid: [{ type: core.Input, args: ['matChipInputFor',] }],\n            addOnBlur: [{ type: core.Input, args: ['matChipInputAddOnBlur',] }],\n            separatorKeyCodes: [{ type: core.Input, args: ['matChipInputSeparatorKeyCodes',] }],\n            chipEnd: [{ type: core.Output, args: ['matChipInputTokenEnd',] }],\n            placeholder: [{ type: core.Input }],\n            id: [{ type: core.Input }],\n            disabled: [{ type: core.Input }]\n        };\n        return MatChipInput;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var CHIP_DECLARATIONS = [\n        MatChip,\n        MatChipAvatar,\n        MatChipCssInternalOnly,\n        MatChipGrid,\n        MatChipInput,\n        MatChipListbox,\n        MatChipOption,\n        MatChipRemove,\n        MatChipRow,\n        MatChipSet,\n        MatChipTrailingIcon,\n    ];\n    var Éµ0 = {\n        separatorKeyCodes: [keycodes.ENTER]\n    };\n    var MatChipsModule = /** @class */ (function () {\n        function MatChipsModule() {\n        }\n        MatChipsModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [core$1.MatCommonModule, common.CommonModule, core$1.MatRippleModule],\n                        exports: [core$1.MatCommonModule, CHIP_DECLARATIONS],\n                        declarations: CHIP_DECLARATIONS,\n                        providers: [\n                            core$1.ErrorStateMatcher,\n                            {\n                                provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                                useValue: Éµ0\n                            }\n                        ]\n                    },] }\n        ];\n        return MatChipsModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_CHIPS_DEFAULT_OPTIONS = MAT_CHIPS_DEFAULT_OPTIONS;\n    exports.MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR = MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR;\n    exports.MatChip = MatChip;\n    exports.MatChipAvatar = MatChipAvatar;\n    exports.MatChipCssInternalOnly = MatChipCssInternalOnly;\n    exports.MatChipGrid = MatChipGrid;\n    exports.MatChipGridChange = MatChipGridChange;\n    exports.MatChipInput = MatChipInput;\n    exports.MatChipListbox = MatChipListbox;\n    exports.MatChipListboxChange = MatChipListboxChange;\n    exports.MatChipOption = MatChipOption;\n    exports.MatChipRemove = MatChipRemove;\n    exports.MatChipRow = MatChipRow;\n    exports.MatChipSelectionChange = MatChipSelectionChange;\n    exports.MatChipSet = MatChipSet;\n    exports.MatChipTrailingIcon = MatChipTrailingIcon;\n    exports.MatChipsModule = MatChipsModule;\n    exports.Éµ0 = Éµ0;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-experimental-mdc-chips.umd.js.map\n"]}