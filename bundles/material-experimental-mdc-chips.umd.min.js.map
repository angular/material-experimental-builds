{"version":3,"sources":["src/material-experimental/material-experimental-mdc-chips.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","materialExperimental","mdcChips","cdk","bidi","coercion","platformBrowser","animations","core","material","mdc","chips","ripple","keycodes","rxjs","operators","a11y","forms","formField","common","this","core$1","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","MatChipAvatar","_changeDetectorRef","_elementRef","setClass","cssClass","active","nativeElement","classList","toggle","markForCheck","decorators","type","Directive","args","selector","host","class","role","ctorParameters","ChangeDetectorRef","ElementRef","MatChipTrailingIcon","focus","setAttribute","name","tabindex","aria-hidden","MatChipRemoveBase","_super","MatChipRemove","elementRef","_this","interaction","Subject","nodeName","inputs","[tabIndex]","(click)","(keydown)","[attr.aria-hidden]","mixinTabIndex","mixinDisabled","uid","RIPPLE_ANIMATION_CONFIG","enterDuration","numbers","DEACTIVATION_TIMEOUT_MS","exitDuration","FG_DEACTIVATION_MS","MatChipCssInternalOnly","MatChip","_ngZone","_dir","animationMode","_rippleAnimation","_isRippleCentered","_onFocus","_onBlur","HANDLED_KEYS","_hasFocusInternal","_uniqueId","id","_disabled","_removable","_highlighted","removeIconInteraction","EventEmitter","destroyed","removed","basicChipAttrName","_destroyed","_chipAdapter","addClass","className","_setMdcClass","removeClass","hasClass","contains","addClassToLeadingIcon","leadingIcon","removeClassFromLeadingIcon","eventTargetHasClass","target","notifyInteraction","emit","notifySelection","notifyNavigation","notifyTrailingIconInteraction","notifyRemoval","chip","style","display","getComputedStyleValue","propertyName","window","getComputedStyle","getPropertyValue","setStyleProperty","setProperty","hasLeadingIcon","hasTrailingAction","trailingIcon","isRTL","focusPrimaryAction","focusTrailingAction","setTrailingActionAttr","attr","setPrimaryActionAttr","getRootBoundingClientRect","getBoundingClientRect","getCheckmarkBoundingClientRect","getAttribute","_chipFoundation","MDCChipFoundation","_animationsDisabled","_isBasicChip","hasAttribute","tagName","toLowerCase","_handleTransitionEnd","event","handleTransitionEnd","defineProperty","get","enumerable","configurable","set","coerceBooleanProperty","removeIcon","disabled","undefined","_value","textContent","ngAfterContentInit","_initRemoveIcon","ngAfterViewInit","init","ngOnDestroy","complete","destroy","setShouldRemoveOnTrailingIconClick","_listenToRemoveIconInteraction","pipe","takeUntil","subscribe","isKeyboardEvent","startsWith","indexOf","keyCode","handleTrailingIconInteraction","hasModifierKey","SPACE","ENTER","preventDefault","remove","removable","beginExit","classes","add","_handleInteraction","handleInteraction","_isRippleDisabled","disableRipple","Component","exportAs","template","[class.mat-mdc-chip-disabled]","[class.mat-mdc-chip-highlighted]","[class.mat-mdc-chip-with-avatar]","[class.mat-mdc-chip-with-trailing-icon]","[class.mat-mdc-basic-chip]","[class.mat-mdc-standard-chip]","[class._mat-animation-noopable]","[id]","[attr.disabled]","[attr.aria-disabled]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","styles","NgZone","Directionality","Optional","String","Inject","ANIMATION_MODULE_TYPE","propDecorators","HostListener","Input","highlighted","Output","ContentChild","ViewChild","MatRipple","mixinColor","mixinDisableRipple","MatChipBase","MatChipSelectionChange","source","selected","isUserInput","MatChipOption","apply","chipListSelectable","_chipListMultiple","_selectable","selectionChange","isSelected","selectable","setSelected","_dispatchSelectionChange","toString","chipCssClasses","HIDDEN_LEADING_ICON","select","deselect","selectViaInteraction","toggleSelected","_hasFocus","_blur","onStable","asObservable","take","run","_click","stopPropagation","_keydown","[class.mat-mdc-chip-selected]","[attr.aria-selected]","(focus)","(blur)","providers","provide","useExisting","NAVIGATION_KEYS","DOWN_ARROW","UP_ARROW","RIGHT_ARROW","LEFT_ARROW","GridKeyManager","_rows","_activeRowIndex","_activeColumnIndex","_activeRow","_activeCell","change","QueryList","changes","newRows","newIndex","toArray","withDirectionality","direction","setActiveCell","cell","previousRowIndex","previousColumnIndex","updateActiveCell","row","column","onKeydown","setNextRowActive","setPreviousRowActive","setPreviousColumnActive","setNextColumnActive","setFirstCellActive","_setActiveCellByIndex","setLastCellActive","lastRowIndex","lastRow","_getRowsArray","cells","_setActiveCellByDelta","rowArray","forEach","rowIndex","columnIndex","rowDelta","columnDelta","previousRow","targetRow","MatChipRow","BACKSPACE","DELETE","setTimeout","tabIndex","chipContent","_focusout","_focusin","_mousedown","(mousedown)","(focusin)","(focusout)","uid$1","MatChipSet","_lastDestroyedChipIndex","_chipSetAdapter","_hasMdcClass","removeChipAtIndex","selectChipAtIndex","getIndexOfChipById","_chips","findIndex","focusChipPrimaryActionAtIndex","focusChipTrailingActionAtIndex","removeFocusFromChipAtIndex","getChipListCount","announceMessage","_uid","_mdcClasses","_chipSetFoundation","MDCChipSetFoundation","_syncChipsState","empty","_hasFocusedChip","merge","map","startWith","Promise","resolve","then","_resetChips","_dropSubscriptions","some","_subscribeToChipEvents","_listenToChipsRemove","_listenToChipsDestroyed","_listenToChipsInteraction","_chipRemoveSubscription","chipRemoveChanges","handleChipRemoval","chipId","removedAnnouncement","_chipDestroyedSubscription","chipDestroyedChanges","chipIndex","_isValidIndex","_chipInteractionSubscription","chipInteractionChanges","handleChipInteraction","unsubscribe","index","_originatesFromChip","currentElement","parentElement","[attr.role]","[attr.aria-describedby]","ContentChildren","descendants","MatChipSetBase","MatChipListboxChange","MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatChipListbox","multi","_onTouched","_onChange","_multiple","ariaOrientation","_compareWith","o1","o2","_required","_setSelected","_updateMdcSelectionClasses","_syncListboxProperties","selectedChips","filter","multiple","fn","_initializeSelection","writeValue","_initKeyManager","_updateFocusForDestroyedChips","firstSelectedChip","_getFirstSelectedChip","firstSelectedChipIndex","_keyManager","setActiveItem","setFirstItemActive","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_clearSelection","isArray","currentValue","_selectValue","correspondingChip","focused","_propagateChanges","_markAsTouched","_allowFocusEscape","previousTabIndex","HOME","END","setLastItemActive","fallbackValue","valueToEmit","skip","find","FocusKeyManager","withWrap","withVerticalOrientation","withHorizontalOrientation","dir","tabOut","_chipSelectionSubscription","_chipBlurSubscription","_chipFocusSubscription","_listenToChipsSelection","_listenToChipsFocus","_listenToChipsBlur","chipFocusChanges","updateActiveItem","chipBlurChanges","chipSelectionChanges","chipSelectionChange","handleChipSelection","shouldIgnore","newChipIndex","Math","min","[attr.aria-required]","[attr.aria-multiselectable]","[attr.aria-orientation]","[class.mat-mdc-chip-list-disabled]","[class.mat-mdc-chip-list-required]","compareWith","required","GridFocusKeyManager","activeCell","MatChipGridChange","MatChipGridBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MatChipGrid","controlType","valueChange","valueAccessor","_chipInput","placeholder","_placeholder","stateChanges","Error","ngDoCheck","updateErrorState","registerInput","inputElement","onContainerClick","_focusInput","setDescribedByIds","ids","_ariaDescribedby","join","manager","_isEmptyInput","TAB","activeColumnIndex","element","[attr.aria-invalid]","[class.mat-mdc-chip-list-invalid]","MatFormFieldControl","NgForm","FormGroupDirective","ErrorStateMatcher","NgControl","Self","mixinErrorState","MAT_CHIPS_DEFAULT_OPTIONS","InjectionToken","nextUniqueId","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_inputElement","_chipGrid","ngOnChanges","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","input","_onInput","separators","has","(input)","[attr.placeholder]","chipGrid","CHIP_DECLARATIONS","Éµ0","MatChipsModule","NgModule","imports","MatCommonModule","CommonModule","MatRippleModule","declarations","useValue"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/bidi'), require('@angular/cdk/coercion'), require('@angular/platform-browser/animations'), require('@angular/core'), require('@angular/material/core'), require('@material/chips'), require('@material/ripple'), require('@angular/cdk/keycodes'), require('rxjs'), require('rxjs/operators'), require('@angular/cdk/a11y'), require('@angular/forms'), require('@angular/material/form-field'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('@angular/material-experimental/mdc-chips', ['exports', '@angular/cdk/bidi', '@angular/cdk/coercion', '@angular/platform-browser/animations', '@angular/core', '@angular/material/core', '@material/chips', '@material/ripple', '@angular/cdk/keycodes', 'rxjs', 'rxjs/operators', '@angular/cdk/a11y', '@angular/forms', '@angular/material/form-field', '@angular/common'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.materialExperimental = global.ng.materialExperimental || {}, global.ng.materialExperimental.mdcChips = {}), global.ng.cdk.bidi, global.ng.cdk.coercion, global.ng.platformBrowser.animations, global.ng.core, global.ng.material.core, global.mdc.chips, global.mdc.ripple, global.ng.cdk.keycodes, global.rxjs, global.rxjs.operators, global.ng.cdk.a11y, global.ng.forms, global.ng.material.formField, global.ng.common));\n}(this, (function (exports, bidi, coercion, animations, core, core$1, chips, ripple, keycodes, rxjs, operators, a11y, forms, formField, common) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Directive to add CSS classes to chip leading icon.\n     * @docs-private\n     */\n    var MatChipAvatar = /** @class */ (function () {\n        function MatChipAvatar(_changeDetectorRef, _elementRef) {\n            this._changeDetectorRef = _changeDetectorRef;\n            this._elementRef = _elementRef;\n        }\n        /** Sets whether the given CSS class should be applied to the leading icon. */\n        MatChipAvatar.prototype.setClass = function (cssClass, active) {\n            this._elementRef.nativeElement.classList.toggle(cssClass, active);\n            this._changeDetectorRef.markForCheck();\n        };\n        MatChipAvatar.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-chip-avatar, [matChipAvatar]',\n                        host: {\n                            'class': 'mat-mdc-chip-avatar mdc-chip__icon mdc-chip__icon--leading',\n                            'role': 'img'\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        MatChipAvatar.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef },\n            { type: core.ElementRef }\n        ]; };\n        return MatChipAvatar;\n    }());\n    /**\n     * Directive to add CSS classes to and configure attributes for chip trailing icon.\n     * @docs-private\n     */\n    var MatChipTrailingIcon = /** @class */ (function () {\n        function MatChipTrailingIcon(_elementRef) {\n            this._elementRef = _elementRef;\n        }\n        MatChipTrailingIcon.prototype.focus = function () {\n            this._elementRef.nativeElement.focus();\n        };\n        /** Sets an attribute on the icon. */\n        MatChipTrailingIcon.prototype.setAttribute = function (name, value) {\n            this._elementRef.nativeElement.setAttribute(name, value);\n        };\n        MatChipTrailingIcon.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                        host: {\n                            'class': 'mat-mdc-chip-trailing-icon mdc-chip__icon mdc-chip__icon--trailing',\n                            'tabindex': '-1',\n                            'aria-hidden': 'true',\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        MatChipTrailingIcon.ctorParameters = function () { return [\n            { type: core.ElementRef }\n        ]; };\n        return MatChipTrailingIcon;\n    }());\n    /**\n     * Boilerplate for applying mixins to MatChipRemove.\n     * @docs-private\n     */\n    var MatChipRemoveBase = /** @class */ (function (_super) {\n        __extends(MatChipRemoveBase, _super);\n        function MatChipRemoveBase(_elementRef) {\n            return _super.call(this, _elementRef) || this;\n        }\n        return MatChipRemoveBase;\n    }(MatChipTrailingIcon));\n    var _MatChipRemoveMixinBase = core$1.mixinTabIndex(core$1.mixinDisabled(MatChipRemoveBase), 0);\n    /**\n     * Directive to remove the parent chip when the trailing icon is clicked or\n     * when the ENTER key is pressed on it.\n     *\n     * Recommended for use with the Material Design \"cancel\" icon\n     * available at https://material.io/icons/#ic_cancel.\n     *\n     * Example:\n     *\n     * ```\n     * <mat-chip>\n     *   <mat-icon matChipRemove>cancel</mat-icon>\n     * </mat-chip>\n     * ```\n     */\n    var MatChipRemove = /** @class */ (function (_super) {\n        __extends(MatChipRemove, _super);\n        function MatChipRemove(elementRef) {\n            var _this = _super.call(this, elementRef) || this;\n            /**\n             * Emits when the user interacts with the icon.\n             * @docs-private\n             */\n            _this.interaction = new rxjs.Subject();\n            if (elementRef.nativeElement.nodeName === 'BUTTON') {\n                elementRef.nativeElement.setAttribute('type', 'button');\n            }\n            return _this;\n        }\n        MatChipRemove.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matChipRemove]',\n                        inputs: ['disabled', 'tabIndex'],\n                        host: {\n                            'class': \"mat-mdc-chip-remove mat-mdc-chip-trailing-icon mat-mdc-focus-indicator\\n        mdc-chip__icon mdc-chip__icon--trailing\",\n                            '[tabIndex]': 'tabIndex',\n                            'role': 'button',\n                            '(click)': 'interaction.next($event)',\n                            '(keydown)': 'interaction.next($event)',\n                            // We need to remove this explicitly, because it gets inherited from MatChipTrailingIcon.\n                            '[attr.aria-hidden]': 'null',\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        MatChipRemove.ctorParameters = function () { return [\n            { type: core.ElementRef }\n        ]; };\n        return MatChipRemove;\n    }(_MatChipRemoveMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var uid = 0;\n    /** Configuration for the ripple animation. */\n    var RIPPLE_ANIMATION_CONFIG = {\n        enterDuration: ripple.numbers.DEACTIVATION_TIMEOUT_MS,\n        exitDuration: ripple.numbers.FG_DEACTIVATION_MS\n    };\n    /**\n     * Directive to add MDC CSS to non-basic chips.\n     * @docs-private\n     */\n    var MatChipCssInternalOnly = /** @class */ (function () {\n        function MatChipCssInternalOnly() {\n        }\n        MatChipCssInternalOnly.decorators = [\n            { type: core.Directive, args: [{\n                        selector: \"mat-chip, mat-chip-option, mat-chip-row, [mat-chip], [mat-chip-option],\\n    [mat-chip-row]\",\n                        host: { 'class': 'mat-mdc-chip mdc-chip' }\n                    },] }\n        ];\n        return MatChipCssInternalOnly;\n    }());\n    /**\n     * Boilerplate for applying mixins to MatChip.\n     * @docs-private\n     */\n    var MatChipBase = /** @class */ (function () {\n        function MatChipBase(_elementRef) {\n            this._elementRef = _elementRef;\n        }\n        return MatChipBase;\n    }());\n    var _MatChipMixinBase = core$1.mixinTabIndex(core$1.mixinColor(core$1.mixinDisableRipple(MatChipBase), 'primary'), -1);\n    /**\n     * Material design styled Chip base component. Used inside the MatChipSet component.\n     *\n     * Extended by MatChipOption and MatChipRow for different interaction patterns.\n     */\n    var MatChip = /** @class */ (function (_super) {\n        __extends(MatChip, _super);\n        function MatChip(_changeDetectorRef, _elementRef, _ngZone, _dir, \n        // @breaking-change 8.0.0 `animationMode` parameter to become required.\n        animationMode) {\n            var _this = _super.call(this, _elementRef) || this;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._elementRef = _elementRef;\n            _this._ngZone = _ngZone;\n            _this._dir = _dir;\n            /** The ripple animation configuration to use for the chip. */\n            _this._rippleAnimation = RIPPLE_ANIMATION_CONFIG;\n            /** Whether the ripple is centered on the chip. */\n            _this._isRippleCentered = false;\n            /** Emits when the chip is focused. */\n            _this._onFocus = new rxjs.Subject();\n            /** Emits when the chip is blurred. */\n            _this._onBlur = new rxjs.Subject();\n            _this.HANDLED_KEYS = [];\n            /** Whether the chip has focus. */\n            _this._hasFocusInternal = false;\n            /** Default unique id for the chip. */\n            _this._uniqueId = \"mat-mdc-chip-\" + uid++;\n            /** A unique id for the chip. If none is supplied, it will be auto-generated. */\n            _this.id = _this._uniqueId;\n            _this._disabled = false;\n            _this._removable = true;\n            _this._highlighted = false;\n            /** Emitted when the user interacts with the remove icon. */\n            _this.removeIconInteraction = new core.EventEmitter();\n            /** Emitted when the user interacts with the chip. */\n            _this.interaction = new core.EventEmitter();\n            /** Emitted when the chip is destroyed. */\n            _this.destroyed = new core.EventEmitter();\n            /** Emitted when a chip is to be removed. */\n            _this.removed = new core.EventEmitter();\n            /** The unstyled chip selector for this component. */\n            _this.basicChipAttrName = 'mat-basic-chip';\n            /** Subject that emits when the component has been destroyed. */\n            _this._destroyed = new rxjs.Subject();\n            /**\n             * Implementation of the MDC chip adapter interface.\n             * These methods are called by the chip foundation.\n             */\n            _this._chipAdapter = {\n                addClass: function (className) { return _this._setMdcClass(className, true); },\n                removeClass: function (className) { return _this._setMdcClass(className, false); },\n                hasClass: function (className) { return _this._elementRef.nativeElement.classList.contains(className); },\n                addClassToLeadingIcon: function (className) { return _this.leadingIcon.setClass(className, true); },\n                removeClassFromLeadingIcon: function (className) { return _this.leadingIcon.setClass(className, false); },\n                eventTargetHasClass: function (target, className) {\n                    // We need to null check the `classList`, because IE and Edge don't support it on SVG elements\n                    // and Edge seems to throw for ripple elements, because they're outside the DOM.\n                    return (target && target.classList) ?\n                        target.classList.contains(className) : false;\n                },\n                notifyInteraction: function () { return _this.interaction.emit(_this.id); },\n                notifySelection: function () {\n                    // No-op. We call dispatchSelectionEvent ourselves in MatChipOption, because we want to\n                    // specify whether selection occurred via user input.\n                },\n                notifyNavigation: function () {\n                    // TODO: This is a new feature added by MDC; consider exposing this event to users in the\n                    // future.\n                },\n                notifyTrailingIconInteraction: function () { return _this.removeIconInteraction.emit(_this.id); },\n                notifyRemoval: function () {\n                    _this.removed.emit({ chip: _this });\n                    // When MDC removes a chip it just transitions it to `width: 0px` which means that it's still\n                    // in the DOM and it's still focusable. Make it `display: none` so users can't tab into it.\n                    _this._elementRef.nativeElement.style.display = 'none';\n                },\n                getComputedStyleValue: function (propertyName) {\n                    // This function is run when a chip is removed so it might be\n                    // invoked during server-side rendering. Add some extra checks just in case.\n                    if (typeof window !== 'undefined' && window) {\n                        var getComputedStyle_1 = window.getComputedStyle(_this._elementRef.nativeElement);\n                        return getComputedStyle_1.getPropertyValue(propertyName);\n                    }\n                    return '';\n                },\n                setStyleProperty: function (propertyName, value) {\n                    _this._elementRef.nativeElement.style.setProperty(propertyName, value);\n                },\n                hasLeadingIcon: function () { return !!_this.leadingIcon; },\n                hasTrailingAction: function () { return !!_this.trailingIcon; },\n                isRTL: function () { return !!_this._dir && _this._dir.value === 'rtl'; },\n                focusPrimaryAction: function () {\n                    // Angular Material MDC chips fully manage focus. TODO: Managing focus and handling keyboard\n                    // events was added by MDC after our implementation; consider consolidating.\n                },\n                focusTrailingAction: function () { },\n                setTrailingActionAttr: function (attr, value) {\n                    return _this.trailingIcon && _this.trailingIcon.setAttribute(attr, value);\n                },\n                setPrimaryActionAttr: function (name, value) {\n                    // MDC is currently using this method to set aria-checked on choice and filter chips,\n                    // which in the MDC templates have role=\"checkbox\" and role=\"radio\" respectively.\n                    // We have role=\"option\" on those chips instead, so we do not want aria-checked.\n                    // Since we also manage the tabindex ourselves, we don't allow MDC to set it.\n                    if (name === 'aria-checked' || name === 'tabindex') {\n                        return;\n                    }\n                    _this._elementRef.nativeElement.setAttribute(name, value);\n                },\n                // The 2 functions below are used by the MDC ripple, which we aren't using,\n                // so they will never be called\n                getRootBoundingClientRect: function () { return _this._elementRef.nativeElement.getBoundingClientRect(); },\n                getCheckmarkBoundingClientRect: function () { return null; },\n                getAttribute: function (attr) { return _this._elementRef.nativeElement.getAttribute(attr); },\n            };\n            _this._chipFoundation = new chips.MDCChipFoundation(_this._chipAdapter);\n            _this._animationsDisabled = animationMode === 'NoopAnimations';\n            _this._isBasicChip = _elementRef.nativeElement.hasAttribute(_this.basicChipAttrName) ||\n                _elementRef.nativeElement.tagName.toLowerCase() === _this.basicChipAttrName;\n            return _this;\n        }\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(mmalerba): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        MatChip.prototype._handleTransitionEnd = function (event) {\n            this._chipFoundation.handleTransitionEnd(event);\n        };\n        Object.defineProperty(MatChip.prototype, \"_hasFocus\", {\n            get: function () {\n                return this._hasFocusInternal;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChip.prototype, \"disabled\", {\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                if (this.removeIcon) {\n                    this.removeIcon.disabled = value;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChip.prototype, \"value\", {\n            /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n            get: function () {\n                return this._value !== undefined\n                    ? this._value\n                    : this._elementRef.nativeElement.textContent;\n            },\n            set: function (value) { this._value = value; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChip.prototype, \"removable\", {\n            /**\n             * Determines whether or not the chip displays the remove styling and emits (removed) events.\n             */\n            get: function () { return this._removable; },\n            set: function (value) {\n                this._removable = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChip.prototype, \"highlighted\", {\n            /**\n             * Colors the chip for emphasis as if it were selected.\n             */\n            get: function () { return this._highlighted; },\n            set: function (value) {\n                this._highlighted = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatChip.prototype.ngAfterContentInit = function () {\n            this._initRemoveIcon();\n        };\n        MatChip.prototype.ngAfterViewInit = function () {\n            this._chipFoundation.init();\n        };\n        MatChip.prototype.ngOnDestroy = function () {\n            this.destroyed.emit({ chip: this });\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._chipFoundation.destroy();\n        };\n        /** Sets up the remove icon chip foundation, and subscribes to remove icon events. */\n        MatChip.prototype._initRemoveIcon = function () {\n            if (this.removeIcon) {\n                this._chipFoundation.setShouldRemoveOnTrailingIconClick(true);\n                this._listenToRemoveIconInteraction();\n                this.removeIcon.disabled = this.disabled;\n            }\n        };\n        /** Handles interaction with the remove icon. */\n        MatChip.prototype._listenToRemoveIconInteraction = function () {\n            var _this = this;\n            this.removeIcon.interaction\n                .pipe(operators.takeUntil(this._destroyed))\n                .subscribe(function (event) {\n                // The MDC chip foundation calls stopPropagation() for any trailing icon interaction\n                // event, even ones it doesn't handle, so we want to avoid passing it keyboard events\n                // for which we have a custom handler. Note that we assert the type of the event using\n                // the `type`, because `instanceof KeyboardEvent` can throw during server-side rendering.\n                var isKeyboardEvent = event.type.startsWith('key');\n                if (_this.disabled || (isKeyboardEvent &&\n                    _this.HANDLED_KEYS.indexOf(event.keyCode) !== -1)) {\n                    return;\n                }\n                _this._chipFoundation.handleTrailingIconInteraction(event);\n                if (isKeyboardEvent && !keycodes.hasModifierKey(event)) {\n                    var keyCode = event.keyCode;\n                    // Prevent default space and enter presses so we don't scroll the page or submit forms.\n                    if (keyCode === keycodes.SPACE || keyCode === keycodes.ENTER) {\n                        event.preventDefault();\n                    }\n                }\n            });\n        };\n        /**\n         * Allows for programmatic removal of the chip.\n         *\n         * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n         */\n        MatChip.prototype.remove = function () {\n            if (this.removable) {\n                this._chipFoundation.beginExit();\n            }\n        };\n        /** Sets whether the given CSS class should be applied to the MDC chip. */\n        MatChip.prototype._setMdcClass = function (cssClass, active) {\n            var classes = this._elementRef.nativeElement.classList;\n            active ? classes.add(cssClass) : classes.remove(cssClass);\n            this._changeDetectorRef.markForCheck();\n        };\n        /** Forwards interaction events to the MDC chip foundation. */\n        MatChip.prototype._handleInteraction = function (event) {\n            if (!this.disabled) {\n                this._chipFoundation.handleInteraction(event);\n            }\n        };\n        /** Whether or not the ripple should be disabled. */\n        MatChip.prototype._isRippleDisabled = function () {\n            return this.disabled || this.disableRipple || this._isBasicChip;\n        };\n        MatChip.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-basic-chip, mat-chip',\n                        inputs: ['color', 'disableRipple'],\n                        exportAs: 'matChip',\n                        template: \"<span class=\\\"mdc-chip__ripple\\\"></span>\\n\\n<span matRipple class=\\\"mat-mdc-chip-ripple\\\"\\n     [matRippleAnimation]=\\\"_rippleAnimation\\\"\\n     [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n     [matRippleCentered]=\\\"_isRippleCentered\\\"\\n     [matRippleTrigger]=\\\"_elementRef.nativeElement\\\"></span>\\n\\n<ng-content select=\\\"mat-chip-avatar, [matChipAvatar]\\\"></ng-content>\\n<div class=\\\"mdc-chip__primary-action\\\">\\n  <div class=\\\"mdc-chip__text\\\"><ng-content></ng-content></div>\\n</div>\\n<ng-content select=\\\"mat-chip-trailing-icon,[matChipRemove],[matChipTrailingIcon]\\\"></ng-content>\\n\",\n                        host: {\n                            '[class.mat-mdc-chip-disabled]': 'disabled',\n                            '[class.mat-mdc-chip-highlighted]': 'highlighted',\n                            '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n                            '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                            '[class.mat-mdc-basic-chip]': '_isBasicChip',\n                            '[class.mat-mdc-standard-chip]': '!_isBasicChip',\n                            '[class._mat-animation-noopable]': '_animationsDisabled',\n                            '[id]': 'id',\n                            '[attr.disabled]': 'disabled || null',\n                            '[attr.aria-disabled]': 'disabled.toString()',\n                        },\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        styles: [\".mdc-chip__icon.mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){width:20px;height:20px;font-size:20px}.mdc-chip__icon.mdc-chip__icon--trailing{width:18px;height:18px;font-size:18px}.mdc-chip__icon--trailing{margin-left:4px;margin-right:-4px}[dir=rtl] .mdc-chip__icon--trailing,.mdc-chip__icon--trailing[dir=rtl]{margin-left:-4px;margin-right:4px}.mdc-touch-target-wrapper{display:inline}.mdc-elevation-overlay{position:absolute;border-radius:inherit;opacity:0;pointer-events:none;transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip{border-radius:16px;height:32px;position:relative;display:inline-flex;align-items:center;box-sizing:border-box;padding:0 12px;border-width:0;outline:none;cursor:pointer;-webkit-appearance:none}.mdc-chip .mdc-chip__ripple{border-radius:16px}.mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){margin-left:-4px;margin-right:4px}[dir=rtl] .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip.mdc-chip--selected .mdc-chip__checkmark[dir=rtl],[dir=rtl] .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden),.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden)[dir=rtl]{margin-left:4px;margin-right:-4px}.mdc-chip .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-chip::-moz-focus-inner{padding:0;border:0}.mdc-chip .mdc-chip__touch{position:absolute;top:50%;right:0;height:48px;left:0;transform:translateY(-50%)}.mdc-chip--exit{opacity:0}.mdc-chip__text{white-space:nowrap}.mdc-chip__icon{border-radius:50%;outline:none;vertical-align:middle}.mdc-chip__checkmark{height:20px}.mdc-chip__checkmark-path{transition:stroke-dashoffset 150ms 50ms cubic-bezier(0.4, 0, 0.6, 1);stroke-width:2px;stroke-dashoffset:29.7833385;stroke-dasharray:29.7833385}.mdc-chip__primary-action:focus{outline:none}.mdc-chip--selected .mdc-chip__checkmark-path{stroke-dashoffset:0}.mdc-chip__icon--leading,.mdc-chip__icon--trailing{position:relative}.mdc-chip__checkmark-svg{width:0;height:20px;transition:width 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip--selected .mdc-chip__checkmark-svg{width:20px}.mdc-chip-set--filter .mdc-chip__icon--leading{transition:opacity 75ms linear;transition-delay:-50ms;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark{transition:opacity 75ms linear;transition-delay:80ms;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark .mdc-chip__checkmark-svg{transition:width 0ms}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading{opacity:0}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading+.mdc-chip__checkmark{width:0;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading{width:0;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading+.mdc-chip__checkmark{width:20px}@keyframes mdc-chip-entry{from{transform:scale(0.8);opacity:.4}to{transform:scale(1);opacity:1}}.mdc-chip-set{padding:4px;display:flex;flex-wrap:wrap;box-sizing:border-box}.mdc-chip-set .mdc-chip{margin:4px}.mdc-chip-set .mdc-chip--touch{margin-top:8px;margin-bottom:8px}.mdc-chip-set--input .mdc-chip{animation:mdc-chip-entry 100ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-chip{cursor:default}.mat-mdc-chip._mat-animation-noopable{transition-duration:1ms}.cdk-high-contrast-active .mat-mdc-chip{outline:solid 1px}.cdk-high-contrast-active .mat-mdc-chip:focus{outline:dotted 2px}.mat-mdc-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mdc-chip__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}.mdc-chip__ripple::after,.mdc-chip__ripple::before{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";pointer-events:none;opacity:0;border-radius:inherit}.mat-mdc-chip-disabled.mat-mdc-chip{opacity:.4}.mat-mdc-chip-disabled.mat-mdc-chip .mat-mdc-chip-trailing-icon,.mat-mdc-chip-disabled.mat-mdc-chip .mat-chip-row-focusable-text-content{pointer-events:none}.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::after,.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::before{display:none}.mat-mdc-chip-set-stacked{flex-direction:column;align-items:flex-start}.mat-mdc-chip-set-stacked .mat-mdc-chip{width:100%}input.mat-mdc-chip-input{flex:1 0 150px}.cdk-high-contrast-black-on-white .mdc-chip__checkmark-path{stroke:#000 !important}.mat-chip-row-focusable-text-content{position:relative}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatChip.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef },\n            { type: core.ElementRef },\n            { type: core.NgZone },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },\n            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations.ANIMATION_MODULE_TYPE,] }] }\n        ]; };\n        MatChip.propDecorators = {\n            _handleTransitionEnd: [{ type: core.HostListener, args: ['transitionend', ['$event'],] }],\n            id: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            removable: [{ type: core.Input }],\n            highlighted: [{ type: core.Input }],\n            removeIconInteraction: [{ type: core.Output }],\n            interaction: [{ type: core.Output }],\n            destroyed: [{ type: core.Output }],\n            removed: [{ type: core.Output }],\n            leadingIcon: [{ type: core.ContentChild, args: [MatChipAvatar,] }],\n            trailingIcon: [{ type: core.ContentChild, args: [MatChipTrailingIcon,] }],\n            removeIcon: [{ type: core.ContentChild, args: [MatChipRemove,] }],\n            ripple: [{ type: core.ViewChild, args: [core$1.MatRipple,] }]\n        };\n        return MatChip;\n    }(_MatChipMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Event object emitted by MatChipOption when selected or deselected. */\n    var MatChipSelectionChange = /** @class */ (function () {\n        function MatChipSelectionChange(\n        /** Reference to the chip that emitted the event. */\n        source, \n        /** Whether the chip that emitted the event is selected. */\n        selected, \n        /** Whether the selection change was a result of a user interaction. */\n        isUserInput) {\n            if (isUserInput === void 0) { isUserInput = false; }\n            this.source = source;\n            this.selected = selected;\n            this.isUserInput = isUserInput;\n        }\n        return MatChipSelectionChange;\n    }());\n    /**\n     * An extension of the MatChip component that supports chip selection.\n     * Used with MatChipListbox.\n     */\n    var MatChipOption = /** @class */ (function (_super) {\n        __extends(MatChipOption, _super);\n        function MatChipOption() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            /** Whether the chip list is selectable. */\n            _this.chipListSelectable = true;\n            /** Whether the chip list is in multi-selection mode. */\n            _this._chipListMultiple = false;\n            _this._selectable = true;\n            /** The unstyled chip selector for this component. */\n            _this.basicChipAttrName = 'mat-basic-chip-option';\n            /** Emitted when the chip is selected or deselected. */\n            _this.selectionChange = new core.EventEmitter();\n            return _this;\n        }\n        Object.defineProperty(MatChipOption.prototype, \"selectable\", {\n            /**\n             * Whether or not the chip is selectable.\n             *\n             * When a chip is not selectable, changes to its selected state are always\n             * ignored. By default an option chip is selectable, and it becomes\n             * non-selectable if its parent chip list is not selectable.\n             */\n            get: function () {\n                return this._selectable && this.chipListSelectable;\n            },\n            set: function (value) {\n                this._selectable = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipOption.prototype, \"selected\", {\n            /** Whether the chip is selected. */\n            get: function () {\n                return this._chipFoundation.isSelected();\n            },\n            set: function (value) {\n                if (!this.selectable) {\n                    return;\n                }\n                var coercedValue = coercion.coerceBooleanProperty(value);\n                if (coercedValue != this._chipFoundation.isSelected()) {\n                    this._chipFoundation.setSelected(coercion.coerceBooleanProperty(value));\n                    this._dispatchSelectionChange();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipOption.prototype, \"ariaSelected\", {\n            /** The ARIA selected applied to the chip. */\n            get: function () {\n                // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n                // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n                return this.selectable && (this._chipListMultiple || this.selected) ?\n                    this.selected.toString() : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatChipOption.prototype.ngAfterContentInit = function () {\n            _super.prototype.ngAfterContentInit.call(this);\n            if (this.selected && this.leadingIcon) {\n                this.leadingIcon.setClass(chips.chipCssClasses.HIDDEN_LEADING_ICON, true);\n            }\n        };\n        /** Selects the chip. */\n        MatChipOption.prototype.select = function () {\n            if (!this.selectable) {\n                return;\n            }\n            else if (!this.selected) {\n                this._chipFoundation.setSelected(true);\n                this._dispatchSelectionChange();\n            }\n        };\n        /** Deselects the chip. */\n        MatChipOption.prototype.deselect = function () {\n            if (!this.selectable) {\n                return;\n            }\n            else if (this.selected) {\n                this._chipFoundation.setSelected(false);\n                this._dispatchSelectionChange();\n            }\n        };\n        /** Selects this chip and emits userInputSelection event */\n        MatChipOption.prototype.selectViaInteraction = function () {\n            if (!this.selectable) {\n                return;\n            }\n            else if (!this.selected) {\n                this._chipFoundation.setSelected(true);\n                this._dispatchSelectionChange(true);\n            }\n        };\n        /** Toggles the current selected state of this chip. */\n        MatChipOption.prototype.toggleSelected = function (isUserInput) {\n            if (isUserInput === void 0) { isUserInput = false; }\n            if (!this.selectable) {\n                return this.selected;\n            }\n            this._chipFoundation.setSelected(!this.selected);\n            this._dispatchSelectionChange(isUserInput);\n            return this.selected;\n        };\n        /** Emits a selection change event. */\n        MatChipOption.prototype._dispatchSelectionChange = function (isUserInput) {\n            if (isUserInput === void 0) { isUserInput = false; }\n            this.selectionChange.emit({\n                source: this,\n                isUserInput: isUserInput,\n                selected: this.selected\n            });\n        };\n        /** Allows for programmatic focusing of the chip. */\n        MatChipOption.prototype.focus = function () {\n            if (this.disabled) {\n                return;\n            }\n            if (!this._hasFocus) {\n                this._elementRef.nativeElement.focus();\n                this._onFocus.next({ chip: this });\n            }\n            this._hasFocusInternal = true;\n        };\n        /** Resets the state of the chip when it loses focus. */\n        MatChipOption.prototype._blur = function () {\n            var _this = this;\n            // When animations are enabled, Angular may end up removing the chip from the DOM a little\n            // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n            // that moves focus not the next item. To work around the issue, we defer marking the chip\n            // as not focused until the next time the zone stabilizes.\n            this._ngZone.onStable\n                .asObservable()\n                .pipe(operators.take(1))\n                .subscribe(function () {\n                _this._ngZone.run(function () {\n                    _this._hasFocusInternal = false;\n                    _this._onBlur.next({ chip: _this });\n                });\n            });\n        };\n        /** Handles click events on the chip. */\n        MatChipOption.prototype._click = function (event) {\n            if (this.disabled) {\n                event.preventDefault();\n            }\n            else {\n                this._handleInteraction(event);\n                event.stopPropagation();\n            }\n        };\n        /** Handles custom key presses. */\n        MatChipOption.prototype._keydown = function (event) {\n            if (this.disabled) {\n                return;\n            }\n            switch (event.keyCode) {\n                case keycodes.SPACE:\n                    this.toggleSelected(true);\n                    // Always prevent space from scrolling the page since the list has focus\n                    event.preventDefault();\n                    break;\n                default:\n                    this._handleInteraction(event);\n            }\n        };\n        MatChipOption.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-basic-chip-option, mat-chip-option',\n                        template: \"<span class=\\\"mdc-chip__ripple\\\"></span>\\n\\n<span matRipple class=\\\"mat-mdc-chip-ripple\\\"\\n     [matRippleAnimation]=\\\"_rippleAnimation\\\"\\n     [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n     [matRippleCentered]=\\\"_isRippleCentered\\\"\\n     [matRippleTrigger]=\\\"_elementRef.nativeElement\\\"></span>\\n\\n<ng-content select=\\\"mat-chip-avatar, [matChipAvatar]\\\"></ng-content>\\n<div class=\\\"mdc-chip__checkmark\\\" *ngIf=\\\"_chipListMultiple\\\">\\n  <svg class=\\\"mdc-chip__checkmark-svg\\\" viewBox=\\\"-2 -3 30 30\\\" focusable=\\\"false\\\">\\n    <path class=\\\"mdc-chip__checkmark-path\\\" fill=\\\"none\\\" stroke=\\\"black\\\"\\n          d=\\\"M1.73,12.91 8.1,19.28 22.79,4.59\\\"/>\\n  </svg>\\n</div>\\n<div class=\\\"mdc-chip__text\\\"><ng-content></ng-content></div>\\n<ng-content select=\\\"mat-chip-trailing-icon,[matChipRemove],[matChipTrailingIcon]\\\"></ng-content>\\n\",\n                        inputs: ['color', 'disableRipple', 'tabIndex'],\n                        host: {\n                            'role': 'option',\n                            'class': 'mat-mdc-focus-indicator',\n                            '[class.mat-mdc-chip-disabled]': 'disabled',\n                            '[class.mat-mdc-chip-highlighted]': 'highlighted',\n                            '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n                            '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                            '[class.mat-mdc-chip-selected]': 'selected',\n                            '[id]': 'id',\n                            '[tabIndex]': 'tabIndex',\n                            '[attr.disabled]': 'disabled || null',\n                            '[attr.aria-disabled]': 'disabled.toString()',\n                            '[attr.aria-selected]': 'ariaSelected',\n                            '(click)': '_click($event)',\n                            '(keydown)': '_keydown($event)',\n                            '(focus)': 'focus()',\n                            '(blur)': '_blur()',\n                        },\n                        providers: [{ provide: MatChip, useExisting: MatChipOption }],\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        styles: [\".mdc-chip__icon.mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){width:20px;height:20px;font-size:20px}.mdc-chip__icon.mdc-chip__icon--trailing{width:18px;height:18px;font-size:18px}.mdc-chip__icon--trailing{margin-left:4px;margin-right:-4px}[dir=rtl] .mdc-chip__icon--trailing,.mdc-chip__icon--trailing[dir=rtl]{margin-left:-4px;margin-right:4px}.mdc-touch-target-wrapper{display:inline}.mdc-elevation-overlay{position:absolute;border-radius:inherit;opacity:0;pointer-events:none;transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip{border-radius:16px;height:32px;position:relative;display:inline-flex;align-items:center;box-sizing:border-box;padding:0 12px;border-width:0;outline:none;cursor:pointer;-webkit-appearance:none}.mdc-chip .mdc-chip__ripple{border-radius:16px}.mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){margin-left:-4px;margin-right:4px}[dir=rtl] .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip.mdc-chip--selected .mdc-chip__checkmark[dir=rtl],[dir=rtl] .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden),.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden)[dir=rtl]{margin-left:4px;margin-right:-4px}.mdc-chip .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-chip::-moz-focus-inner{padding:0;border:0}.mdc-chip .mdc-chip__touch{position:absolute;top:50%;right:0;height:48px;left:0;transform:translateY(-50%)}.mdc-chip--exit{opacity:0}.mdc-chip__text{white-space:nowrap}.mdc-chip__icon{border-radius:50%;outline:none;vertical-align:middle}.mdc-chip__checkmark{height:20px}.mdc-chip__checkmark-path{transition:stroke-dashoffset 150ms 50ms cubic-bezier(0.4, 0, 0.6, 1);stroke-width:2px;stroke-dashoffset:29.7833385;stroke-dasharray:29.7833385}.mdc-chip__primary-action:focus{outline:none}.mdc-chip--selected .mdc-chip__checkmark-path{stroke-dashoffset:0}.mdc-chip__icon--leading,.mdc-chip__icon--trailing{position:relative}.mdc-chip__checkmark-svg{width:0;height:20px;transition:width 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip--selected .mdc-chip__checkmark-svg{width:20px}.mdc-chip-set--filter .mdc-chip__icon--leading{transition:opacity 75ms linear;transition-delay:-50ms;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark{transition:opacity 75ms linear;transition-delay:80ms;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark .mdc-chip__checkmark-svg{transition:width 0ms}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading{opacity:0}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading+.mdc-chip__checkmark{width:0;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading{width:0;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading+.mdc-chip__checkmark{width:20px}@keyframes mdc-chip-entry{from{transform:scale(0.8);opacity:.4}to{transform:scale(1);opacity:1}}.mdc-chip-set{padding:4px;display:flex;flex-wrap:wrap;box-sizing:border-box}.mdc-chip-set .mdc-chip{margin:4px}.mdc-chip-set .mdc-chip--touch{margin-top:8px;margin-bottom:8px}.mdc-chip-set--input .mdc-chip{animation:mdc-chip-entry 100ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-chip{cursor:default}.mat-mdc-chip._mat-animation-noopable{transition-duration:1ms}.cdk-high-contrast-active .mat-mdc-chip{outline:solid 1px}.cdk-high-contrast-active .mat-mdc-chip:focus{outline:dotted 2px}.mat-mdc-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mdc-chip__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}.mdc-chip__ripple::after,.mdc-chip__ripple::before{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";pointer-events:none;opacity:0;border-radius:inherit}.mat-mdc-chip-disabled.mat-mdc-chip{opacity:.4}.mat-mdc-chip-disabled.mat-mdc-chip .mat-mdc-chip-trailing-icon,.mat-mdc-chip-disabled.mat-mdc-chip .mat-chip-row-focusable-text-content{pointer-events:none}.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::after,.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::before{display:none}.mat-mdc-chip-set-stacked{flex-direction:column;align-items:flex-start}.mat-mdc-chip-set-stacked .mat-mdc-chip{width:100%}input.mat-mdc-chip-input{flex:1 0 150px}.cdk-high-contrast-black-on-white .mdc-chip__checkmark-path{stroke:#000 !important}.mat-chip-row-focusable-text-content{position:relative}\\n\"]\n                    }] }\n        ];\n        MatChipOption.propDecorators = {\n            selectable: [{ type: core.Input }],\n            selected: [{ type: core.Input }],\n            selectionChange: [{ type: core.Output }]\n        };\n        return MatChipOption;\n    }(MatChip));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** The keys handled by the GridKeyManager keydown method. */\n    var NAVIGATION_KEYS = [keycodes.DOWN_ARROW, keycodes.UP_ARROW, keycodes.RIGHT_ARROW, keycodes.LEFT_ARROW];\n    /**\n     * This class manages keyboard events for grids. If you pass it a query list\n     * of GridKeyManagerRow, it will set the active cell correctly when arrow events occur.\n     *\n     * GridKeyManager expects that rows may change dynamically, but the cells for a given row are\n     * static. It also expects that all rows have the same number of cells.\n     */\n    var GridKeyManager = /** @class */ (function () {\n        function GridKeyManager(_rows) {\n            var _this = this;\n            this._rows = _rows;\n            this._activeRowIndex = -1;\n            this._activeColumnIndex = -1;\n            this._activeRow = null;\n            this._activeCell = null;\n            this._dir = 'ltr';\n            /** Stream that emits whenever the active cell of the grid manager changes. */\n            this.change = new rxjs.Subject();\n            // We allow for the rows to be an array because, in some cases, the consumer may\n            // not have access to a QueryList of the rows they want to manage (e.g. when the\n            // rows aren't being collected via `ViewChildren` or `ContentChildren`).\n            if (_rows instanceof core.QueryList) {\n                _rows.changes.subscribe(function (newRows) {\n                    if (_this._activeRow) {\n                        var newIndex = newRows.toArray().indexOf(_this._activeRow);\n                        if (newIndex > -1 && newIndex !== _this._activeRowIndex) {\n                            _this._activeRowIndex = newIndex;\n                        }\n                    }\n                });\n            }\n        }\n        /**\n         * Configures the directionality of the key manager's horizontal movement.\n         * @param direction Direction which is considered forward movement across a row.\n         *\n         * If withDirectionality is not set, the default is 'ltr'.\n         */\n        GridKeyManager.prototype.withDirectionality = function (direction) {\n            this._dir = direction;\n            return this;\n        };\n        GridKeyManager.prototype.setActiveCell = function (cell) {\n            var previousRowIndex = this._activeRowIndex;\n            var previousColumnIndex = this._activeColumnIndex;\n            this.updateActiveCell(cell);\n            if (this._activeRowIndex !== previousRowIndex ||\n                this._activeColumnIndex !== previousColumnIndex) {\n                this.change.next({ row: this._activeRowIndex, column: this._activeColumnIndex });\n            }\n        };\n        /**\n         * Sets the active cell depending on the key event passed in.\n         * @param event Keyboard event to be used for determining which element should be active.\n         */\n        GridKeyManager.prototype.onKeydown = function (event) {\n            var keyCode = event.keyCode;\n            switch (keyCode) {\n                case keycodes.DOWN_ARROW:\n                    this.setNextRowActive();\n                    break;\n                case keycodes.UP_ARROW:\n                    this.setPreviousRowActive();\n                    break;\n                case keycodes.RIGHT_ARROW:\n                    this._dir === 'rtl' ? this.setPreviousColumnActive() : this.setNextColumnActive();\n                    break;\n                case keycodes.LEFT_ARROW:\n                    this._dir === 'rtl' ? this.setNextColumnActive() : this.setPreviousColumnActive();\n                    break;\n                default:\n                    // Note that we return here, in order to avoid preventing\n                    // the default action of non-navigational keys.\n                    return;\n            }\n            event.preventDefault();\n        };\n        Object.defineProperty(GridKeyManager.prototype, \"activeRowIndex\", {\n            /** Index of the currently active row. */\n            get: function () {\n                return this._activeRowIndex;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GridKeyManager.prototype, \"activeColumnIndex\", {\n            /** Index of the currently active column. */\n            get: function () {\n                return this._activeColumnIndex;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GridKeyManager.prototype, \"activeCell\", {\n            /** The active cell. */\n            get: function () {\n                return this._activeCell;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Sets the active cell to the first cell in the grid. */\n        GridKeyManager.prototype.setFirstCellActive = function () {\n            this._setActiveCellByIndex(0, 0);\n        };\n        /** Sets the active cell to the last cell in the grid. */\n        GridKeyManager.prototype.setLastCellActive = function () {\n            var lastRowIndex = this._rows.length - 1;\n            var lastRow = this._getRowsArray()[lastRowIndex];\n            this._setActiveCellByIndex(lastRowIndex, lastRow.cells.length - 1);\n        };\n        /** Sets the active row to the next row in the grid. Active column is unchanged. */\n        GridKeyManager.prototype.setNextRowActive = function () {\n            this._activeRowIndex < 0 ? this.setFirstCellActive() : this._setActiveCellByDelta(1, 0);\n        };\n        /** Sets the active row to the previous row in the grid. Active column is unchanged. */\n        GridKeyManager.prototype.setPreviousRowActive = function () {\n            this._setActiveCellByDelta(-1, 0);\n        };\n        /**\n         * Sets the active column to the next column in the grid.\n         * Active row is unchanged, unless we reach the end of a row.\n         */\n        GridKeyManager.prototype.setNextColumnActive = function () {\n            this._activeRowIndex < 0 ? this.setFirstCellActive() : this._setActiveCellByDelta(0, 1);\n        };\n        /**\n         * Sets the active column to the previous column in the grid.\n         * Active row is unchanged, unless we reach the end of a row.\n         */\n        GridKeyManager.prototype.setPreviousColumnActive = function () {\n            this._setActiveCellByDelta(0, -1);\n        };\n        GridKeyManager.prototype.updateActiveCell = function (cell) {\n            var _this = this;\n            var rowArray = this._getRowsArray();\n            if (typeof cell === 'object' && typeof cell.row === 'number' &&\n                typeof cell.column === 'number') {\n                this._activeRowIndex = cell.row;\n                this._activeColumnIndex = cell.column;\n                this._activeRow = rowArray[cell.row] || null;\n                this._activeCell = this._activeRow ? this._activeRow.cells[cell.column] || null : null;\n            }\n            else {\n                rowArray.forEach(function (row, rowIndex) {\n                    var columnIndex = row.cells.indexOf(cell);\n                    if (columnIndex !== -1) {\n                        _this._activeRowIndex = rowIndex;\n                        _this._activeColumnIndex = columnIndex;\n                        _this._activeRow = row;\n                        _this._activeCell = row.cells[columnIndex];\n                    }\n                });\n            }\n        };\n        /**\n         * This method sets the active cell, given the row and columns deltas\n         * between the currently active cell and the new active cell.\n         */\n        GridKeyManager.prototype._setActiveCellByDelta = function (rowDelta, columnDelta) {\n            // If delta puts us past the last cell in a row, move to the first cell of the next row.\n            if (this._activeRow && this._activeColumnIndex + columnDelta >= this._activeRow.cells.length) {\n                this._setActiveCellByIndex(this._activeRowIndex + 1, 0);\n                // If delta puts us prior to the first cell in a row, move to the last cell of the previous row.\n            }\n            else if (this._activeColumnIndex + columnDelta < 0) {\n                var previousRowIndex = this._activeRowIndex - 1;\n                var previousRow = this._getRowsArray()[previousRowIndex];\n                if (previousRow) {\n                    this._setActiveCellByIndex(previousRowIndex, previousRow.cells.length - 1);\n                }\n            }\n            else {\n                this._setActiveCellByIndex(this._activeRowIndex + rowDelta, this._activeColumnIndex + columnDelta);\n            }\n        };\n        /**\n         * Sets the active cell to the cell at the indices specified, if they are valid.\n         */\n        GridKeyManager.prototype._setActiveCellByIndex = function (rowIndex, columnIndex) {\n            var rows = this._getRowsArray();\n            var targetRow = rows[rowIndex];\n            if (!targetRow || !targetRow.cells[columnIndex]) {\n                return;\n            }\n            this.setActiveCell({ row: rowIndex, column: columnIndex });\n        };\n        /** Returns the rows as an array. */\n        GridKeyManager.prototype._getRowsArray = function () {\n            return this._rows instanceof core.QueryList ? this._rows.toArray() : this._rows;\n        };\n        return GridKeyManager;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An extension of the MatChip component used with MatChipGrid and\n     * the matChipInputFor directive.\n     */\n    var MatChipRow = /** @class */ (function (_super) {\n        __extends(MatChipRow, _super);\n        function MatChipRow() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.basicChipAttrName = 'mat-basic-chip-row';\n            /** Key codes for which this component has a custom handler. */\n            _this.HANDLED_KEYS = NAVIGATION_KEYS.concat([keycodes.BACKSPACE, keycodes.DELETE]);\n            return _this;\n        }\n        MatChipRow.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            _super.prototype.ngAfterContentInit.call(this);\n            if (this.removeIcon) {\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                setTimeout(function () {\n                    // removeIcon has tabIndex 0 for regular chips, but should only be focusable by\n                    // the GridFocusKeyManager for row chips.\n                    _this.removeIcon.tabIndex = -1;\n                });\n            }\n        };\n        MatChipRow.prototype.ngAfterViewInit = function () {\n            _super.prototype.ngAfterViewInit.call(this);\n            this.cells = this.removeIcon ?\n                [this.chipContent.nativeElement, this.removeIcon._elementRef.nativeElement] :\n                [this.chipContent.nativeElement];\n        };\n        /**\n         * Allows for programmatic focusing of the chip.\n         * Sends focus to the first grid cell. The row chip element itself\n         * is never focused.\n         */\n        MatChipRow.prototype.focus = function () {\n            if (this.disabled) {\n                return;\n            }\n            if (!this._hasFocusInternal) {\n                this._onFocus.next({ chip: this });\n            }\n            this.chipContent.nativeElement.focus();\n        };\n        /**\n         * Emits a blur event when one of the gridcells loses focus, unless focus moved\n         * to the other gridcell.\n         */\n        MatChipRow.prototype._focusout = function () {\n            var _this = this;\n            this._hasFocusInternal = false;\n            // Wait to see if focus moves to the other gridcell\n            setTimeout(function () {\n                if (_this._hasFocus) {\n                    return;\n                }\n                _this._onBlur.next({ chip: _this });\n            });\n        };\n        /** Records that the chip has focus when one of the gridcells is focused. */\n        MatChipRow.prototype._focusin = function () {\n            this._hasFocusInternal = true;\n        };\n        /** Sends focus to the first gridcell when the user clicks anywhere inside the chip. */\n        MatChipRow.prototype._mousedown = function (event) {\n            if (!this.disabled) {\n                this.focus();\n            }\n            event.preventDefault();\n        };\n        /** Handles custom key presses. */\n        MatChipRow.prototype._keydown = function (event) {\n            if (this.disabled) {\n                return;\n            }\n            switch (event.keyCode) {\n                case keycodes.DELETE:\n                case keycodes.BACKSPACE:\n                    // Remove the focused chip\n                    this.remove();\n                    // Always prevent so page navigation does not occur\n                    event.preventDefault();\n                    break;\n                default:\n                    this._handleInteraction(event);\n            }\n        };\n        MatChipRow.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-chip-row, mat-basic-chip-row',\n                        template: \"<span class=\\\"mdc-chip__ripple\\\"></span>\\n\\n<span matRipple class=\\\"mat-mdc-chip-ripple\\\"\\n     [matRippleAnimation]=\\\"_rippleAnimation\\\"\\n     [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n     [matRippleCentered]=\\\"_isRippleCentered\\\"\\n     [matRippleTrigger]=\\\"_elementRef.nativeElement\\\"></span>\\n\\n<div role=\\\"gridcell\\\">\\n  <div #chipContent tabindex=\\\"-1\\\"\\n       class=\\\"mat-chip-row-focusable-text-content mat-mdc-focus-indicator\\\">\\n  \\t <ng-content select=\\\"mat-chip-avatar, [matChipAvatar]\\\"></ng-content>\\n  \\t <span class=\\\"mdc-chip__text\\\"><ng-content></ng-content></span>\\n  \\t <ng-content select=\\\"mat-chip-trailing-icon,[matChipTrailingIcon]\\\"></ng-content>\\n  </div>\\n</div>\\n<div role=\\\"gridcell\\\" *ngIf=\\\"removeIcon\\\">\\n  <ng-content select=\\\"[matChipRemove]\\\"></ng-content>\\n</div>\\n\",\n                        inputs: ['color', 'disableRipple', 'tabIndex'],\n                        host: {\n                            'role': 'row',\n                            '[class.mat-mdc-chip-disabled]': 'disabled',\n                            '[class.mat-mdc-chip-highlighted]': 'highlighted',\n                            '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n                            '[class.mat-mdc-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                            '[id]': 'id',\n                            '[attr.disabled]': 'disabled || null',\n                            '[attr.aria-disabled]': 'disabled.toString()',\n                            '[tabIndex]': 'tabIndex',\n                            '(mousedown)': '_mousedown($event)',\n                            '(keydown)': '_keydown($event)',\n                            '(focusin)': '_focusin()',\n                            '(focusout)': '_focusout()'\n                        },\n                        providers: [{ provide: MatChip, useExisting: MatChipRow }],\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        styles: [\".mdc-chip__icon.mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){width:20px;height:20px;font-size:20px}.mdc-chip__icon.mdc-chip__icon--trailing{width:18px;height:18px;font-size:18px}.mdc-chip__icon--trailing{margin-left:4px;margin-right:-4px}[dir=rtl] .mdc-chip__icon--trailing,.mdc-chip__icon--trailing[dir=rtl]{margin-left:-4px;margin-right:4px}.mdc-touch-target-wrapper{display:inline}.mdc-elevation-overlay{position:absolute;border-radius:inherit;opacity:0;pointer-events:none;transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip{border-radius:16px;height:32px;position:relative;display:inline-flex;align-items:center;box-sizing:border-box;padding:0 12px;border-width:0;outline:none;cursor:pointer;-webkit-appearance:none}.mdc-chip .mdc-chip__ripple{border-radius:16px}.mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){margin-left:-4px;margin-right:4px}[dir=rtl] .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip.mdc-chip--selected .mdc-chip__checkmark[dir=rtl],[dir=rtl] .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden),.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden)[dir=rtl]{margin-left:4px;margin-right:-4px}.mdc-chip .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-chip::-moz-focus-inner{padding:0;border:0}.mdc-chip .mdc-chip__touch{position:absolute;top:50%;right:0;height:48px;left:0;transform:translateY(-50%)}.mdc-chip--exit{opacity:0}.mdc-chip__text{white-space:nowrap}.mdc-chip__icon{border-radius:50%;outline:none;vertical-align:middle}.mdc-chip__checkmark{height:20px}.mdc-chip__checkmark-path{transition:stroke-dashoffset 150ms 50ms cubic-bezier(0.4, 0, 0.6, 1);stroke-width:2px;stroke-dashoffset:29.7833385;stroke-dasharray:29.7833385}.mdc-chip__primary-action:focus{outline:none}.mdc-chip--selected .mdc-chip__checkmark-path{stroke-dashoffset:0}.mdc-chip__icon--leading,.mdc-chip__icon--trailing{position:relative}.mdc-chip__checkmark-svg{width:0;height:20px;transition:width 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip--selected .mdc-chip__checkmark-svg{width:20px}.mdc-chip-set--filter .mdc-chip__icon--leading{transition:opacity 75ms linear;transition-delay:-50ms;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark{transition:opacity 75ms linear;transition-delay:80ms;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark .mdc-chip__checkmark-svg{transition:width 0ms}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading{opacity:0}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading+.mdc-chip__checkmark{width:0;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading{width:0;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading+.mdc-chip__checkmark{width:20px}@keyframes mdc-chip-entry{from{transform:scale(0.8);opacity:.4}to{transform:scale(1);opacity:1}}.mdc-chip-set{padding:4px;display:flex;flex-wrap:wrap;box-sizing:border-box}.mdc-chip-set .mdc-chip{margin:4px}.mdc-chip-set .mdc-chip--touch{margin-top:8px;margin-bottom:8px}.mdc-chip-set--input .mdc-chip{animation:mdc-chip-entry 100ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-chip{cursor:default}.mat-mdc-chip._mat-animation-noopable{transition-duration:1ms}.cdk-high-contrast-active .mat-mdc-chip{outline:solid 1px}.cdk-high-contrast-active .mat-mdc-chip:focus{outline:dotted 2px}.mat-mdc-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mdc-chip__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}.mdc-chip__ripple::after,.mdc-chip__ripple::before{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";pointer-events:none;opacity:0;border-radius:inherit}.mat-mdc-chip-disabled.mat-mdc-chip{opacity:.4}.mat-mdc-chip-disabled.mat-mdc-chip .mat-mdc-chip-trailing-icon,.mat-mdc-chip-disabled.mat-mdc-chip .mat-chip-row-focusable-text-content{pointer-events:none}.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::after,.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::before{display:none}.mat-mdc-chip-set-stacked{flex-direction:column;align-items:flex-start}.mat-mdc-chip-set-stacked .mat-mdc-chip{width:100%}input.mat-mdc-chip-input{flex:1 0 150px}.cdk-high-contrast-black-on-white .mdc-chip__checkmark-path{stroke:#000 !important}.mat-chip-row-focusable-text-content{position:relative}\\n\"]\n                    }] }\n        ];\n        MatChipRow.propDecorators = {\n            chipContent: [{ type: core.ViewChild, args: ['chipContent',] }]\n        };\n        return MatChipRow;\n    }(MatChip));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var uid$1 = 0;\n    /**\n     * Boilerplate for applying mixins to MatChipSet.\n     * @docs-private\n     */\n    var MatChipSetBase = /** @class */ (function () {\n        function MatChipSetBase(_elementRef) {\n        }\n        return MatChipSetBase;\n    }());\n    var _MatChipSetMixinBase = core$1.mixinTabIndex(MatChipSetBase);\n    /**\n     * Basic container component for the MatChip component.\n     *\n     * Extended by MatChipListbox and MatChipGrid for different interaction patterns.\n     */\n    var MatChipSet = /** @class */ (function (_super) {\n        __extends(MatChipSet, _super);\n        function MatChipSet(_elementRef, _changeDetectorRef, _dir) {\n            var _this = _super.call(this, _elementRef) || this;\n            _this._elementRef = _elementRef;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._dir = _dir;\n            /**\n             * When a chip is destroyed, we store the index of the destroyed chip until the chips\n             * query list notifies about the update. This is necessary because we cannot determine an\n             * appropriate chip that should receive focus until the array of chips updated completely.\n             */\n            _this._lastDestroyedChipIndex = null;\n            /** Subject that emits when the component has been destroyed. */\n            _this._destroyed = new rxjs.Subject();\n            /**\n             * Implementation of the MDC chip-set adapter interface.\n             * These methods are called by the chip set foundation.\n             */\n            _this._chipSetAdapter = {\n                hasClass: function (className) { return _this._hasMdcClass(className); },\n                // No-op. We keep track of chips via ContentChildren, which will be updated when a chip is\n                // removed.\n                removeChipAtIndex: function () { },\n                // No-op for base chip set. MatChipListbox overrides the adapter to provide this method.\n                selectChipAtIndex: function () { },\n                getIndexOfChipById: function (id) { return _this._chips.toArray().findIndex(function (chip) { return chip.id === id; }); },\n                focusChipPrimaryActionAtIndex: function () { },\n                focusChipTrailingActionAtIndex: function () { },\n                removeFocusFromChipAtIndex: function () { },\n                isRTL: function () { return !!_this._dir && _this._dir.value === 'rtl'; },\n                getChipListCount: function () { return _this._chips.length; },\n                // TODO(mmalerba): Implement using LiveAnnouncer.\n                announceMessage: function () { },\n            };\n            /** Uid of the chip set */\n            _this._uid = \"mat-mdc-chip-set-\" + uid$1++;\n            /**\n             * Map from class to whether the class is enabled.\n             * Enabled classes are set on the MDC chip-set div.\n             */\n            _this._mdcClasses = {};\n            _this._disabled = false;\n            _this._chipSetFoundation = new chips.MDCChipSetFoundation(_this._chipSetAdapter);\n            return _this;\n        }\n        Object.defineProperty(MatChipSet.prototype, \"disabled\", {\n            /** Whether the chip set is disabled. */\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                this._syncChipsState();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipSet.prototype, \"empty\", {\n            /** Whether the chip list contains chips or not. */\n            get: function () { return this._chips.length === 0; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipSet.prototype, \"role\", {\n            /** The ARIA role applied to the chip set. */\n            get: function () { return this.empty ? null : 'presentation'; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipSet.prototype, \"focused\", {\n            /** Whether any of the chips inside of this chip-set has focus. */\n            get: function () { return this._hasFocusedChip(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipSet.prototype, \"chipRemoveChanges\", {\n            /** Combined stream of all of the child chips' remove events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this._chips.map(function (chip) { return chip.removed; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipSet.prototype, \"chipDestroyedChanges\", {\n            /** Combined stream of all of the child chips' remove events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this._chips.map(function (chip) { return chip.destroyed; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipSet.prototype, \"chipInteractionChanges\", {\n            /** Combined stream of all of the child chips' interaction events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this._chips.map(function (chip) { return chip.interaction; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatChipSet.prototype.ngAfterViewInit = function () {\n            this._chipSetFoundation.init();\n        };\n        MatChipSet.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this._chips.changes.pipe(operators.startWith(null), operators.takeUntil(this._destroyed)).subscribe(function () {\n                if (_this.disabled) {\n                    // Since this happens after the content has been\n                    // checked, we need to defer it to the next tick.\n                    Promise.resolve().then(function () {\n                        _this._syncChipsState();\n                    });\n                }\n                _this._resetChips();\n            });\n        };\n        MatChipSet.prototype.ngOnDestroy = function () {\n            this._dropSubscriptions();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._chipSetFoundation.destroy();\n        };\n        /** Checks whether any of the chips is focused. */\n        MatChipSet.prototype._hasFocusedChip = function () {\n            return this._chips.some(function (chip) { return chip._hasFocus; });\n        };\n        /** Syncs the chip-set's state with the individual chips. */\n        MatChipSet.prototype._syncChipsState = function () {\n            var _this = this;\n            if (this._chips) {\n                this._chips.forEach(function (chip) {\n                    chip.disabled = _this._disabled;\n                    chip._changeDetectorRef.markForCheck();\n                });\n            }\n        };\n        /** Sets whether the given CSS class should be applied to the MDC chip. */\n        MatChipSet.prototype._setMdcClass = function (cssClass, active) {\n            var classes = this._elementRef.nativeElement.classList;\n            active ? classes.add(cssClass) : classes.remove(cssClass);\n            this._changeDetectorRef.markForCheck();\n        };\n        /** Adapter method that returns true if the chip set has the given MDC class. */\n        MatChipSet.prototype._hasMdcClass = function (className) {\n            return this._elementRef.nativeElement.classList.contains(className);\n        };\n        /** Updates subscriptions to chip events. */\n        MatChipSet.prototype._resetChips = function () {\n            this._dropSubscriptions();\n            this._subscribeToChipEvents();\n        };\n        /** Subscribes to events on the child chips. */\n        MatChipSet.prototype._subscribeToChipEvents = function () {\n            this._listenToChipsRemove();\n            this._listenToChipsDestroyed();\n            this._listenToChipsInteraction();\n        };\n        /** Subscribes to chip removal events. */\n        MatChipSet.prototype._listenToChipsRemove = function () {\n            var _this = this;\n            this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(function (event) {\n                _this._chipSetFoundation.handleChipRemoval({\n                    chipId: event.chip.id,\n                    // TODO(mmalerba): Add removal message.\n                    removedAnnouncement: null,\n                });\n            });\n        };\n        /** Subscribes to chip destroyed events. */\n        MatChipSet.prototype._listenToChipsDestroyed = function () {\n            var _this = this;\n            this._chipDestroyedSubscription = this.chipDestroyedChanges.subscribe(function (event) {\n                var chip = event.chip;\n                var chipIndex = _this._chips.toArray().indexOf(event.chip);\n                // In case the chip that will be removed is currently focused, we temporarily store\n                // the index in order to be able to determine an appropriate sibling chip that will\n                // receive focus.\n                if (_this._isValidIndex(chipIndex) && chip._hasFocus) {\n                    _this._lastDestroyedChipIndex = chipIndex;\n                }\n            });\n        };\n        /** Subscribes to chip interaction events. */\n        MatChipSet.prototype._listenToChipsInteraction = function () {\n            var _this = this;\n            this._chipInteractionSubscription = this.chipInteractionChanges.subscribe(function (id) {\n                _this._chipSetFoundation.handleChipInteraction({ chipId: id });\n            });\n        };\n        /** Unsubscribes from all chip events. */\n        MatChipSet.prototype._dropSubscriptions = function () {\n            if (this._chipRemoveSubscription) {\n                this._chipRemoveSubscription.unsubscribe();\n                this._chipRemoveSubscription = null;\n            }\n            if (this._chipInteractionSubscription) {\n                this._chipInteractionSubscription.unsubscribe();\n                this._chipInteractionSubscription = null;\n            }\n            if (this._chipDestroyedSubscription) {\n                this._chipDestroyedSubscription.unsubscribe();\n                this._chipDestroyedSubscription = null;\n            }\n        };\n        /** Dummy method for subclasses to override. Base chip set cannot be focused. */\n        MatChipSet.prototype.focus = function () { };\n        /**\n         * Utility to ensure all indexes are valid.\n         *\n         * @param index The index to be checked.\n         * @returns True if the index is valid for our list of chips.\n         */\n        MatChipSet.prototype._isValidIndex = function (index) {\n            return index >= 0 && index < this._chips.length;\n        };\n        /** Checks whether an event comes from inside a chip element. */\n        MatChipSet.prototype._originatesFromChip = function (event) {\n            var currentElement = event.target;\n            while (currentElement && currentElement !== this._elementRef.nativeElement) {\n                // Null check the classList, because IE and Edge don't support it on all elements.\n                if (currentElement.classList && currentElement.classList.contains('mdc-chip')) {\n                    return true;\n                }\n                currentElement = currentElement.parentElement;\n            }\n            return false;\n        };\n        MatChipSet.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-chip-set',\n                        template: '<ng-content></ng-content>',\n                        host: {\n                            'class': 'mat-mdc-chip-set mdc-chip-set',\n                            '[attr.role]': 'role',\n                            // TODO: replace this binding with use of AriaDescriber\n                            '[attr.aria-describedby]': '_ariaDescribedby || null',\n                            '[id]': '_uid',\n                        },\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        styles: [\".mdc-chip__icon.mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){width:20px;height:20px;font-size:20px}.mdc-chip__icon.mdc-chip__icon--trailing{width:18px;height:18px;font-size:18px}.mdc-chip__icon--trailing{margin-left:4px;margin-right:-4px}[dir=rtl] .mdc-chip__icon--trailing,.mdc-chip__icon--trailing[dir=rtl]{margin-left:-4px;margin-right:4px}.mdc-touch-target-wrapper{display:inline}.mdc-elevation-overlay{position:absolute;border-radius:inherit;opacity:0;pointer-events:none;transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip{border-radius:16px;height:32px;position:relative;display:inline-flex;align-items:center;box-sizing:border-box;padding:0 12px;border-width:0;outline:none;cursor:pointer;-webkit-appearance:none}.mdc-chip .mdc-chip__ripple{border-radius:16px}.mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){margin-left:-4px;margin-right:4px}[dir=rtl] .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip.mdc-chip--selected .mdc-chip__checkmark[dir=rtl],[dir=rtl] .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden),.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden)[dir=rtl]{margin-left:4px;margin-right:-4px}.mdc-chip .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-chip::-moz-focus-inner{padding:0;border:0}.mdc-chip .mdc-chip__touch{position:absolute;top:50%;right:0;height:48px;left:0;transform:translateY(-50%)}.mdc-chip--exit{opacity:0}.mdc-chip__text{white-space:nowrap}.mdc-chip__icon{border-radius:50%;outline:none;vertical-align:middle}.mdc-chip__checkmark{height:20px}.mdc-chip__checkmark-path{transition:stroke-dashoffset 150ms 50ms cubic-bezier(0.4, 0, 0.6, 1);stroke-width:2px;stroke-dashoffset:29.7833385;stroke-dasharray:29.7833385}.mdc-chip__primary-action:focus{outline:none}.mdc-chip--selected .mdc-chip__checkmark-path{stroke-dashoffset:0}.mdc-chip__icon--leading,.mdc-chip__icon--trailing{position:relative}.mdc-chip__checkmark-svg{width:0;height:20px;transition:width 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip--selected .mdc-chip__checkmark-svg{width:20px}.mdc-chip-set--filter .mdc-chip__icon--leading{transition:opacity 75ms linear;transition-delay:-50ms;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark{transition:opacity 75ms linear;transition-delay:80ms;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark .mdc-chip__checkmark-svg{transition:width 0ms}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading{opacity:0}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading+.mdc-chip__checkmark{width:0;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading{width:0;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading+.mdc-chip__checkmark{width:20px}@keyframes mdc-chip-entry{from{transform:scale(0.8);opacity:.4}to{transform:scale(1);opacity:1}}.mdc-chip-set{padding:4px;display:flex;flex-wrap:wrap;box-sizing:border-box}.mdc-chip-set .mdc-chip{margin:4px}.mdc-chip-set .mdc-chip--touch{margin-top:8px;margin-bottom:8px}.mdc-chip-set--input .mdc-chip{animation:mdc-chip-entry 100ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-chip{cursor:default}.mat-mdc-chip._mat-animation-noopable{transition-duration:1ms}.cdk-high-contrast-active .mat-mdc-chip{outline:solid 1px}.cdk-high-contrast-active .mat-mdc-chip:focus{outline:dotted 2px}.mat-mdc-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mdc-chip__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}.mdc-chip__ripple::after,.mdc-chip__ripple::before{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";pointer-events:none;opacity:0;border-radius:inherit}.mat-mdc-chip-disabled.mat-mdc-chip{opacity:.4}.mat-mdc-chip-disabled.mat-mdc-chip .mat-mdc-chip-trailing-icon,.mat-mdc-chip-disabled.mat-mdc-chip .mat-chip-row-focusable-text-content{pointer-events:none}.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::after,.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::before{display:none}.mat-mdc-chip-set-stacked{flex-direction:column;align-items:flex-start}.mat-mdc-chip-set-stacked .mat-mdc-chip{width:100%}input.mat-mdc-chip-input{flex:1 0 150px}.cdk-high-contrast-black-on-white .mdc-chip__checkmark-path{stroke:#000 !important}.mat-chip-row-focusable-text-content{position:relative}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatChipSet.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: core.ChangeDetectorRef },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] }\n        ]; };\n        MatChipSet.propDecorators = {\n            disabled: [{ type: core.Input }],\n            _chips: [{ type: core.ContentChildren, args: [MatChip, {\n                            // We need to use `descendants: true`, because Ivy will no longer match\n                            // indirect descendants if it's left as false.\n                            descendants: true\n                        },] }]\n        };\n        return MatChipSet;\n    }(_MatChipSetMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Change event object that is emitted when the chip listbox value has changed. */\n    var MatChipListboxChange = /** @class */ (function () {\n        function MatChipListboxChange(\n        /** Chip listbox that emitted the event. */\n        source, \n        /** Value of the chip listbox when the event was emitted. */\n        value) {\n            this.source = source;\n            this.value = value;\n        }\n        return MatChipListboxChange;\n    }());\n    /**\n     * Provider Expression that allows mat-chip-listbox to register as a ControlValueAccessor.\n     * This allows it to support [(ngModel)].\n     * @docs-private\n     */\n    var MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR = {\n        provide: forms.NG_VALUE_ACCESSOR,\n        useExisting: core.forwardRef(function () { return MatChipListbox; }),\n        multi: true\n    };\n    /**\n     * An extension of the MatChipSet component that supports chip selection.\n     * Used with MatChipOption chips.\n     */\n    var MatChipListbox = /** @class */ (function (_super) {\n        __extends(MatChipListbox, _super);\n        function MatChipListbox(_elementRef, _changeDetectorRef, _dir) {\n            var _this = _super.call(this, _elementRef, _changeDetectorRef, _dir) || this;\n            _this._elementRef = _elementRef;\n            /**\n             * Function when touched. Set as part of ControlValueAccessor implementation.\n             * @docs-private\n             */\n            _this._onTouched = function () { };\n            /**\n             * Function when changed. Set as part of ControlValueAccessor implementation.\n             * @docs-private\n             */\n            _this._onChange = function () { };\n            _this._multiple = false;\n            /** Orientation of the chip list. */\n            _this.ariaOrientation = 'horizontal';\n            _this._selectable = true;\n            _this._compareWith = function (o1, o2) { return o1 === o2; };\n            _this._required = false;\n            /** Event emitted when the selected chip listbox value has been changed by the user. */\n            _this.change = new core.EventEmitter();\n            _this._chipSetAdapter.selectChipAtIndex = function (index, selected) {\n                _this._setSelected(index, selected);\n            };\n            // Reinitialize the foundation with our overridden adapter\n            _this._chipSetFoundation = new chips.MDCChipSetFoundation(_this._chipSetAdapter);\n            _this._updateMdcSelectionClasses();\n            return _this;\n        }\n        Object.defineProperty(MatChipListbox.prototype, \"role\", {\n            /** The ARIA role applied to the chip listbox. */\n            get: function () { return this.empty ? null : 'listbox'; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipListbox.prototype, \"multiple\", {\n            /** Whether the user should be allowed to select multiple chips. */\n            get: function () { return this._multiple; },\n            set: function (value) {\n                this._multiple = coercion.coerceBooleanProperty(value);\n                this._updateMdcSelectionClasses();\n                this._syncListboxProperties();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipListbox.prototype, \"selected\", {\n            /** The array of selected chips inside the chip listbox. */\n            get: function () {\n                var selectedChips = this._chips.toArray().filter(function (chip) { return chip.selected; });\n                return this.multiple ? selectedChips : selectedChips[0];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipListbox.prototype, \"selectable\", {\n            /**\n             * Whether or not this chip listbox is selectable.\n             *\n             * When a chip listbox is not selectable, the selected states for all\n             * the chips inside the chip listbox are always ignored.\n             */\n            get: function () { return this._selectable; },\n            set: function (value) {\n                this._selectable = coercion.coerceBooleanProperty(value);\n                this._updateMdcSelectionClasses();\n                this._syncListboxProperties();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipListbox.prototype, \"compareWith\", {\n            /**\n             * A function to compare the option values with the selected values. The first argument\n             * is a value from an option. The second is a value from the selection. A boolean\n             * should be returned.\n             */\n            get: function () { return this._compareWith; },\n            set: function (fn) {\n                this._compareWith = fn;\n                this._initializeSelection();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipListbox.prototype, \"required\", {\n            /** Whether this chip listbox is required. */\n            get: function () { return this._required; },\n            set: function (value) {\n                this._required = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipListbox.prototype, \"chipSelectionChanges\", {\n            /** Combined stream of all of the child chips' selection change events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this._chips.map(function (chip) { return chip.selectionChange; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipListbox.prototype, \"chipFocusChanges\", {\n            /** Combined stream of all of the child chips' focus events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this._chips.map(function (chip) { return chip._onFocus; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipListbox.prototype, \"chipBlurChanges\", {\n            /** Combined stream of all of the child chips' blur events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this._chips.map(function (chip) { return chip._onBlur; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipListbox.prototype, \"value\", {\n            /** The value of the listbox, which is the combined value of the selected chips. */\n            get: function () { return this._value; },\n            set: function (value) {\n                this.writeValue(value);\n                this._value = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatChipListbox.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            _super.prototype.ngAfterContentInit.call(this);\n            this._initKeyManager();\n            this._chips.changes.pipe(operators.startWith(null), operators.takeUntil(this._destroyed)).subscribe(function () {\n                // Update listbox selectable/multiple properties on chips\n                _this._syncListboxProperties();\n                // Reset chips selected/deselected status\n                _this._initializeSelection();\n                // Check to see if we have a destroyed chip and need to refocus\n                _this._updateFocusForDestroyedChips();\n            });\n        };\n        /**\n         * Focuses the first selected chip in this chip listbox, or the first non-disabled chip when there\n         * are no selected chips.\n         */\n        MatChipListbox.prototype.focus = function () {\n            if (this.disabled) {\n                return;\n            }\n            var firstSelectedChip = this._getFirstSelectedChip();\n            if (firstSelectedChip) {\n                var firstSelectedChipIndex = this._chips.toArray().indexOf(firstSelectedChip);\n                this._keyManager.setActiveItem(firstSelectedChipIndex);\n            }\n            else if (this._chips.length > 0) {\n                this._keyManager.setFirstItemActive();\n            }\n        };\n        /**\n         * Implemented as part of ControlValueAccessor.\n         * @docs-private\n         */\n        MatChipListbox.prototype.writeValue = function (value) {\n            if (this._chips) {\n                this._setSelectionByValue(value, false);\n            }\n        };\n        /**\n         * Implemented as part of ControlValueAccessor.\n         * @docs-private\n         */\n        MatChipListbox.prototype.registerOnChange = function (fn) {\n            this._onChange = fn;\n        };\n        /**\n         * Implemented as part of ControlValueAccessor.\n         * @docs-private\n         */\n        MatChipListbox.prototype.registerOnTouched = function (fn) {\n            this._onTouched = fn;\n        };\n        /**\n         * Implemented as part of ControlValueAccessor.\n         * @docs-private\n         */\n        MatChipListbox.prototype.setDisabledState = function (isDisabled) {\n            this.disabled = isDisabled;\n        };\n        /** Selects all chips with value. */\n        MatChipListbox.prototype._setSelectionByValue = function (value, isUserInput) {\n            var _this = this;\n            if (isUserInput === void 0) { isUserInput = true; }\n            this._clearSelection();\n            if (Array.isArray(value)) {\n                value.forEach(function (currentValue) { return _this._selectValue(currentValue, isUserInput); });\n            }\n            else {\n                var correspondingChip = this._selectValue(value, isUserInput);\n                // Shift focus to the active item. Note that we shouldn't do this in multiple\n                // mode, because we don't know what chip the user interacted with last.\n                if (correspondingChip) {\n                    if (isUserInput) {\n                        this._keyManager.setActiveItem(correspondingChip);\n                    }\n                }\n            }\n        };\n        /** Selects or deselects a chip by id. */\n        MatChipListbox.prototype._setSelected = function (index, selected) {\n            var chip = this._chips.toArray()[index];\n            if (chip && chip.selected != selected) {\n                chip.toggleSelected(true);\n            }\n        };\n        /** When blurred, marks the field as touched when focus moved outside the chip listbox. */\n        MatChipListbox.prototype._blur = function () {\n            var _this = this;\n            if (this.disabled) {\n                return;\n            }\n            if (!this.focused) {\n                this._keyManager.setActiveItem(-1);\n            }\n            // Wait to see if focus moves to an indivdual chip.\n            setTimeout(function () {\n                if (!_this.focused) {\n                    _this._propagateChanges();\n                    _this._markAsTouched();\n                }\n            });\n        };\n        /**\n         * Removes the `tabindex` from the chip listbox and resets it back afterwards, allowing the\n         * user to tab out of it. This prevents the listbox from capturing focus and redirecting\n         * it back to the first chip, creating a focus trap, if it user tries to tab away.\n         */\n        MatChipListbox.prototype._allowFocusEscape = function () {\n            var _this = this;\n            var previousTabIndex = this.tabIndex;\n            if (this.tabIndex !== -1) {\n                this.tabIndex = -1;\n                setTimeout(function () {\n                    _this.tabIndex = previousTabIndex;\n                    _this._changeDetectorRef.markForCheck();\n                });\n            }\n        };\n        /**\n         * Handles custom keyboard shortcuts, and passes other keyboard events to the keyboard manager.\n         */\n        MatChipListbox.prototype._keydown = function (event) {\n            if (this._originatesFromChip(event)) {\n                if (event.keyCode === keycodes.HOME) {\n                    this._keyManager.setFirstItemActive();\n                    event.preventDefault();\n                }\n                else if (event.keyCode === keycodes.END) {\n                    this._keyManager.setLastItemActive();\n                    event.preventDefault();\n                }\n                else {\n                    this._keyManager.onKeydown(event);\n                }\n            }\n        };\n        /** Marks the field as touched */\n        MatChipListbox.prototype._markAsTouched = function () {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n        };\n        /** Emits change event to set the model value. */\n        MatChipListbox.prototype._propagateChanges = function (fallbackValue) {\n            var valueToEmit = null;\n            if (Array.isArray(this.selected)) {\n                valueToEmit = this.selected.map(function (chip) { return chip.value; });\n            }\n            else {\n                valueToEmit = this.selected ? this.selected.value : fallbackValue;\n            }\n            this._value = valueToEmit;\n            this.change.emit(new MatChipListboxChange(this, valueToEmit));\n            this._onChange(valueToEmit);\n            this._changeDetectorRef.markForCheck();\n        };\n        /**\n         * Initializes the chip listbox selection state to reflect any chips that were preselected.\n         */\n        MatChipListbox.prototype._initializeSelection = function () {\n            var _this = this;\n            setTimeout(function () {\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                _this._chips.forEach(function (chip) {\n                    if (chip.selected) {\n                        _this._chipSetFoundation.select(chip.id);\n                    }\n                });\n            });\n        };\n        /**\n         * Deselects every chip in the listbox.\n         * @param skip Chip that should not be deselected.\n         */\n        MatChipListbox.prototype._clearSelection = function (skip) {\n            this._chips.forEach(function (chip) {\n                if (chip !== skip) {\n                    chip.deselect();\n                }\n            });\n        };\n        /**\n         * Finds and selects the chip based on its value.\n         * @returns Chip that has the corresponding value.\n         */\n        MatChipListbox.prototype._selectValue = function (value, isUserInput) {\n            var _this = this;\n            if (isUserInput === void 0) { isUserInput = true; }\n            var correspondingChip = this._chips.find(function (chip) {\n                return chip.value != null && _this._compareWith(chip.value, value);\n            });\n            if (correspondingChip) {\n                isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            }\n            return correspondingChip;\n        };\n        /** Syncs the chip-listbox selection state with the individual chips. */\n        MatChipListbox.prototype._syncListboxProperties = function () {\n            var _this = this;\n            if (this._chips) {\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve().then(function () {\n                    _this._chips.forEach(function (chip) {\n                        chip._chipListMultiple = _this.multiple;\n                        chip.chipListSelectable = _this._selectable;\n                        chip._changeDetectorRef.markForCheck();\n                    });\n                });\n            }\n        };\n        /** Sets the mdc classes for single vs multi selection. */\n        MatChipListbox.prototype._updateMdcSelectionClasses = function () {\n            this._setMdcClass('mdc-chip-set--filter', this.selectable && this.multiple);\n            this._setMdcClass('mdc-chip-set--choice', this.selectable && !this.multiple);\n        };\n        /** Initializes the key manager to manage focus. */\n        MatChipListbox.prototype._initKeyManager = function () {\n            var _this = this;\n            this._keyManager = new a11y.FocusKeyManager(this._chips)\n                .withWrap()\n                .withVerticalOrientation()\n                .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n            if (this._dir) {\n                this._dir.change\n                    .pipe(operators.takeUntil(this._destroyed))\n                    .subscribe(function (dir) { return _this._keyManager.withHorizontalOrientation(dir); });\n            }\n            this._keyManager.tabOut.pipe(operators.takeUntil(this._destroyed)).subscribe(function () {\n                _this._allowFocusEscape();\n            });\n        };\n        /** Returns the first selected chip in this listbox, or undefined if no chips are selected. */\n        MatChipListbox.prototype._getFirstSelectedChip = function () {\n            if (Array.isArray(this.selected)) {\n                return this.selected.length ? this.selected[0] : undefined;\n            }\n            else {\n                return this.selected;\n            }\n        };\n        /** Unsubscribes from all chip events. */\n        MatChipListbox.prototype._dropSubscriptions = function () {\n            _super.prototype._dropSubscriptions.call(this);\n            if (this._chipSelectionSubscription) {\n                this._chipSelectionSubscription.unsubscribe();\n                this._chipSelectionSubscription = null;\n            }\n            if (this._chipBlurSubscription) {\n                this._chipBlurSubscription.unsubscribe();\n                this._chipBlurSubscription = null;\n            }\n            if (this._chipFocusSubscription) {\n                this._chipFocusSubscription.unsubscribe();\n                this._chipFocusSubscription = null;\n            }\n        };\n        /** Subscribes to events on the child chips. */\n        MatChipListbox.prototype._subscribeToChipEvents = function () {\n            _super.prototype._subscribeToChipEvents.call(this);\n            this._listenToChipsSelection();\n            this._listenToChipsFocus();\n            this._listenToChipsBlur();\n        };\n        /** Subscribes to chip focus events. */\n        MatChipListbox.prototype._listenToChipsFocus = function () {\n            var _this = this;\n            this._chipFocusSubscription = this.chipFocusChanges.subscribe(function (event) {\n                var chipIndex = _this._chips.toArray().indexOf(event.chip);\n                if (_this._isValidIndex(chipIndex)) {\n                    _this._keyManager.updateActiveItem(chipIndex);\n                }\n            });\n        };\n        /** Subscribes to chip blur events. */\n        MatChipListbox.prototype._listenToChipsBlur = function () {\n            var _this = this;\n            this._chipBlurSubscription = this.chipBlurChanges.subscribe(function () {\n                _this._blur();\n            });\n        };\n        /** Subscribes to selection changes in the option chips. */\n        MatChipListbox.prototype._listenToChipsSelection = function () {\n            var _this = this;\n            this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(function (chipSelectionChange) {\n                _this._chipSetFoundation.handleChipSelection({\n                    chipId: chipSelectionChange.source.id,\n                    selected: chipSelectionChange.selected,\n                    shouldIgnore: false\n                });\n                if (chipSelectionChange.isUserInput) {\n                    _this._propagateChanges();\n                }\n            });\n        };\n        /**\n         * If the amount of chips changed, we need to update the\n         * key manager state and focus the next closest chip.\n         */\n        MatChipListbox.prototype._updateFocusForDestroyedChips = function () {\n            // Move focus to the closest chip. If no other chips remain, focus the chip-listbox itself.\n            if (this._lastDestroyedChipIndex != null) {\n                if (this._chips.length) {\n                    var newChipIndex = Math.min(this._lastDestroyedChipIndex, this._chips.length - 1);\n                    this._keyManager.setActiveItem(newChipIndex);\n                }\n                else {\n                    this.focus();\n                }\n            }\n            this._lastDestroyedChipIndex = null;\n        };\n        MatChipListbox.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-chip-listbox',\n                        template: '<ng-content></ng-content>',\n                        inputs: ['tabIndex'],\n                        host: {\n                            'class': 'mat-mdc-chip-set mat-mdc-chip-listbox mdc-chip-set',\n                            '[attr.role]': 'role',\n                            '[tabIndex]': 'empty ? -1 : tabIndex',\n                            // TODO: replace this binding with use of AriaDescriber\n                            '[attr.aria-describedby]': '_ariaDescribedby || null',\n                            '[attr.aria-required]': 'role ? required : null',\n                            '[attr.aria-disabled]': 'disabled.toString()',\n                            '[attr.aria-multiselectable]': 'multiple',\n                            '[attr.aria-orientation]': 'ariaOrientation',\n                            '[class.mat-mdc-chip-list-disabled]': 'disabled',\n                            '[class.mat-mdc-chip-list-required]': 'required',\n                            '(focus)': 'focus()',\n                            '(blur)': '_blur()',\n                            '(keydown)': '_keydown($event)',\n                            '[id]': '_uid',\n                        },\n                        providers: [MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR],\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        styles: [\".mdc-chip__icon.mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){width:20px;height:20px;font-size:20px}.mdc-chip__icon.mdc-chip__icon--trailing{width:18px;height:18px;font-size:18px}.mdc-chip__icon--trailing{margin-left:4px;margin-right:-4px}[dir=rtl] .mdc-chip__icon--trailing,.mdc-chip__icon--trailing[dir=rtl]{margin-left:-4px;margin-right:4px}.mdc-touch-target-wrapper{display:inline}.mdc-elevation-overlay{position:absolute;border-radius:inherit;opacity:0;pointer-events:none;transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip{border-radius:16px;height:32px;position:relative;display:inline-flex;align-items:center;box-sizing:border-box;padding:0 12px;border-width:0;outline:none;cursor:pointer;-webkit-appearance:none}.mdc-chip .mdc-chip__ripple{border-radius:16px}.mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){margin-left:-4px;margin-right:4px}[dir=rtl] .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip.mdc-chip--selected .mdc-chip__checkmark[dir=rtl],[dir=rtl] .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden),.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden)[dir=rtl]{margin-left:4px;margin-right:-4px}.mdc-chip .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-chip::-moz-focus-inner{padding:0;border:0}.mdc-chip .mdc-chip__touch{position:absolute;top:50%;right:0;height:48px;left:0;transform:translateY(-50%)}.mdc-chip--exit{opacity:0}.mdc-chip__text{white-space:nowrap}.mdc-chip__icon{border-radius:50%;outline:none;vertical-align:middle}.mdc-chip__checkmark{height:20px}.mdc-chip__checkmark-path{transition:stroke-dashoffset 150ms 50ms cubic-bezier(0.4, 0, 0.6, 1);stroke-width:2px;stroke-dashoffset:29.7833385;stroke-dasharray:29.7833385}.mdc-chip__primary-action:focus{outline:none}.mdc-chip--selected .mdc-chip__checkmark-path{stroke-dashoffset:0}.mdc-chip__icon--leading,.mdc-chip__icon--trailing{position:relative}.mdc-chip__checkmark-svg{width:0;height:20px;transition:width 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip--selected .mdc-chip__checkmark-svg{width:20px}.mdc-chip-set--filter .mdc-chip__icon--leading{transition:opacity 75ms linear;transition-delay:-50ms;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark{transition:opacity 75ms linear;transition-delay:80ms;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark .mdc-chip__checkmark-svg{transition:width 0ms}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading{opacity:0}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading+.mdc-chip__checkmark{width:0;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading{width:0;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading+.mdc-chip__checkmark{width:20px}@keyframes mdc-chip-entry{from{transform:scale(0.8);opacity:.4}to{transform:scale(1);opacity:1}}.mdc-chip-set{padding:4px;display:flex;flex-wrap:wrap;box-sizing:border-box}.mdc-chip-set .mdc-chip{margin:4px}.mdc-chip-set .mdc-chip--touch{margin-top:8px;margin-bottom:8px}.mdc-chip-set--input .mdc-chip{animation:mdc-chip-entry 100ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-chip{cursor:default}.mat-mdc-chip._mat-animation-noopable{transition-duration:1ms}.cdk-high-contrast-active .mat-mdc-chip{outline:solid 1px}.cdk-high-contrast-active .mat-mdc-chip:focus{outline:dotted 2px}.mat-mdc-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mdc-chip__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}.mdc-chip__ripple::after,.mdc-chip__ripple::before{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";pointer-events:none;opacity:0;border-radius:inherit}.mat-mdc-chip-disabled.mat-mdc-chip{opacity:.4}.mat-mdc-chip-disabled.mat-mdc-chip .mat-mdc-chip-trailing-icon,.mat-mdc-chip-disabled.mat-mdc-chip .mat-chip-row-focusable-text-content{pointer-events:none}.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::after,.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::before{display:none}.mat-mdc-chip-set-stacked{flex-direction:column;align-items:flex-start}.mat-mdc-chip-set-stacked .mat-mdc-chip{width:100%}input.mat-mdc-chip-input{flex:1 0 150px}.cdk-high-contrast-black-on-white .mdc-chip__checkmark-path{stroke:#000 !important}.mat-chip-row-focusable-text-content{position:relative}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatChipListbox.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: core.ChangeDetectorRef },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] }\n        ]; };\n        MatChipListbox.propDecorators = {\n            multiple: [{ type: core.Input }],\n            ariaOrientation: [{ type: core.Input, args: ['aria-orientation',] }],\n            selectable: [{ type: core.Input }],\n            compareWith: [{ type: core.Input }],\n            required: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            change: [{ type: core.Output }],\n            _chips: [{ type: core.ContentChildren, args: [MatChipOption, {\n                            // We need to use `descendants: true`, because Ivy will no longer match\n                            // indirect descendants if it's left as false.\n                            descendants: true\n                        },] }]\n        };\n        return MatChipListbox;\n    }(MatChipSet));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A version of GridKeyManager where the cells are HTMLElements, and focus()\n     * is called on a cell when it becomes active.\n     */\n    var GridFocusKeyManager = /** @class */ (function (_super) {\n        __extends(GridFocusKeyManager, _super);\n        function GridFocusKeyManager() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        GridFocusKeyManager.prototype.setActiveCell = function (cell) {\n            _super.prototype.setActiveCell.call(this, cell);\n            if (this.activeCell) {\n                this.activeCell.focus();\n            }\n        };\n        return GridFocusKeyManager;\n    }(GridKeyManager));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Change event object that is emitted when the chip grid value has changed. */\n    var MatChipGridChange = /** @class */ (function () {\n        function MatChipGridChange(\n        /** Chip grid that emitted the event. */\n        source, \n        /** Value of the chip grid when the event was emitted. */\n        value) {\n            this.source = source;\n            this.value = value;\n        }\n        return MatChipGridChange;\n    }());\n    /**\n     * Boilerplate for applying mixins to MatChipGrid.\n     * @docs-private\n     */\n    var MatChipGridBase = /** @class */ (function (_super) {\n        __extends(MatChipGridBase, _super);\n        function MatChipGridBase(_elementRef, _changeDetectorRef, _dir, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n        /** @docs-private */\n        ngControl) {\n            var _this = _super.call(this, _elementRef, _changeDetectorRef, _dir) || this;\n            _this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n            _this._parentForm = _parentForm;\n            _this._parentFormGroup = _parentFormGroup;\n            _this.ngControl = ngControl;\n            return _this;\n        }\n        return MatChipGridBase;\n    }(MatChipSet));\n    var _MatChipGridMixinBase = core$1.mixinErrorState(MatChipGridBase);\n    /**\n     * An extension of the MatChipSet component used with MatChipRow chips and\n     * the matChipInputFor directive.\n     */\n    var MatChipGrid = /** @class */ (function (_super) {\n        __extends(MatChipGrid, _super);\n        function MatChipGrid(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, \n        /** @docs-private */\n        ngControl) {\n            var _this = _super.call(this, _elementRef, _changeDetectorRef, _dir, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;\n            _this.ngControl = ngControl;\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            _this.controlType = 'mat-chip-grid';\n            /**\n             * Function when touched. Set as part of ControlValueAccessor implementation.\n             * @docs-private\n             */\n            _this._onTouched = function () { };\n            /**\n             * Function when changed. Set as part of ControlValueAccessor implementation.\n             * @docs-private\n             */\n            _this._onChange = function () { };\n            _this._required = false;\n            /** Emits when the chip grid value has been changed by the user. */\n            _this.change = new core.EventEmitter();\n            /**\n             * Emits whenever the raw value of the chip-grid changes. This is here primarily\n             * to facilitate the two-way binding for the `value` input.\n             * @docs-private\n             */\n            _this.valueChange = new core.EventEmitter();\n            if (_this.ngControl) {\n                _this.ngControl.valueAccessor = _this;\n            }\n            return _this;\n        }\n        Object.defineProperty(MatChipGrid.prototype, \"disabled\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return this.ngControl ? !!this.ngControl.disabled : this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                this._syncChipsState();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"id\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return this._chipInput.id; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"empty\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return this._chipInput.empty && this._chips.length === 0; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"role\", {\n            /** The ARIA role applied to the chip grid. */\n            get: function () { return this.empty ? null : 'grid'; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"placeholder\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () {\n                return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n            },\n            set: function (value) {\n                this._placeholder = value;\n                this.stateChanges.next();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"focused\", {\n            /** Whether any chips or the matChipInput inside of this chip-grid has focus. */\n            get: function () { return this._chipInput.focused || this._hasFocusedChip(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"required\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return this._required; },\n            set: function (value) {\n                this._required = coercion.coerceBooleanProperty(value);\n                this.stateChanges.next();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"shouldLabelFloat\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return !this.empty || this.focused; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"value\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return this._value; },\n            set: function (value) {\n                this._value = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"chipBlurChanges\", {\n            /** Combined stream of all of the child chips' blur events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this._chips.map(function (chip) { return chip._onBlur; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipGrid.prototype, \"chipFocusChanges\", {\n            /** Combined stream of all of the child chips' focus events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this._chips.map(function (chip) { return chip._onFocus; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatChipGrid.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            _super.prototype.ngAfterContentInit.call(this);\n            this._initKeyManager();\n            this._chips.changes.pipe(operators.startWith(null), operators.takeUntil(this._destroyed)).subscribe(function () {\n                // Check to see if we have a destroyed chip and need to refocus\n                _this._updateFocusForDestroyedChips();\n                _this.stateChanges.next();\n            });\n        };\n        MatChipGrid.prototype.ngAfterViewInit = function () {\n            _super.prototype.ngAfterViewInit.call(this);\n            if (!this._chipInput) {\n                throw Error('mat-chip-grid must be used in combination with matChipInputFor.');\n            }\n        };\n        MatChipGrid.prototype.ngDoCheck = function () {\n            if (this.ngControl) {\n                // We need to re-evaluate this on every change detection cycle, because there are some\n                // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n                // that whatever logic is in here has to be super lean or we risk destroying the performance.\n                this.updateErrorState();\n            }\n        };\n        MatChipGrid.prototype.ngOnDestroy = function () {\n            _super.prototype.ngOnDestroy.call(this);\n            this.stateChanges.complete();\n        };\n        /** Associates an HTML input element with this chip grid. */\n        MatChipGrid.prototype.registerInput = function (inputElement) {\n            this._chipInput = inputElement;\n            this._setMdcClass('mdc-chip-set--input', true);\n        };\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        MatChipGrid.prototype.onContainerClick = function (event) {\n            if (!this._originatesFromChip(event) && !this.disabled) {\n                this.focus();\n            }\n        };\n        /**\n         * Focuses the first chip in this chip grid, or the associated input when there\n         * are no eligible chips.\n         */\n        MatChipGrid.prototype.focus = function () {\n            if (this.disabled || this._chipInput.focused) {\n                return;\n            }\n            if (this._chips.length > 0) {\n                this._keyManager.setFirstCellActive();\n            }\n            else {\n                this._focusInput();\n            }\n            this.stateChanges.next();\n        };\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        MatChipGrid.prototype.setDescribedByIds = function (ids) { this._ariaDescribedby = ids.join(' '); };\n        /**\n         * Implemented as part of ControlValueAccessor.\n         * @docs-private\n         */\n        MatChipGrid.prototype.writeValue = function (value) {\n            // The user is responsible for creating the child chips, so we just store the value.\n            this._value = value;\n        };\n        /**\n         * Implemented as part of ControlValueAccessor.\n         * @docs-private\n         */\n        MatChipGrid.prototype.registerOnChange = function (fn) {\n            this._onChange = fn;\n        };\n        /**\n         * Implemented as part of ControlValueAccessor.\n         * @docs-private\n         */\n        MatChipGrid.prototype.registerOnTouched = function (fn) {\n            this._onTouched = fn;\n        };\n        /**\n         * Implemented as part of ControlValueAccessor.\n         * @docs-private\n         */\n        MatChipGrid.prototype.setDisabledState = function (isDisabled) {\n            this.disabled = isDisabled;\n            this.stateChanges.next();\n        };\n        /** When blurred, mark the field as touched when focus moved outside the chip grid. */\n        MatChipGrid.prototype._blur = function () {\n            var _this = this;\n            if (this.disabled) {\n                return;\n            }\n            // Check whether the focus moved to chip input.\n            // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n            // to chip input, do nothing.\n            // Timeout is needed to wait for the focus() event trigger on chip input.\n            setTimeout(function () {\n                if (!_this.focused) {\n                    _this._keyManager.setActiveCell({ row: -1, column: -1 });\n                    _this._propagateChanges();\n                    _this._markAsTouched();\n                }\n            });\n        };\n        /**\n         * Removes the `tabindex` from the chip grid and resets it back afterwards, allowing the\n         * user to tab out of it. This prevents the grid from capturing focus and redirecting\n         * it back to the first chip, creating a focus trap, if it user tries to tab away.\n         */\n        MatChipGrid.prototype._allowFocusEscape = function () {\n            var _this = this;\n            if (this._chipInput.focused) {\n                return;\n            }\n            var previousTabIndex = this.tabIndex;\n            if (this.tabIndex !== -1) {\n                this.tabIndex = -1;\n                setTimeout(function () {\n                    _this.tabIndex = previousTabIndex;\n                    _this._changeDetectorRef.markForCheck();\n                });\n            }\n        };\n        /** Handles custom keyboard events. */\n        MatChipGrid.prototype._keydown = function (event) {\n            var target = event.target;\n            var keyCode = event.keyCode;\n            var manager = this._keyManager;\n            // If they are on an empty input and hit backspace, focus the last chip\n            if (keyCode === keycodes.BACKSPACE && this._isEmptyInput(target)) {\n                if (this._chips.length) {\n                    manager.setLastCellActive();\n                }\n                event.preventDefault();\n            }\n            else if (keyCode === keycodes.TAB && target.id !== this._chipInput.id) {\n                this._allowFocusEscape();\n            }\n            else if (this._originatesFromChip(event)) {\n                if (keyCode === keycodes.HOME) {\n                    manager.setFirstCellActive();\n                    event.preventDefault();\n                }\n                else if (keyCode === keycodes.END) {\n                    manager.setLastCellActive();\n                    event.preventDefault();\n                }\n                else {\n                    manager.onKeydown(event);\n                }\n            }\n            this.stateChanges.next();\n        };\n        /** Unsubscribes from all chip events. */\n        MatChipGrid.prototype._dropSubscriptions = function () {\n            _super.prototype._dropSubscriptions.call(this);\n            if (this._chipBlurSubscription) {\n                this._chipBlurSubscription.unsubscribe();\n                this._chipBlurSubscription = null;\n            }\n            if (this._chipFocusSubscription) {\n                this._chipFocusSubscription.unsubscribe();\n                this._chipFocusSubscription = null;\n            }\n        };\n        /** Subscribes to events on the child chips. */\n        MatChipGrid.prototype._subscribeToChipEvents = function () {\n            _super.prototype._subscribeToChipEvents.call(this);\n            this._listenToChipsFocus();\n            this._listenToChipsBlur();\n        };\n        /** Initializes the key manager to manage focus. */\n        MatChipGrid.prototype._initKeyManager = function () {\n            var _this = this;\n            this._keyManager = new GridFocusKeyManager(this._chips)\n                .withDirectionality(this._dir ? this._dir.value : 'ltr');\n            if (this._dir) {\n                this._dir.change\n                    .pipe(operators.takeUntil(this._destroyed))\n                    .subscribe(function (dir) { return _this._keyManager.withDirectionality(dir); });\n            }\n        };\n        /** Subscribes to chip focus events. */\n        MatChipGrid.prototype._listenToChipsFocus = function () {\n            var _this = this;\n            this._chipFocusSubscription = this.chipFocusChanges.subscribe(function (event) {\n                var chipIndex = _this._chips.toArray().indexOf(event.chip);\n                if (_this._isValidIndex(chipIndex)) {\n                    _this._keyManager.updateActiveCell({ row: chipIndex, column: 0 });\n                }\n            });\n        };\n        /** Subscribes to chip blur events. */\n        MatChipGrid.prototype._listenToChipsBlur = function () {\n            var _this = this;\n            this._chipBlurSubscription = this.chipBlurChanges.subscribe(function () {\n                _this._blur();\n                _this.stateChanges.next();\n            });\n        };\n        /** Emits change event to set the model value. */\n        MatChipGrid.prototype._propagateChanges = function (fallbackValue) {\n            var valueToEmit = this._chips.length ? this._chips.toArray().map(function (chip) { return chip.value; }) : fallbackValue;\n            this._value = valueToEmit;\n            this.change.emit(new MatChipGridChange(this, valueToEmit));\n            this.valueChange.emit(valueToEmit);\n            this._onChange(valueToEmit);\n            this._changeDetectorRef.markForCheck();\n        };\n        /** Mark the field as touched */\n        MatChipGrid.prototype._markAsTouched = function () {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        };\n        /**\n         * If the amount of chips changed, we need to focus the next closest chip.\n         */\n        MatChipGrid.prototype._updateFocusForDestroyedChips = function () {\n            // Move focus to the closest chip. If no other chips remain, focus the chip-grid itself.\n            if (this._lastDestroyedChipIndex != null) {\n                if (this._chips.length) {\n                    var newChipIndex = Math.min(this._lastDestroyedChipIndex, this._chips.length - 1);\n                    this._keyManager.setActiveCell({\n                        row: newChipIndex,\n                        column: this._keyManager.activeColumnIndex\n                    });\n                }\n                else {\n                    this.focus();\n                }\n            }\n            this._lastDestroyedChipIndex = null;\n        };\n        /** Focus input element. */\n        MatChipGrid.prototype._focusInput = function () {\n            this._chipInput.focus();\n        };\n        /** Returns true if element is an input with no value. */\n        MatChipGrid.prototype._isEmptyInput = function (element) {\n            if (element && element.id === this._chipInput.id) {\n                return this._chipInput.empty;\n            }\n            return false;\n        };\n        MatChipGrid.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-chip-grid',\n                        template: '<ng-content></ng-content>',\n                        inputs: ['tabIndex'],\n                        host: {\n                            'class': 'mat-mdc-chip-set mat-mdc-chip-grid mdc-chip-set',\n                            '[attr.role]': 'role',\n                            '[tabIndex]': '_chips && _chips.length === 0 ? -1 : tabIndex',\n                            // TODO: replace this binding with use of AriaDescriber\n                            '[attr.aria-describedby]': '_ariaDescribedby || null',\n                            '[attr.aria-disabled]': 'disabled.toString()',\n                            '[attr.aria-invalid]': 'errorState',\n                            '[class.mat-mdc-chip-list-disabled]': 'disabled',\n                            '[class.mat-mdc-chip-list-invalid]': 'errorState',\n                            '[class.mat-mdc-chip-list-required]': 'required',\n                            '(focus)': 'focus()',\n                            '(blur)': '_blur()',\n                            '(keydown)': '_keydown($event)',\n                            '[id]': '_uid',\n                        },\n                        providers: [{ provide: formField.MatFormFieldControl, useExisting: MatChipGrid }],\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        styles: [\".mdc-chip__icon.mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){width:20px;height:20px;font-size:20px}.mdc-chip__icon.mdc-chip__icon--trailing{width:18px;height:18px;font-size:18px}.mdc-chip__icon--trailing{margin-left:4px;margin-right:-4px}[dir=rtl] .mdc-chip__icon--trailing,.mdc-chip__icon--trailing[dir=rtl]{margin-left:-4px;margin-right:4px}.mdc-touch-target-wrapper{display:inline}.mdc-elevation-overlay{position:absolute;border-radius:inherit;opacity:0;pointer-events:none;transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip{border-radius:16px;height:32px;position:relative;display:inline-flex;align-items:center;box-sizing:border-box;padding:0 12px;border-width:0;outline:none;cursor:pointer;-webkit-appearance:none}.mdc-chip .mdc-chip__ripple{border-radius:16px}.mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden){margin-left:-4px;margin-right:4px}[dir=rtl] .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,.mdc-chip.mdc-chip--selected .mdc-chip__checkmark[dir=rtl],[dir=rtl] .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden),.mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden)[dir=rtl]{margin-left:4px;margin-right:-4px}.mdc-chip .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-chip::-moz-focus-inner{padding:0;border:0}.mdc-chip .mdc-chip__touch{position:absolute;top:50%;right:0;height:48px;left:0;transform:translateY(-50%)}.mdc-chip--exit{opacity:0}.mdc-chip__text{white-space:nowrap}.mdc-chip__icon{border-radius:50%;outline:none;vertical-align:middle}.mdc-chip__checkmark{height:20px}.mdc-chip__checkmark-path{transition:stroke-dashoffset 150ms 50ms cubic-bezier(0.4, 0, 0.6, 1);stroke-width:2px;stroke-dashoffset:29.7833385;stroke-dasharray:29.7833385}.mdc-chip__primary-action:focus{outline:none}.mdc-chip--selected .mdc-chip__checkmark-path{stroke-dashoffset:0}.mdc-chip__icon--leading,.mdc-chip__icon--trailing{position:relative}.mdc-chip__checkmark-svg{width:0;height:20px;transition:width 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-chip--selected .mdc-chip__checkmark-svg{width:20px}.mdc-chip-set--filter .mdc-chip__icon--leading{transition:opacity 75ms linear;transition-delay:-50ms;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark{transition:opacity 75ms linear;transition-delay:80ms;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading+.mdc-chip__checkmark .mdc-chip__checkmark-svg{transition:width 0ms}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading{opacity:0}.mdc-chip-set--filter .mdc-chip--selected .mdc-chip__icon--leading+.mdc-chip__checkmark{width:0;opacity:1}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading{width:0;opacity:0}.mdc-chip-set--filter .mdc-chip__icon--leading-hidden.mdc-chip__icon--leading+.mdc-chip__checkmark{width:20px}@keyframes mdc-chip-entry{from{transform:scale(0.8);opacity:.4}to{transform:scale(1);opacity:1}}.mdc-chip-set{padding:4px;display:flex;flex-wrap:wrap;box-sizing:border-box}.mdc-chip-set .mdc-chip{margin:4px}.mdc-chip-set .mdc-chip--touch{margin-top:8px;margin-bottom:8px}.mdc-chip-set--input .mdc-chip{animation:mdc-chip-entry 100ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-chip{cursor:default}.mat-mdc-chip._mat-animation-noopable{transition-duration:1ms}.cdk-high-contrast-active .mat-mdc-chip{outline:solid 1px}.cdk-high-contrast-active .mat-mdc-chip:focus{outline:dotted 2px}.mat-mdc-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mdc-chip__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}.mdc-chip__ripple::after,.mdc-chip__ripple::before{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";pointer-events:none;opacity:0;border-radius:inherit}.mat-mdc-chip-disabled.mat-mdc-chip{opacity:.4}.mat-mdc-chip-disabled.mat-mdc-chip .mat-mdc-chip-trailing-icon,.mat-mdc-chip-disabled.mat-mdc-chip .mat-chip-row-focusable-text-content{pointer-events:none}.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::after,.mat-mdc-chip-disabled.mat-mdc-chip .mdc-chip__ripple::before{display:none}.mat-mdc-chip-set-stacked{flex-direction:column;align-items:flex-start}.mat-mdc-chip-set-stacked .mat-mdc-chip{width:100%}input.mat-mdc-chip-input{flex:1 0 150px}.cdk-high-contrast-black-on-white .mdc-chip__checkmark-path{stroke:#000 !important}.mat-chip-row-focusable-text-content{position:relative}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatChipGrid.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: core.ChangeDetectorRef },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },\n            { type: forms.NgForm, decorators: [{ type: core.Optional }] },\n            { type: forms.FormGroupDirective, decorators: [{ type: core.Optional }] },\n            { type: core$1.ErrorStateMatcher },\n            { type: forms.NgControl, decorators: [{ type: core.Optional }, { type: core.Self }] }\n        ]; };\n        MatChipGrid.propDecorators = {\n            disabled: [{ type: core.Input }],\n            placeholder: [{ type: core.Input }, { type: core.Input }],\n            required: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            change: [{ type: core.Output }],\n            valueChange: [{ type: core.Output }],\n            _chips: [{ type: core.ContentChildren, args: [MatChipRow, {\n                            // We need to use `descendants: true`, because Ivy will no longer match\n                            // indirect descendants if it's left as false.\n                            descendants: true\n                        },] }]\n        };\n        return MatChipGrid;\n    }(_MatChipGridMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Injection token to be used to override the default options for the chips module. */\n    var MAT_CHIPS_DEFAULT_OPTIONS = new core.InjectionToken('mat-chips-default-options');\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Increasing integer for generating unique ids.\n    var nextUniqueId = 0;\n    /**\n     * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n     * May be placed inside or outside of a `<mat-chip-grid>`.\n     */\n    var MatChipInput = /** @class */ (function () {\n        function MatChipInput(_elementRef, _defaultOptions) {\n            this._elementRef = _elementRef;\n            this._defaultOptions = _defaultOptions;\n            /** Whether the control is focused. */\n            this.focused = false;\n            this._addOnBlur = false;\n            /**\n             * The list of key codes that will trigger a chipEnd event.\n             *\n             * Defaults to `[ENTER]`.\n             */\n            this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n            /** Emitted when a chip is to be added. */\n            this.chipEnd = new core.EventEmitter();\n            /** The input's placeholder text. */\n            this.placeholder = '';\n            /** Unique id for the input. */\n            this.id = \"mat-chip-list-input-\" + nextUniqueId++;\n            this._disabled = false;\n            this._inputElement = this._elementRef.nativeElement;\n        }\n        Object.defineProperty(MatChipInput.prototype, \"chipGrid\", {\n            /** Register input for chip list */\n            set: function (value) {\n                if (value) {\n                    this._chipGrid = value;\n                    this._chipGrid.registerInput(this);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipInput.prototype, \"addOnBlur\", {\n            /**\n             * Whether or not the chipEnd event will be emitted when the input is blurred.\n             */\n            get: function () { return this._addOnBlur; },\n            set: function (value) { this._addOnBlur = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipInput.prototype, \"disabled\", {\n            /** Whether the input is disabled. */\n            get: function () { return this._disabled || (this._chipGrid && this._chipGrid.disabled); },\n            set: function (value) { this._disabled = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipInput.prototype, \"empty\", {\n            /** Whether the input is empty. */\n            get: function () { return !this._inputElement.value; },\n            enumerable: true,\n            configurable: true\n        });\n        MatChipInput.prototype.ngOnChanges = function () {\n            this._chipGrid.stateChanges.next();\n        };\n        /** Utility method to make host definition/tests more clear. */\n        MatChipInput.prototype._keydown = function (event) {\n            // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n            // want to do this when going backwards, because focus should go back to the first chip.\n            if (event && event.keyCode === keycodes.TAB && !keycodes.hasModifierKey(event, 'shiftKey')) {\n                this._chipGrid._allowFocusEscape();\n            }\n            this._emitChipEnd(event);\n        };\n        /** Checks to see if the blur should emit the (chipEnd) event. */\n        MatChipInput.prototype._blur = function () {\n            if (this.addOnBlur) {\n                this._emitChipEnd();\n            }\n            this.focused = false;\n            // Blur the chip list if it is not focused\n            if (!this._chipGrid.focused) {\n                this._chipGrid._blur();\n            }\n            this._chipGrid.stateChanges.next();\n        };\n        MatChipInput.prototype._focus = function () {\n            this.focused = true;\n            this._chipGrid.stateChanges.next();\n        };\n        /** Checks to see if the (chipEnd) event needs to be emitted. */\n        MatChipInput.prototype._emitChipEnd = function (event) {\n            if (!this._inputElement.value && !!event) {\n                this._chipGrid._keydown(event);\n            }\n            if (!event || this._isSeparatorKey(event)) {\n                this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n                if (event) {\n                    event.preventDefault();\n                }\n            }\n        };\n        MatChipInput.prototype._onInput = function () {\n            // Let chip list know whenever the value changes.\n            this._chipGrid.stateChanges.next();\n        };\n        /** Focuses the input. */\n        MatChipInput.prototype.focus = function () {\n            this._inputElement.focus();\n        };\n        /** Checks whether a keycode is one of the configured separators. */\n        MatChipInput.prototype._isSeparatorKey = function (event) {\n            if (keycodes.hasModifierKey(event)) {\n                return false;\n            }\n            var separators = this.separatorKeyCodes;\n            var keyCode = event.keyCode;\n            return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n        };\n        MatChipInput.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'input[matChipInputFor]',\n                        exportAs: 'matChipInput, matChipInputFor',\n                        host: {\n                            'class': 'mat-mdc-chip-input mat-input-element',\n                            '(keydown)': '_keydown($event)',\n                            '(blur)': '_blur()',\n                            '(focus)': '_focus()',\n                            '(input)': '_onInput()',\n                            '[id]': 'id',\n                            '[attr.disabled]': 'disabled || null',\n                            '[attr.placeholder]': 'placeholder || null',\n                            '[attr.aria-invalid]': '_chipGrid && _chipGrid.ngControl ? _chipGrid.ngControl.invalid : null',\n                            '[attr.aria-required]': '_chipGrid && _chipGrid.required || null',\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        MatChipInput.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n        ]; };\n        MatChipInput.propDecorators = {\n            chipGrid: [{ type: core.Input, args: ['matChipInputFor',] }],\n            addOnBlur: [{ type: core.Input, args: ['matChipInputAddOnBlur',] }],\n            separatorKeyCodes: [{ type: core.Input, args: ['matChipInputSeparatorKeyCodes',] }],\n            chipEnd: [{ type: core.Output, args: ['matChipInputTokenEnd',] }],\n            placeholder: [{ type: core.Input }],\n            id: [{ type: core.Input }],\n            disabled: [{ type: core.Input }]\n        };\n        return MatChipInput;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var CHIP_DECLARATIONS = [\n        MatChip,\n        MatChipAvatar,\n        MatChipCssInternalOnly,\n        MatChipGrid,\n        MatChipInput,\n        MatChipListbox,\n        MatChipOption,\n        MatChipRemove,\n        MatChipRow,\n        MatChipSet,\n        MatChipTrailingIcon,\n    ];\n    var Éµ0 = {\n        separatorKeyCodes: [keycodes.ENTER]\n    };\n    var MatChipsModule = /** @class */ (function () {\n        function MatChipsModule() {\n        }\n        MatChipsModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [core$1.MatCommonModule, common.CommonModule, core$1.MatRippleModule],\n                        exports: CHIP_DECLARATIONS,\n                        declarations: CHIP_DECLARATIONS,\n                        providers: [\n                            core$1.ErrorStateMatcher,\n                            {\n                                provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                                useValue: Éµ0\n                            }\n                        ]\n                    },] }\n        ];\n        return MatChipsModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_CHIPS_DEFAULT_OPTIONS = MAT_CHIPS_DEFAULT_OPTIONS;\n    exports.MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR = MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR;\n    exports.MatChip = MatChip;\n    exports.MatChipAvatar = MatChipAvatar;\n    exports.MatChipCssInternalOnly = MatChipCssInternalOnly;\n    exports.MatChipGrid = MatChipGrid;\n    exports.MatChipGridChange = MatChipGridChange;\n    exports.MatChipInput = MatChipInput;\n    exports.MatChipListbox = MatChipListbox;\n    exports.MatChipListboxChange = MatChipListboxChange;\n    exports.MatChipOption = MatChipOption;\n    exports.MatChipRemove = MatChipRemove;\n    exports.MatChipRow = MatChipRow;\n    exports.MatChipSelectionChange = MatChipSelectionChange;\n    exports.MatChipSet = MatChipSet;\n    exports.MatChipTrailingIcon = MatChipTrailingIcon;\n    exports.MatChipsModule = MatChipsModule;\n    exports.Éµ0 = Éµ0;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-experimental-mdc-chips.umd.js.map\n"]}