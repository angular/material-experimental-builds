@use '../mdc-helpers/mdc-helpers';
@use '../../material/core/theming/theming';
@import '@material/menu-surface/mixins.import';
@import '@material/list/mixins.import';

@mixin color($config-or-theme) {
  $config: theming.get-color-config($config-or-theme);
  @include mdc-helpers.mat-using-mdc-theme($config) {
    @include mdc-menu-surface-core-styles(mdc-helpers.$mat-theme-styles-query);
    @include mdc-list-deprecated-without-ripple(mdc-helpers.$mat-theme-styles-query);
  }
}

@mixin typography($config-or-theme) {
  $config: theming.get-typography-config($config-or-theme);
  @include mdc-helpers.mat-using-mdc-typography($config) {
    @include mdc-menu-surface-core-styles(mdc-helpers.$mat-typography-styles-query);

    .mat-mdc-autocomplete-panel {
      // Note that we include this private mixin, because the public one adds
      // a bunch of styles that we aren't using for the autocomplete panel.
      @include mdc-list-deprecated-base_(mdc-helpers.$mat-typography-styles-query);
    }
  }
}

@mixin density($config-or-theme) {}

@mixin theme($theme-or-color-config) {
  $theme: theming.legacy-get-theme($theme-or-color-config);
  @include theming.check-duplicate-theme-styles($theme, 'mat-mdc-autocomplete') {
    $color: theming.get-color-config($theme);
    $density: theming.get-density-config($theme);
    $typography: theming.get-typography-config($theme);

    @if $color != null {
      @include color($color);
    }
    @if $density != null {
      @include density($density);
    }
    @if $typography != null {
      @include typography($typography);
    }
  }
}
